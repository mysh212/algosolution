<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/algosolution/2024/01/11/test/"/>
    <url>/algosolution/2024/01/11/test/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023.04 TOI 潛力組題解</title>
    <link href="/algosolution/2023/04/25/TOI-202304/"/>
    <url>/algosolution/2023/04/25/TOI-202304/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/mysh212/Coding/tree/master/contest/joined/TOI-202304"><em><strong>Repo</strong></em></a><br>我終於把專題趕完ㄌ(灑花</p><h1 id="A-Icebreaker"><a href="#A-Icebreaker" class="headerlink" title="A.Icebreaker"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202304/Icebreaker%20(zh_TW).pdf">A.Icebreaker</a></h1><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>給你一堆關係，請你分成兩組，問怎麼分可以讓每一組中的任兩個人沒有關係。</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>簡而言之又是個二分圖問題，但這題不需要複雜的演算法，直接<em><strong>DFS</strong></em>就可以ㄌ<br>走到一個點，如果之前沒經過，就幫他上跟父節點相反的顏色（總共只有兩種顏色），但如果之前有經過，就會有兩種情況：</p><ol><li>顏色正常（跟父節點相反)</li><li>顏色錯誤（跟父節點相同）<br>對於第一種情況，因為之前走過，勢必會將其子節點遞迴完，所以不必重複確認，可以直接返回。<br>但如果是第二種情況，代表其必跟父節點同一組，但又因為跟父節點有關係，所以無論怎麼分都沒辦法符合題意，所以直接退出。</li></ol><blockquote><p>其實不是找環喔<br>舉個例：<br>1 2<br>2 3<br>3 4<br>4 1</p></blockquote><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <blockquote><p>其實code裡面有兩行useless code<br>閒的人可以找找</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/25/2023 Tue 10:02:43.14</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">color</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">bool</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> b<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>color<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>now <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            now<span class="token punctuation">.</span>second <span class="token operator">=</span> now<span class="token punctuation">.</span>second <span class="token operator">+</span> tmp<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            now<span class="token punctuation">.</span>first <span class="token operator">=</span> now<span class="token punctuation">.</span>first <span class="token operator">+</span> tmp<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> now<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            color <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> tmp <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>first<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h1 id="B-Land"><a href="#B-Land" class="headerlink" title="B.Land"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202304/Land%20(zh_TW).pdf">B.Land</a></h1><h2 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h2><p>給定一列土地，每塊土地都有一個地主 $a_i,1 \leq i \leq n$ 。<br>蓋房子需要地主同意，但你很懶，最多只想去問$k$個地主，問最多可以連續使用多少土地。</p><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><p>簡單<em><strong>DP</strong></em>，我的做法是先離散化後再直接開個陣列 $now$ 紀錄目前已經使用每個地主幾塊地，再來是 $sig$ ，記錄現在需要徵求多少地主同意，可以在更新範圍時維護， $l$ 則是目前土地的最左端，同樣可以在更新範圍的時候維護。</p><p>然後寫個迴圈，從左到右更新範圍，最後將答案對 $(r - l) + 1$ 取最大值即可。</p><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/25/2023 Tue  9:49:45.41</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">offline</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">v</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">offline</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">now</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> sig <span class="token operator">=</span> sig <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sig <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> sig <span class="token operator">=</span> sig <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>i <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h1 id="C-Name"><a href="#C-Name" class="headerlink" title="C.Name"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202304/Name%20(zh_TW).pdf">C.Name</a></h1><h2 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h2><p>定義 $f_{i,j} &#x3D; \{ 1\ when\ i &#x3D; j\ ,\ 0\ otherwise \}$<br>給你一堆字串 $s_i,\forall\ 1 \leq i \leq n$ 試求</p><p>$$<br>\sum_{r &#x3D; 1}^{|s_i|}\sum_{k &#x3D; \{x | x \geq 1 \wedge x \leq n \wedge x \not&#x3D; i\}} f_{s_i[1:r],s_k[1:r]}<br>$$</p><h2 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h2><p>說說我寫這題的心路歷程，<br>multiset -&gt; unordered_multiset<br>拿到<strong>TLE</strong>後徹底自閉</p><p>後來決定直接砸Trie<br>大概就是建樹的時候每走到一個節點就把那個節點的值+1<br>取答案的時候照著走一遍，把走過的節點值加起來就是答案ㄌ<br>對 就是這樣 <del>我相信你們都懂ㄌouob</del><br>好啦 看code</p><h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <blockquote><p>其實這是我第一次寫Trie<br>真快樂</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/25/2023 Tue  9:38:37.83</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">*</span><span class="token operator">></span>next<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>count<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        next<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>box root<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>box <span class="token operator">*</span>t<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> t<span class="token operator">-></span>next<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">-></span>next<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token operator">-></span>count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token operator">-></span>count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token operator">-></span>next<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>box <span class="token operator">*</span>t<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token operator">-></span>count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>t<span class="token operator">-></span>next<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
      <tag>solution</tag>
      
      <tag>exam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cses 進階題題解</title>
    <link href="/algosolution/2023/02/24/CSES%20Advanced%20Techniques/"/>
    <url>/algosolution/2023/02/24/CSES%20Advanced%20Techniques/</url>
    
    <content type="html"><![CDATA[<h1 id="Meet-in-the-Middle"><a href="#Meet-in-the-Middle" class="headerlink" title="Meet in the Middle"></a><a href="https://cses.fi/problemset/task/1628">Meet in the Middle</a></h1><p>折半枚舉</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/24/2023 Fri 13:28:19.73</span><span class="token comment">// https://cses.fi/problemset/task/1628</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">,</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">check</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>s<span class="token punctuation">,</span>f<span class="token punctuation">,</span>sig <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>s<span class="token punctuation">,</span>f<span class="token punctuation">,</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mid<span class="token punctuation">,</span>left<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>left<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> ans <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="tags-half-brute"><a href="#tags-half-brute" class="headerlink" title="tags: half-brute"></a>tags: <code>half-brute</code></h6><h1 id="Hamming-Distance"><a href="#Hamming-Distance" class="headerlink" title="Hamming Distance"></a><a href="https://cses.fi/problemset/task/2136">Hamming Distance</a></h1><p>位元運算</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/24/2023 Fri 19:44:35.71</span><span class="token comment">// https://cses.fi/problemset/task/2136</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">31</span><span class="token operator">></span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">31</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mmin <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bitset<span class="token operator">&lt;</span><span class="token number">31</span><span class="token operator">></span>tmp<span class="token punctuation">;</span>            tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="tags-bit"><a href="#tags-bit" class="headerlink" title="tags: bit"></a>tags: <code>bit</code></h6><h1 id="Beautiful-Subgrids"><a href="#Beautiful-Subgrids" class="headerlink" title="Beautiful Subgrids"></a><a href="https://cses.fi/problemset/task/2137/">Beautiful Subgrids</a></h1><p>還是位元運算<br>請用</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">target</span><span class="token punctuation">(</span></span><span class="token string">"popcnt"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>否則會$\color{cyan}TLE$</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/25/2023 Sat  6:37:38.90</span><span class="token comment">// https://cses.fi/problemset/task/2137</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">"O3,unroll-loops"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">target</span><span class="token punctuation">(</span></span><span class="token string">"avx2,bmi,bmi2,lzcnt,popcnt"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">3000</span><span class="token operator">></span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="tags-bit-1"><a href="#tags-bit-1" class="headerlink" title="tags: bit"></a>tags: <code>bit</code></h6><h1 id="Reachable-Nodes"><a href="#Reachable-Nodes" class="headerlink" title="Reachable Nodes"></a><a href="https://cses.fi/problemset/task/2138/">Reachable Nodes</a></h1><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/25/2023 Sat  7:08:07.73</span><span class="token comment">// https://cses.fi/problemset/task/2138</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">"O3,unroll-loops"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">target</span><span class="token punctuation">(</span></span><span class="token string">"avx2,bmi,bmi2,lzcnt,popcnt"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">50000</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">to</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span>N<span class="token operator">></span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span> s<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="tags-bit-graph-tapoo"><a href="#tags-bit-graph-tapoo" class="headerlink" title="tags: bit graph tapoo"></a>tags: <code>bit</code> <code>graph</code> <code>tapoo</code></h6><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
      <tag>solution</tag>
      
      <tag>cses</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022.12 TOI 潛力組題解</title>
    <link href="/algosolution/2022/12/30/TOI-202212/"/>
    <url>/algosolution/2022/12/30/TOI-202212/</url>
    
    <content type="html"><![CDATA[<p>嗯為什麼我覺得這次好難QAQ</p><h1 id="BST"><a href="#BST" class="headerlink" title="BST"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202212/BST%20(zh_TW).pdf">BST</a></h1><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a><em><strong>problem</strong></em></h3><p>給定一顆二元搜尋樹的後序走訪，請你復原這顆二元搜尋樹。</p><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a><em><strong>solution</strong></em></h3><p>因為左子樹的值會小於自己，而右子樹會大於自己，所以我可以採用「認領」的方式實作。</p><p>整理一下會發現對於每一個節點，其值必在所有<strong>右祖先節點</strong>與<strong>左祖先節點</strong>之間，我們令這兩個值分別為$max,min$$\text{, while}$ $min \leq max$ 。</p><p>由於不知道根結點很麻煩，所以將儲存後序走訪的陣列<code>f[]</code>倒轉，如此可以發現，在進入子樹之前，必會經過父節點。</p><p>令</p><ul><li>目前<strong>即將處裡</strong>的點在<code>f[]</code>的座標為$p$</li><li>現在所在節點為$x$</li><li>目前最大值與最小值分別為$max$,$min$</li></ul><p>遞迴:</p><ul><li>如果$f_p &gt; max$ or $f_p &lt; min$則結束迴圈</li><li>當$f_x &lt; f_p$ ，將$p$加一，往右子樹走訪。</li><li>如果$f_p &gt; max$ or $f_p &lt; min$則結束迴圈</li><li>當$f_x &gt; f_p$，將$p$加一，往左子樹走訪。</li></ul><p>最後整理輸出即可。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a><em><strong>code</strong></em></h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 12/29/2022 Thu 20:15:34.16</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">re</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> last<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> mmax<span class="token punctuation">,</span><span class="token keyword">int</span> mmin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mmin <span class="token operator">||</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> mmax<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>            re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>p<span class="token punctuation">,</span>mmax<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> mmin <span class="token operator">||</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> mmax<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>            re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>p<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">,</span>INT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h6 id="tags-DFS"><a href="#tags-DFS" class="headerlink" title="tags: DFS"></a><em><strong>tags</strong></em>: <code>DFS</code></h6><h1 id="Ants"><a href="#Ants" class="headerlink" title="Ants"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202212/Ants%20(zh_TW).pdf">Ants</a></h1><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a><em><strong>problem</strong></em></h3><p>一堆螞蟻走來走去，問你他們想講什麼。(對我不會摘錄，給我乖乖看題目)</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a><em><strong>solution</strong></em></h3><p>因為答案具有單調性，因此可以對答案使用二分搜尋法。</p><p>其中有趣的是當兩隻螞蟻相撞時，可以完全不管牠們。</p><blockquote><p>自己推推看 :)</p></blockquote><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a><em><strong>code</strong></em></h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 12/29/2022 Thu 21:00:55.24</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>mark<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mark<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first <span class="token operator">+</span> r <span class="token operator">></span> l<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> mark<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first <span class="token operator">-</span> r <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> mark<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans <span class="token operator">>=</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ck</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">ck</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">ck</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>l<span class="token punctuation">;</span>    string a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token function">ck</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> mark<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> mark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h5 id="tags-binary-search"><a href="#tags-binary-search" class="headerlink" title="tags: binary_search"></a><em><strong>tags</strong></em>: <code>binary_search</code></h5><h1 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202212/Numbers%20(zh_TW).pdf">Numbers</a></h1><div class="note note-danger">            <p>本題維修中&#x3D;&#x3D;</p>          </div><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a><em><strong>problem</strong></em></h3><p>有一個數列<code>f[]</code>，請寫出一程式以執行下列操作。</p><ul><li>給定$a,b$，求出$\displaystyle \sum _{k &#x3D; a}^b f_k$。</li><li>給定$a,b$，將<code>f[]</code>中$[a,b]$範圍內的數除以$10$(整數除法)。</li><li>給定$a,b$，將$f_a$更改為$b$。</li></ul><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a><em><strong>solution</strong></em></h3><p>這題根本超毒<del>(還是我線段樹中毒?)</del><br>因為直接做複雜度過高，所以使用客製化線段樹(?)+<em><strong>lazy tag</strong></em>模擬操作。</p><p>為了避免線段樹除法的進位問題，直接開一個<code>struct</code>，其中包含一個陣列，紀錄除以$10$ ($[1,19]$)次後的狀況，如此在合併兩個葉節點時只需要將陣列中的每一項相加就可以了。</p><p>也因此遇到<em><strong>lazy tag</strong></em>時可以直接取用該節點的陣列中的值。<br>但要注意不需要乘上$(r - l + 1)$，不然會出錯<font color = 'gray'>(別問我為甚麼知道)</font>。</p><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a><em><strong>code</strong></em></h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 12/29/2022 Thu 21:25:07.10</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">19</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> r <span class="token operator">=</span> r <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// debug(n,f);</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>box a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        box tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span>n <span class="token operator">=</span> tmp<span class="token punctuation">.</span>n <span class="token operator">+</span> a<span class="token punctuation">.</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">19</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        box tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span>n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>box a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// box tmp;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f <span class="token operator">=</span> <span class="token generic-function"><span class="token function">deque</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// template&lt;typename box></span><span class="token keyword">struct</span> <span class="token class-name">seg_tree</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">></span>f<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>hold<span class="token punctuation">;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hold<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hold<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//debug(f.at(t).n,hold.at(t));</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+=</span> hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+=</span> hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+=</span> hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//debug(f.at(t).n);</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token function">exact</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token function">re</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">exact</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">exact</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//debug(l,r,t);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> l <span class="token operator">||</span> nl <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">add</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">re</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">fix</span><span class="token punctuation">(</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> l <span class="token operator">||</span> nl <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fix</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fix</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">re</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> l <span class="token operator">||</span> nl <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> hold<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">exact</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span><span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cerr<span class="token operator">&lt;&lt;</span><span class="token function">sum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cerr<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>box <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    seg_tree <span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// t.print();</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>n<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">fix</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// t.print();</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// t.print();</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><hr><div class='spoiler collapsed'>    <div class='spoiler-title'>        brute code    </div>    <div class='spoiler-content'>        <div class="note note-info">            <p>附上暴力<em><strong>code</strong></em></p>          </div><blockquote><p>不知道為甚麼這效率似乎比較好(?)</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 12/31/2022 Sat 14:47:06.12</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> ans <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><hr><div class='spoiler collapsed'>    <div class='spoiler-title'>        test case generater    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Author : ysh</span><span class="token comment"># 12/31/2022 Sat 14:50:32.74</span><span class="token keyword">from</span> random <span class="token keyword">import</span> randint <span class="token keyword">as</span> ri<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.in'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> ri<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> ri<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ri<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> ri<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token comment"># f.write(str(ri(1,3)) + ' ' + str(t) + ' ' + str(ri(t,10)) + '\n')</span>        r <span class="token operator">=</span> ri<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'1 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ri<span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'2 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ri<span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'3 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ri<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h5 id="tags-seg-tree-lazy-tag-struct"><a href="#tags-seg-tree-lazy-tag-struct" class="headerlink" title="tags: seg_tree lazy-tag struct"></a><em><strong>tags</strong></em>: <code>seg_tree</code> <code>lazy-tag</code> <code>struct</code></h5><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
      <tag>solution</tag>
      
      <tag>exam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BIT區間加值</title>
    <link href="/algosolution/2022/12/07/BIT%E5%8D%80%E9%96%93%E5%8A%A0%E5%80%BC/"/>
    <url>/algosolution/2022/12/07/BIT%E5%8D%80%E9%96%93%E5%8A%A0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="緒論"><a href="#緒論" class="headerlink" title="緒論"></a>緒論</h1><p>眾所周知，<em><strong>BIT</strong></em>能夠實現在$O(n)$空間下單點加值，並計算區間和。<br>至於區間加值則需要使用線段樹及<em><strong>lazy tag</strong></em>。<br>但線段樹code超長，debug很累，而且需要約$4n$的空間。</p><p>於是我們想要在<em><strong>BIT</strong></em>上實作區間加值，這有可能嗎?</p><p>答案是肯定的。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>差分就是將序列中的每一項改為自己減去前一項之值，也就是說:</p><div class="note note-success">            <p>$g_i &#x3D; f_i - f_{i - 1},if \space i &gt;&#x3D; 1$<br>$g_i &#x3D; g_i,if \space i &#x3D; 0$</p>          </div><p>於是乎，當我們要求$f_i$時，只需(?)求出$\displaystyle \sum_{k &#x3D; 0}^{i} g_k$即可。<br>看起來畫蛇添足，但這在區間加值，單點查詢時很有用。</p><h2 id="差分-BIT"><a href="#差分-BIT" class="headerlink" title="差分 + BIT?"></a>差分 + BIT?</h2><p><em><strong>BIT</strong></em>能夠在$O(\log n)$時間內完成<strong>單點修改</strong>、<strong>區間查詢</strong>。<br>而差分則能夠在$O(1)$時間內完成<strong>區間加值</strong>、$O(n)$時間內完成<strong>單點查詢</strong>。</p><p>於是乎，我們將兩者合併。</p><div class="note note-info">            <p><code>g[]</code>為差分序列<br><code>f[]</code>為原序列</p>          </div><p>$\displaystyle \sum_{k &#x3D; 0}^b f_k &#x3D; \sum_{k &#x3D; 0}^b g_k \cdot (b + 1 - k) &#x3D; [(b + 2) \cdot \sum_{k &#x3D; 0}^b g_i] - [\sum_{k &#x3D; 0}^b g_i \cdot (k + 1)]$</p><p>所以，我們維護兩顆<em><strong>BIT</strong></em>，分別儲存<code>g[]</code>及$g_i \cdot (i + 1)$即可做到$O(\log n)$完成<strong>區間加值</strong>、<strong>區間查詢</strong>了</p><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d799">例題</a></h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 12/07/2022 Wed 12:54:30.08</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> last <span class="token operator">-</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token function">g</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tree <span class="token function">a</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> aa<span class="token punctuation">,</span>bb<span class="token punctuation">;</span>cin<span class="token operator">>></span>aa<span class="token operator">>></span>bb<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aa <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>bb <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bb<span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>bb <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aa <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bb<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">!=</span> n<span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bb<span class="token punctuation">,</span>d <span class="token operator">*</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">!=</span> n<span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>d <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>演算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
      <tag>BIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微積分上課筆記5</title>
    <link href="/algosolution/2022/12/05/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%985/"/>
    <url>/algosolution/2022/12/05/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%985/</url>
    
    <content type="html"><![CDATA[<h1 id="段考範圍"><a href="#段考範圍" class="headerlink" title="段考範圍"></a>段考範圍</h1><p><img src="/ps/IMG_20221205_142118.jpg"></p><h1 id="羅畢達定理"><a href="#羅畢達定理" class="headerlink" title="羅畢達定理"></a>羅畢達定理</h1><div class="note note-primary">            <p>when $f(x)$ and $g(x)$ are differentiable and $g’(a)\neq 0$,then<br>if $\displaystyle \lim_{x \rightarrow a} f(x) &#x3D; 0$ $\displaystyle \lim_{x \rightarrow a} g(x) &#x3D; 0$ (or equal to $\displaystyle +-\infty$),then<br>$\displaystyle \lim_{x \rightarrow a} \frac{f(x)}{g(x)} &#x3D; \lim_{x \rightarrow a} \frac{f’(x)}{g’(x)}$<br><font color='red'> while </font> $\displaystyle \color{red} \lim_{x \rightarrow a} \frac{f(x)}{g(x)}$ <font color='red'>exists</font></p>          </div><h2 id="適用條件"><a href="#適用條件" class="headerlink" title="適用條件"></a>適用條件</h2><blockquote><ol><li>$\frac{0}{0}$ or $\frac{\infty}{\infty}$</li><li>$0$ or $\infty$</li><li>$\infty - \infty$</li><li>$0^\infty$,$\infty ^ 0$ and $1 ^ \infty$</li></ol></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>數學</category>
      
      <category>上課筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022.11 TOI 潛力組題解</title>
    <link href="/algosolution/2022/12/02/TOI-202211/"/>
    <url>/algosolution/2022/12/02/TOI-202211/</url>
    
    <content type="html"><![CDATA[<p>因為感覺沒甚麼人在寫TOI練習賽題解，而且為了拯救快變成修課筆記的競程筆記，想說來寫看看</p><h1 id="Cycle"><a href="#Cycle" class="headerlink" title="Cycle"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202211/Cycle%20(zh_TW).pdf">Cycle</a></h1><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a><em><strong>problem</strong></em></h3><p>給定一有向圖，求能夠到達任一環路的所有點集合。</p><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a><em><strong>solution</strong></em></h3><p>開一個陣列<strong>倒著</strong>記錄每一個有向邊。<br>再用一個陣列記錄入度，跑一次拓樸排序，剩下入度不為<code>0</code>的點即是環路及可到達環路的點（因為是倒著紀錄）。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a><em><strong>code</strong></em></h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 11/30/2022 Wed 21:10:47.58</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">re</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">to</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h6 id="tags-graph-tapoo"><a href="#tags-graph-tapoo" class="headerlink" title="tags: graph tapoo"></a><em><strong>tags:</strong></em> <code>graph</code> <code>tapoo</code></h6><h1 id="Serving"><a href="#Serving" class="headerlink" title="Serving"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202211/Serving%20(zh_TW).pdf">Serving</a></h1><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a><em><strong>problem</strong></em></h3><p>恩題敘好複雜，我不知道怎麼寫QAQ</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a><em><strong>solution</strong></em></h3><p>用一顆<code>BIT</code>記錄這個人是否拿到餐點，如果是，則該值為<code>0</code>，否則為<code>1</code>。<br>我們先使用<code>pair&lt;int,int&gt;</code>記錄客人的餐點跟位置，然後排序。<br>接著每上一道菜，就使用二分搜對客人位置搜尋第一個還沒上菜的客人位置（因為排過序所以可以直接搜尋）<br>找到位置後，將答案加上<code>BIT</code>中第<code>0</code>位到該位的和(也就是沒被上到菜的人之怒氣值)。<br>最後將<code>BIT</code>中該位置的值減一。</p><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a><em><strong>code</strong></em></h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <div class="note note-info">            <p>註：<code>&lt;tree&gt;</code>是<a href="https://github.com/mysh212/Coding/blob/master/library/tree"><em><strong>BIT模板</strong></em></a></p>          </div><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 11/30/2022 Wed 21:32:09.78</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;tree></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cp</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">tmp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">t</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>now<span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ffound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> found<span class="token punctuation">;</span>i <span class="token operator">!=</span> f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-></span>second <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            ffound <span class="token operator">=</span> i<span class="token operator">-></span>second<span class="token punctuation">;</span>            i<span class="token operator">-></span>second <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ffound<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> ans <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ffound<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h6 id="tags-BIT-sort"><a href="#tags-BIT-sort" class="headerlink" title="tags: BIT sort"></a><em><strong>tags:</strong></em> <code>BIT</code> <code>sort</code></h6><h1 id="Selling"><a href="#Selling" class="headerlink" title="Selling"></a><a href="https://github.com/mysh212/Coding/blob/master/contest/joined/TOI-202211/Selling%20(zh_TW).pdf">Selling</a></h1><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a><em><strong>problem</strong></em></h3><p>有一農夫沿途賣蔬果，路上有許多城市，他可以選擇是否停下，一旦停下便將進行買賣，同時將車<br>子的油箱加滿，且當車子沒有油時必須停下加油。<br>給定每一城市的可能獲利(可為負值）$f_i \space ,1 \leq i \leq n$，以及油箱加滿最多可行駛的距離$k$，問最大獲利？</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a><em><strong>solution</strong></em></h3><p>標準的<code>DP</code>題型，我們開<code>g[]</code>讓$g_i$為<strong>行經一個城市</strong>$i$<strong>所能得到的最大獲利</strong>。<br>經過推導可得<br>$g_i&#x3D;max({a_x|(i - k) \leq x&lt;i}) + f_i$<br>$\text{if } i \leq k \rightarrow g_i &#x3D; max(g_i,f_i)$<br>但暴力求前$k$項的最大值會<code>TLE</code>，所以使用<code>priority queue</code>記錄前幾項的最大值。</p><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a><em><strong>code</strong></em></h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        code    </div>    <div class='spoiler-content'>        <figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 11/30/2022 Wed 21:57:11.30</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>INT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> i <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>    </div></div><h6 id="tags-priority-queue-DP"><a href="#tags-priority-queue-DP" class="headerlink" title="tags: priority_queue DP"></a><em><strong>tags:</strong></em> <code>priority_queue</code> <code>DP</code></h6><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
      <tag>solution</tag>
      
      <tag>exam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微積分上課筆記4</title>
    <link href="/algosolution/2022/11/28/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%984/"/>
    <url>/algosolution/2022/11/28/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%984/</url>
    
    <content type="html"><![CDATA[<h2 id="三角函數"><a href="#三角函數" class="headerlink" title="三角函數"></a>三角函數</h2><p>$sin(sin^{-1}x)&#x3D;x$<br>$\displaystyle \frac{d}{dx}sin(sin^{-1}x)&#x3D;\frac{dx}{dx} &#x3D; 1$<br>$\displaystyle &#x3D;cos(sin^{-1}x) \frac{d}{dx}sin^{-1}x$<br>$\displaystyle (sin^{-1}x)’ &#x3D; \frac{1}{cos(sin^{-1}x)}$<br>$\displaystyle &#x3D;\frac{1}{\sqrt{cos^2(sin^{-1} x)}}$<br>$\displaystyle &#x3D; \frac{1}{\sqrt{1 - sin^2(sin^{-1} x)}}$<br>$\displaystyle &#x3D;\frac{1}{\sqrt{1 - x^2}}$</p><blockquote><p>$cos$ 同理</p></blockquote><p>$tan(tan^{-1}x)&#x3D;x$<br>$\displaystyle \frac{d}{dx}tan(tan^{-1}x)&#x3D;\frac{dx}{dx} &#x3D; 1$<br>$\displaystyle &#x3D;sec(tan^{-1}x) \frac{d}{dx}tan^{-1}x$<br>$\displaystyle &#x3D;\frac{1}{1 + tan^2(tan^{-1} x)} &#x3D; \frac{1}{1 + x^2}$</p><p><img src="/ps/IMG_20221128_154842.jpg"></p><h3 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h3><blockquote><p>Prove that $\displaystyle tan^{-1}x + cot^{-1} x &#x3D; \frac{\pi}{2}$</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        solution    </div>    <div class='spoiler-content'>        <p>$\displaystyle (tan^{-1}x)’ + (cot^{-1})’ x &#x3D; (\frac{\pi}{2})’ &#x3D; 0$</p>    </div></div><div class="note note-success">            <p>考試範圍 8.2</p>          </div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>數學</category>
      
      <category>上課筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微積分上課筆記3</title>
    <link href="/algosolution/2022/11/21/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%983/"/>
    <url>/algosolution/2022/11/21/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%983/</url>
    
    <content type="html"><![CDATA[<h1 id="微積分上課筆記"><a href="#微積分上課筆記" class="headerlink" title="微積分上課筆記"></a>微積分上課筆記</h1><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><p><em><strong><font color='gray'>P.441</font></strong></em></p><blockquote><p>$\displaystyle (\ln x)’ &#x3D; \frac{x’}{x}$ $\text{or}$ $\displaystyle [\ln(g(x))]’ &#x3D; \frac{g’(x)}{g(x)}$</p></blockquote><blockquote><p>求$\displaystyle y&#x3D;\frac{x^{\frac{3}{4}} \sqrt{x^2+1}}{(3x+2)^5}$之微分</p></blockquote><p>$\displaystyle \frac{dy}{dx} \frac{1}{y}&#x3D; \frac{3}{4} \frac{1}{x}+\frac{1}{2} \frac{2x}{x^2+1}-5\frac{3}{3x+2}$</p><blockquote><p>$\ln e^x &#x3D; x\ln e &#x3D; x$<br>$(x\ln e)’ &#x3D; (x)’ &#x3D; 1$<br>$\displaystyle\frac{1}{e ^ 2} \frac{d}{dx}e^x&#x3D;1$<br>$\displaystyle\rightarrow \frac{d}{dx}e^x&#x3D;e^x$<br>唯一一個微分後不變的ㄈ</p></blockquote><h3 id="與-log-之關係"><a href="#與-log-之關係" class="headerlink" title="與$log$之關係"></a>與$log$之關係</h3><p>$\displaystyle \log_b^a&#x3D;\frac{\ln a}{\ln b}$<br><em><strong>if b is a constant</strong></em><br>$\displaystyle </p><p>$\displaystyle (x^x)’ &#x3D; e^{x \ln x}$</p><h2 id="積分"><a href="#積分" class="headerlink" title="積分"></a>積分</h2><blockquote><p>求$\displaystyle \int_1^e \frac{\ln x}{x}dx$</p></blockquote><p>$\displaystyle &#x3D;\int_1^e (\ln x) \cdot d(\ln x)$<br>$\text{(due to}$ $(\ln x)’ &#x3D; \frac{1}{x} \text{)}$<br>$\displaystyle &#x3D;\frac{1}{2}(\ln x) ^ 2|_1^e$</p><h2 id="反函數"><a href="#反函數" class="headerlink" title="反函數"></a>反函數</h2><blockquote><p>$y &#x3D; \ln x \rightarrow x &#x3D; \exp y$</p></blockquote><blockquote><p>$\displaystyle e^x&#x3D;y \rightarrow \ln y&#x3D;x$<br>$\displaystyle e^{\ln x}&#x3D;x$<br>$\ln{(e^x)} &#x3D; x, x \in R$</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>數學</category>
      
      <category>上課筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微積分上課筆記2</title>
    <link href="/algosolution/2022/11/16/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%982/"/>
    <url>/algosolution/2022/11/16/%E5%BE%AE%E7%A9%8D%E5%88%86%E4%B8%8A%E8%AA%B2%E7%AD%86%E8%A8%982/</url>
    
    <content type="html"><![CDATA[<h1 id="微積分上課筆記"><a href="#微積分上課筆記" class="headerlink" title="微積分上課筆記"></a>微積分上課筆記</h1><ul><li><em><strong>2022&#x2F;11&#x2F;16</strong></em></li></ul><h2 id="One-to-one-function"><a href="#One-to-one-function" class="headerlink" title="One to one function"></a>One to one function</h2><blockquote><p>for every $y$, there is only <strong>at most</strong> one $x$ satisfies $f(x) &#x3D; y$.</p></blockquote><h3 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h3><p>$f(x)&#x3D;\sqrt{-1-x}$ $\rightarrow x \leq -1$ &#x3D;&gt; $f^{-1}(x)&#x3D;-1-x^2$</p><p><img src="/ps/IMG_20221116_133243.jpg"></p><h2 id="The-Calculus-of-Inverse-Functions"><a href="#The-Calculus-of-Inverse-Functions" class="headerlink" title="The Calculus of Inverse Functions"></a>The Calculus of Inverse Functions</h2><blockquote><p>Theorem. If $f$ is a one-to-one continuous function defined on an interval, then its inverse function is also continuous.</p></blockquote><p>$\frac{df^{-1}(f(x))}{dx}&#x3D;\frac{dx}{dx}&#x3D;1$<br>$\rightarrow \frac{d}{dx} f^{-1}(f(x)) \times \frac{df}{dx}&#x3D;1$<br>$\rightarrow f’(f^{-1}(x))\times \frac{df^{-1}(x)}{dx}&#x3D;1$<br>$\rightarrow \frac{df^{-1}(x)}{dx} &#x3D; \frac{1}{f’(f^{-1}(x))}$<br><font color='red'>  重要 </font></p><h3 id="例題-1"><a href="#例題-1" class="headerlink" title="例題"></a>例題</h3><blockquote><p>If $f(x)&#x3D;2x+cosx$ ,<br>find $(f^{−1})′(1)$</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        solution    </div>    <div class='spoiler-content'>        <p>$y&#x3D;f(x)&#x3D;2x + cos(x)$</p><blockquote><p>not easy to find the explicit form of $f^{-1}(x)$</p></blockquote><p>$f’&#x3D;2-sinx$<br>&#x3D;&gt; $f$ is increase function &#x3D;&gt; one-to-one<br>&#x3D;&gt;$f^{-1}$exists</p>    </div></div><h2 id="The-Natural-logarithmic-Function"><a href="#The-Natural-logarithmic-Function" class="headerlink" title="The Natural logarithmic Function"></a>The Natural logarithmic Function</h2><blockquote><p>$ln(x)&#x3D;\int_1^x \frac{1}{x},x &gt; 0$</p></blockquote><p><img src="/ps/20221116140242.png"></p><h3 id="Laws"><a href="#Laws" class="headerlink" title="Laws"></a>Laws</h3><ol><li>$ln(xy)&#x3D;ln(x) + ln(y)$</li><li>$ln(\frac{x}{y}) &#x3D; ln(x) - ln(y)$</li><li>$ln(x^r) &#x3D; rln(x)$</li></ol><p>$ln(x)&#x3D;\int_1^x \frac{1}{t}dt$<br>$\frac{d}{dx}ln(x) &#x3D; \frac{d}{dx} \int_1^x \frac{1}{t}dt&#x3D;\frac{1}{x}$,due to $ln(1)&#x3D;0$</p><h4 id="Proof-rule-1"><a href="#Proof-rule-1" class="headerlink" title="Proof rule 1"></a>Proof rule 1</h4><p>因為$ln(x)$和$ln(ax)$有相同導數<br>$ln(x) + C &#x3D; ln(ax)$<br>&#x3D;&gt; $let$ $x &#x3D; 1$<br>&#x3D;&gt;$0 + C &#x3D; ln(a)$<br>&#x3D;&gt;$C &#x3D; ln(a)$</p><h4 id="Proof-rule-3"><a href="#Proof-rule-3" class="headerlink" title="Proof rule 3"></a>Proof rule 3</h4><p>因為$ln(x)$和$ln(x^r)$有相同導數<br>$ln(x) + C &#x3D; ln(x^r)$<br>$let$ $x &#x3D; 1$<br>&#x3D;&gt; $0 + C &#x3D; 0$<br>&#x3D;&gt;$C &#x3D; 0$<br>&#x3D;&gt;$ln(x) &#x3D; ln(x^r)$</p><!-- =>$ln(ax)=ln(x) + r$=>$\frac{1}{x^r}=\frac{1}{x} + \frac{dr}{dx}$=>$\frac{dr}{dx}=\frac{1}{x^r} - \frac{1}{x}$=>$r=\frac{1}{-r+1}x^{-r+1} - ln(x)$ --><h3 id="e"><a href="#e" class="headerlink" title="$e$"></a>$e$</h3><blockquote><p>$e$ is the number such that $ln(e)&#x3D; 1$<br>$e \rightarrow 1.71828$</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>數學</category>
      
      <category>上課筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>匈牙利演算法</title>
    <link href="/algosolution/2022/11/16/%E5%8C%88%E7%89%99%E5%88%A9%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    <url>/algosolution/2022/11/16/%E5%8C%88%E7%89%99%E5%88%A9%E6%BC%94%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>開幾個array:<br>    1. <code>now</code> -&gt; 記錄該點目前被誰佔有<br>    2. <code>mark</code> -&gt; 記錄該點是否被嘗試過</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a><a href="https://tioj.ck.tp.edu.tw/problems/1069">範例</a></h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/21/2022 Fri 16:06:37.82</span><span class="token comment">// https://tioj.ck.tp.edu.tw/problems/1069</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">t</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> box <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> t <span class="token operator">></span> a<span class="token punctuation">.</span>t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>b <span class="token operator">-</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>mark<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">now</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> ck <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ck</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>t <span class="token operator">+</span> <span class="token function">dt</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ck</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n <span class="token operator">-</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>i<span class="token punctuation">.</span>t<span class="token operator">>></span>i<span class="token punctuation">.</span>x<span class="token operator">>></span>i<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// sort(f.rbegin(),f.rend());</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>對於每一個點，記錄它能在時間內到達的其他點，存在<code>v[]</code>裡，接著對於每個點，我們可以發現，如果在時間內無法到達任何點，或是能到達的點都被佔領了，就需要多一位人員。</p><p>所以我們寫一個函數，嘗試為傳入的點匹配一個能到達的點，如果成功就回傳<code>true</code>，失敗則測試能否為已匹配的點找到其他可行的點，若都失敗，則回傳<code>false</code>。注意如果對於一個點，被多次呼叫（該次呼叫前就已經匹配過）時，就需要再為它匹配另一個點。</p><p>最後，我們只需要對於每個點呼叫一次函數，如果回傳<code>false</code>，代表無法匹配，所以將需要人數加一。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>演算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>學科區賽經驗</title>
    <link href="/algosolution/2022/11/15/%E5%AD%B8%E7%A7%91%E5%8D%80%E8%B3%BD%E7%B6%93%E9%A9%97/"/>
    <url>/algosolution/2022/11/15/%E5%AD%B8%E7%A7%91%E5%8D%80%E8%B3%BD%E7%B6%93%E9%A9%97/</url>
    
    <content type="html"><![CDATA[<h1 id="學科區賽經驗"><a href="#學科區賽經驗" class="headerlink" title="學科區賽經驗"></a>學科區賽經驗</h1><h2 id="平時"><a href="#平時" class="headerlink" title="平時"></a>平時</h2><ul><li>找個強的人跟著練(真的)</li><li><a href="https://cses.fi/problemset"><font color = '#AAAA00'><em><strong>cses problemset</strong></em></font></a>很好用</li><li><del>加入<font color = 'orange'><em><strong>CITRC</strong></em></font></del></li></ul><h2 id="賽前"><a href="#賽前" class="headerlink" title="賽前"></a>賽前</h2><ul><li>盡量不要緊張</li><li>看那種容易忘的演算法</li><li>不要再寫題目了</li></ul><h2 id="賽中"><a href="#賽中" class="headerlink" title="賽中"></a>賽中</h2><ul><li>穩穩地寫</li><li>教授如果說題目要照難度排那絕對是騙人的&#x3D;&#x3D;</li><li>不管有多少人先走都不要慌(<del>因為它有可能是放棄的</del>)</li><li>旁邊的如果放棄不要被影響(像我旁邊的就是放棄然後開小畫家畫畫&#x3D;&#x3D;)</li><li>因為題目常常出錯，所以有問題儘管問</li></ul><h2 id="賽末"><a href="#賽末" class="headerlink" title="賽末"></a>賽末</h2><ul><li>趁有時間逛逛嘉中，<del>因為緊張成績也不會更好</del>。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>破台真的不是夢:)<!-- ## 心得 --></li><li>附上題目連結:<br><a href="https://drive.google.com/drive/folders/17yfv7KzTWZid279GlRNxyMunip-ynEcJ"><font color='#AAAA00'><em><strong>https://drive.google.com/drive/folders/17yfv7KzTWZid279GlRNxyMunip-ynEcJ</strong></em></font></a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>實戰</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微積分上課筆記1</title>
    <link href="/algosolution/2022/11/14/calculus/"/>
    <url>/algosolution/2022/11/14/calculus/</url>
    
    <content type="html"><![CDATA[<h1 id="微積分上課筆記"><a href="#微積分上課筆記" class="headerlink" title="微積分上課筆記"></a>微積分上課筆記</h1><ul><li><em><strong>Euler method</strong></em> 開方</li></ul><h2 id="Volumes-by-Cylinderical-Shells"><a href="#Volumes-by-Cylinderical-Shells" class="headerlink" title="Volumes by Cylinderical Shells"></a>Volumes by Cylinderical Shells</h2><blockquote><p>[time&#x3D;2022,11,14]</p></blockquote><h3 id="Disk-method"><a href="#Disk-method" class="headerlink" title="Disk method"></a>Disk method</h3><p>$\int _a ^b \pi f^2(x)dx$</p><h3 id="Shell-method"><a href="#Shell-method" class="headerlink" title="Shell method"></a>Shell method</h3><p>$\int^{d}_{c}2\pi y f(y)dy$</p><p><em><strong>check</strong></em></p><div class="admonition note"><p>算球體體積</p><p>Calc the volume of a ball</p></div><div class="admonition warning"><p>這是半球體積</p></div><p>$r &#x3D; x$<br>$h&#x3D;\sqrt{1^2 - x^2}$<br>$Volume &#x3D; \int_0^1 2\pi x\sqrt{1^2 - x^2}dx$<br>$let$ $u &#x3D; 1 - x^2$<br>$V &#x3D; \pi\int_0^1\sqrt u$ $du$<br>$&#x3D; \pi \frac{2}{3}(u) ^{\frac{3}{2}}|_{u &#x3D; 0}^{1}$<br>$&#x3D; \frac{\frac{4}{3}\pi 1^3}{2} &#x3D; \frac{2}{3}$</p><h2 id="Mean-Value-Theorem-for-Integrals"><a href="#Mean-Value-Theorem-for-Integrals" class="headerlink" title="Mean Value Theorem for Integrals"></a>Mean Value Theorem for Integrals</h2><p><font color='gray'><strong>均值定理</strong></font></p><blockquote><p>If $f(x)$ is continuous on $[a,b]$, then there exists a number $c$ in $[a,b]$ such that<br>$f(c)&#x3D;f_{ave}&#x3D;\frac{1}{b - a}\int_a^bf(x)dx$ that is, $\int^b_af(x)dx&#x3D;f(c)(b - a)$</p></blockquote><h3 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h3><blockquote><p>Proof that there is at least one root in interval $[0,\pi]$ in $f(x)&#x3D; cosx + 2cos(2x) + … + ncos(nx)$</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        solution    </div>    <div class='spoiler-content'>        <p>$\int_0^\pi f(x)dx$</p><p>$&#x3D;\int_0^\pi \sum^{n}_{k&#x3D;1} kcos(kx) dx$</p><p>$&#x3D;\sum^{n}_{k&#x3D;1}sin(kx)|_0^\pi$</p><p>$&#x3D;0&#x3D;f(c)(\pi - 0)$</p>    </div></div><h2 id="Functions-and-Inverse-Functions"><a href="#Functions-and-Inverse-Functions" class="headerlink" title="Functions and Inverse Functions"></a>Functions and Inverse Functions</h2><p>只有一對一函數有<br>$f(x) &#x3D; \sqrt{x} \rightarrow f^{-1}(x) &#x3D; y^2$</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>數學</category>
      
      <category>上課筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algosolution</title>
    <link href="/algosolution/2022/11/13/algosolution/"/>
    <url>/algosolution/2022/11/13/algosolution/</url>
    
    <content type="html"><![CDATA[<p><em><strong>“palace</strong></em></p><h6 id="tags-emissary-quot-cpp"><a href="#tags-emissary-quot-cpp" class="headerlink" title="tags:  emissary&quot;.cpp"></a>tags:  <code>emissary&quot;.cpp</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/%22palace"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00115">AGAR-king2.cpp</a></strong></em></p><h6 id="tags-priority-queue"><a href="#tags-priority-queue" class="headerlink" title="tags:  priority_queue"></a>tags:  <code>priority_queue</code></h6><blockquote><p>[time&#x3D;02,04,2022 Fri 14:32:20,17]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AGAR-king2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d010">AP325-d010.cpp</a></strong></em></p><h6 id="tags-queue"><a href="#tags-queue" class="headerlink" title="tags:  queue"></a>tags:  <code>queue</code></h6><blockquote><p>[time&#x3D;02,23,2022 Wed  8:48:27,43]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d010.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d011">AP325-d011.cpp</a></strong></em></p><h6 id="tags-map"><a href="#tags-map" class="headerlink" title="tags:  map"></a>tags:  <code>map</code></h6><blockquote><p>[time&#x3D;02,23,2022 Wed  8:38:30,63]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d011.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d012">AP325-d012.cpp</a></strong></em></p><h6 id="tags-fast-power"><a href="#tags-fast-power" class="headerlink" title="tags:  fast-power"></a>tags:  <code>fast-power</code></h6><blockquote><p>[time&#x3D;07,14,2022 Thu 22:28:10,35]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d012.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d013">AP325-d013.py</a></strong></em></p><h6 id="tags-fast-power-1"><a href="#tags-fast-power-1" class="headerlink" title="tags:  fast-power"></a>tags:  <code>fast-power</code></h6><blockquote><p>[time&#x3D;07,14,2022 Thu 23:03:13,67]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d013.py"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d014">AP325-d014.cpp</a></strong></em></p><h6 id="tags-fib"><a href="#tags-fib" class="headerlink" title="tags:  fib"></a>tags:  <code>fib</code></h6><blockquote><p>[time&#x3D;07,14,2022 Thu 23:08:52,03]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d014.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d015">AP325-d015.cpp</a></strong></em></p><h6 id="tags-set"><a href="#tags-set" class="headerlink" title="tags:  set"></a>tags:  <code>set</code></h6><blockquote><p>[time&#x3D;03,09,2022 Wed 10:23:30,20]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d015.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d019">AP325-d019.cpp</a></strong></em></p><h6 id="tags-half-brute"><a href="#tags-half-brute" class="headerlink" title="tags:  half-brute"></a>tags:  <code>half-brute</code></h6><blockquote><p>[time&#x3D;07,15,2022 Fri 19:13:53,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d019.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d020">AP325-d020.cpp</a></strong></em></p><h6 id="tags-set-pref"><a href="#tags-set-pref" class="headerlink" title="tags:  set pref"></a>tags:  <code>set</code> <code>pref</code></h6><blockquote><p>[time&#x3D;02,23,2022 Wed  9:43:33,87]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d020.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d021">AP325-d021.cpp</a></strong></em></p><h6 id="tags-set-lower-bound-brute"><a href="#tags-set-lower-bound-brute" class="headerlink" title="tags:  set lower_bound brute"></a>tags:  <code>set</code> <code>lower_bound</code> <code>brute</code></h6><blockquote><p>[time&#x3D;07,15,2022 Fri 22:50:36,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d021.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d022">AP325-d022.cpp</a></strong></em></p><h6 id="tags-fast-power-operator"><a href="#tags-fast-power-operator" class="headerlink" title="tags:  fast-power operator"></a>tags:  <code>fast-power</code> <code>operator</code></h6><blockquote><p>[time&#x3D;07,16,2022 Sat  7:49:57,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d022.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d028">AP325-d028.cpp</a></strong></em></p><h6 id="tags-vector-stack"><a href="#tags-vector-stack" class="headerlink" title="tags:  vector stack"></a>tags:  <code>vector</code> <code>stack</code></h6><blockquote><p>[time&#x3D;03,09,2022 Wed 10:38:12,01]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d028.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d029">AP325-d029.cpp</a></strong></em></p><h6 id="tags-binary-search-deque-compare-operator-struct"><a href="#tags-binary-search-deque-compare-operator-struct" class="headerlink" title="tags:  binary_search deque compare operator struct"></a>tags:  <code>binary_search</code> <code>deque</code> <code>compare</code> <code>operator</code> <code>struct</code></h6><blockquote><p>[time&#x3D;07,25,2022 Mon 17:19:30,64]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d029.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d031">AP325-d031.cpp</a></strong></em></p><h6 id="tags-map-1"><a href="#tags-map-1" class="headerlink" title="tags:  map"></a>tags:  <code>map</code></h6><blockquote><p>[time&#x3D;07,16,2022 Sat 14:55:13,37]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d031.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d032">AP325-d032.cpp</a></strong></em></p><h6 id="tags-priority-queue-DP"><a href="#tags-priority-queue-DP" class="headerlink" title="tags:  priority_queue DP"></a>tags:  <code>priority_queue</code> <code>DP</code></h6><blockquote><p>[time&#x3D;07,17,2022 Sun  8:07:47,65]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d032.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d033">AP325-d033.cpp</a></strong></em></p><h6 id="tags-queue-sweep-line"><a href="#tags-queue-sweep-line" class="headerlink" title="tags:  queue sweep-line"></a>tags:  <code>queue</code> <code>sweep-line</code></h6><blockquote><p>[time&#x3D;07,17,2022 Sun 11:39:24,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d033.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d034">AP325-d034.cpp</a></strong></em></p><h6 id="tags-sweep-line-queue-map"><a href="#tags-sweep-line-queue-map" class="headerlink" title="tags:  sweep-line queue map"></a>tags:  <code>sweep-line</code> <code>queue</code> <code>map</code></h6><blockquote><p>[time&#x3D;07,17,2022 Sun 12:49:37,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d034.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d035">AP325-d035.cpp</a></strong></em></p><h6 id="tags-sweep-line"><a href="#tags-sweep-line" class="headerlink" title="tags:  sweep-line"></a>tags:  <code>sweep-line</code></h6><blockquote><p>[time&#x3D;07,18,2022 Mon  7:04:23,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d035.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d036">AP325-d036-2.cpp</a></strong></em></p><h6 id="tags-DC"><a href="#tags-DC" class="headerlink" title="tags:  DC"></a>tags:  <code>DC</code></h6><blockquote><p>[time&#x3D;09,09,2022 Fri 12:42:08,53]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d036-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d036">AP325-d036-3.cpp</a></strong></em></p><h6 id="tags-sweep-line-1"><a href="#tags-sweep-line-1" class="headerlink" title="tags:  sweep-line"></a>tags:  <code>sweep-line</code></h6><blockquote><p>[time&#x3D;09,09,2022 Fri 14:26:04,52]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d036-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d037">AP325-d037.cpp</a></strong></em></p><h6 id="tags-DP-priority-queue-sweep-line"><a href="#tags-DP-priority-queue-sweep-line" class="headerlink" title="tags:  DP priority_queue sweep-line"></a>tags:  <code>DP</code> <code>priority_queue</code> <code>sweep-line</code></h6><blockquote><p>[time&#x3D;07,20,2022 Wed 19:09:21,45]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d037.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d038">AP325-d038.cpp</a></strong></em></p><h6 id="tags-DC-1"><a href="#tags-DC-1" class="headerlink" title="tags:  DC"></a>tags:  <code>DC</code></h6><blockquote><p>[time&#x3D;07,20,2022 Wed 19:43:31,70]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d038.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d043">AP325-d043.cpp</a></strong></em></p><h6 id="tags-deque-greedy"><a href="#tags-deque-greedy" class="headerlink" title="tags:  deque greedy"></a>tags:  <code>deque</code> <code>greedy</code></h6><blockquote><p>[time&#x3D;03,06,2022 Sun 12:16:13,33]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d043.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d045">AP325-d045.cpp</a></strong></em></p><h6 id="tags-greedy"><a href="#tags-greedy" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;07,20,2022 Wed 20:44:54,04]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d045.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d046">AP325-d046.cpp</a></strong></em></p><h6 id="tags-greedy-1"><a href="#tags-greedy-1" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;07,21,2022 Thu 19:55:59,76]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d046.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d049">AP325-d049.cpp</a></strong></em></p><h6 id="tags-greedy-binary-search"><a href="#tags-greedy-binary-search" class="headerlink" title="tags:  greedy binary_search"></a>tags:  <code>greedy</code> <code>binary_search</code></h6><blockquote><p>[time&#x3D;07,21,2022 Thu 21:44:18,73]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d049.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d050">AP325-d050.cpp</a></strong></em></p><h6 id="tags-sweep-line-struct"><a href="#tags-sweep-line-struct" class="headerlink" title="tags:  sweep-line struct"></a>tags:  <code>sweep-line</code> <code>struct</code></h6><blockquote><p>[time&#x3D;03,11,2022 Fri  7:44:40,26]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d050.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d051">AP325-d051.py</a></strong></em></p><h6 id="tags-greedy-DP"><a href="#tags-greedy-DP" class="headerlink" title="tags:  greedy DP"></a>tags:  <code>greedy</code> <code>DP</code></h6><blockquote><p>[time&#x3D;07,22,2022 Fri  6:19:41,82]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d051.py"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d052">AP325-d052-2.cpp</a></strong></em></p><h6 id="tags-DC-2"><a href="#tags-DC-2" class="headerlink" title="tags:  DC"></a>tags:  <code>DC</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d052-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d053">AP325-d053.cpp</a></strong></em></p><h6 id="tags-greedy-priority-queue"><a href="#tags-greedy-priority-queue" class="headerlink" title="tags:  greedy priority_queue"></a>tags:  <code>greedy</code> <code>priority_queue</code></h6><blockquote><p>[time&#x3D;07,29,2022 Fri 16:07:36,85]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d053.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d054">AP325-d054-2.cpp</a></strong></em></p><h6 id="tags-binary-search"><a href="#tags-binary-search" class="headerlink" title="tags:  binary_search"></a>tags:  <code>binary_search</code></h6><blockquote><p>[time&#x3D;07,30,2022 Sat 14:19:18,52]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d054-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d055">AP325-d055-2.cpp</a></strong></em></p><h6 id="tags-re-sweep-line"><a href="#tags-re-sweep-line" class="headerlink" title="tags:  re sweep-line"></a>tags:  <code>re</code> <code>sweep-line</code></h6><blockquote><p>[time&#x3D;09,10,2022 Sat 14:52:31,15]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d055-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d055">AP325-d055.cpp</a></strong></em></p><h6 id="tags-sweep-line-greedy"><a href="#tags-sweep-line-greedy" class="headerlink" title="tags:  sweep-line greedy"></a>tags:  <code>sweep-line</code> <code>greedy</code></h6><blockquote><p>[time&#x3D;08,03,2022 Wed 10:06:43,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d055.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d057">AP325-d057.cpp</a></strong></em></p><h6 id="tags-greedy-2"><a href="#tags-greedy-2" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;07,24,2022 Sun 15:30:58,68]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d057.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d059">AP325-d059.cpp</a></strong></em></p><h6 id="tags-binary-search-lower-bound"><a href="#tags-binary-search-lower-bound" class="headerlink" title="tags:  binary_search lower_bound"></a>tags:  <code>binary_search</code> <code>lower_bound</code></h6><blockquote><p>[time&#x3D;07,29,2022 Fri 22:34:36,50]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d059.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d060">AP325-d060.cpp</a></strong></em></p><h6 id="tags-priority-queue-1"><a href="#tags-priority-queue-1" class="headerlink" title="tags:  priority_queue"></a>tags:  <code>priority_queue</code></h6><blockquote><p>[time&#x3D;07,24,2022 Sun 18:46:07,88]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d060.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d061">AP325-d061.cpp</a></strong></em></p><h6 id="tags-greedy-sweep-line"><a href="#tags-greedy-sweep-line" class="headerlink" title="tags:  greedy sweep-line"></a>tags:  <code>greedy</code> <code>sweep-line</code></h6><blockquote><p>[time&#x3D;07,25,2022 Mon 17:00:30,85]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d061.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d064">AP325-d064-3.cpp</a></strong></em></p><h6 id="tags-pb-ds-tree"><a href="#tags-pb-ds-tree" class="headerlink" title="tags:  pb_ds tree"></a>tags:  <code>pb_ds</code> <code>tree</code></h6><blockquote><p>[time&#x3D;08,17,2022 Wed 21:36:49,09]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d064-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d064">AP325-d064-4.cpp</a></strong></em></p><h6 id="tags-BIT-tree"><a href="#tags-BIT-tree" class="headerlink" title="tags:  BIT tree"></a>tags:  <code>BIT</code> <code>tree</code></h6><blockquote><p>[time&#x3D;08,17,2022 Wed 21:46:43,85]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d064-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d064">AP325-d064-5.cpp</a></strong></em></p><h6 id="tags-tree-BIT"><a href="#tags-tree-BIT" class="headerlink" title="tags:  tree BIT"></a>tags:  <code>tree</code> <code>BIT</code></h6><blockquote><p>[time&#x3D;08,17,2022 Wed 22:00:02,29]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d064-5.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d065">AP325-d065.cpp</a></strong></em></p><h6 id="tags-DC-3"><a href="#tags-DC-3" class="headerlink" title="tags:  DC"></a>tags:  <code>DC</code></h6><blockquote><p>[time&#x3D;07,29,2022 Fri 19:03:40,55]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d065.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d066">AP325-d066.cpp</a></strong></em></p><h6 id="tags-DP"><a href="#tags-DP" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;03,11,2022 Fri  9:24:35,97]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d066.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d067">AP325-d067.cpp</a></strong></em></p><h6 id="tags-DP-1"><a href="#tags-DP-1" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;03,11,2022 Fri 10:19:19,44]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d067.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d069">AP325-d069.cpp</a></strong></em></p><h6 id="tags-DP-2"><a href="#tags-DP-2" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,22,2022 Fri 20:33:58,38]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d069.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d070">AP325-d070.cpp</a></strong></em></p><h6 id="tags-DP-3"><a href="#tags-DP-3" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,22,2022 Fri 20:49:33,56]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d070.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d071">AP325-d071.cpp</a></strong></em></p><h6 id="tags-DP-4"><a href="#tags-DP-4" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,22,2022 Fri 21:25:52,94]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d071.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d072">AP325-d072-2.cpp</a></strong></em></p><h6 id="tags-DP-5"><a href="#tags-DP-5" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;05,06,2022 Fri 11:14:37,63]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d072-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d073">AP325-d073.cpp</a></strong></em></p><h6 id="tags-DP-brute"><a href="#tags-DP-brute" class="headerlink" title="tags:  DP brute"></a>tags:  <code>DP</code> <code>brute</code></h6><blockquote><p>[time&#x3D;07,24,2022 Sun 15:13:52,17]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d073.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d075">AP325-d075.cpp</a></strong></em></p><h6 id="tags-DP-6"><a href="#tags-DP-6" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;07,26,2022 Tue 13:54:21,92]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d075.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d076">AP325-d076.cpp</a></strong></em></p><h6 id="tags-DP-7"><a href="#tags-DP-7" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,22,2022 Fri 21:41:23,21]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d076.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d076">AP325-d076.py</a></strong></em></p><h6 id="tags-DP-8"><a href="#tags-DP-8" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,22,2022 Fri 21:51:48,00]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d076.py"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d077">AP325-d077-3.cpp</a></strong></em></p><h6 id="tags-DP-priority-queue"><a href="#tags-DP-priority-queue" class="headerlink" title="tags:  DP priority_queue"></a>tags:  <code>DP</code> <code>priority_queue</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d077-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d077">AP325-d077-4.cpp</a></strong></em></p><h6 id="tags-DP-deque"><a href="#tags-DP-deque" class="headerlink" title="tags:  DP deque"></a>tags:  <code>DP</code> <code>deque</code></h6><blockquote><p>[time&#x3D;04,29,2022 Fri 14:15:23,88]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d077-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d078">AP325-d078.cpp</a></strong></em></p><h6 id="tags-DP-vector"><a href="#tags-DP-vector" class="headerlink" title="tags:  DP vector"></a>tags:  <code>DP</code> <code>vector</code></h6><blockquote><p>[time&#x3D;04,29,2022 Fri 10:15:44,93]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d078.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d079">AP325-d079-2.cpp</a></strong></em></p><h6 id="tags-DP-9"><a href="#tags-DP-9" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;05,21,2022 Sat 17:23:38,31]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d079-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d079">AP325-d079-3.cpp</a></strong></em></p><h6 id="tags-DP-re"><a href="#tags-DP-re" class="headerlink" title="tags:  DP re"></a>tags:  <code>DP</code> <code>re</code></h6><blockquote><p>[time&#x3D;06,09,2022 Thu 21:24:21,97]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d079-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d080">AP325-d080.cpp</a></strong></em></p><h6 id="tags-DP-eg"><a href="#tags-DP-eg" class="headerlink" title="tags:  DP eg."></a>tags:  <code>DP</code> <code>eg.</code></h6><blockquote><p>[time&#x3D;05,23,2022 Mon  8:14:30,36]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d080.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d086">AP325-d086-2.cpp</a></strong></em></p><h6 id="tags-DP-10"><a href="#tags-DP-10" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;07,21,2022 Thu 16:31:59,32]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d086-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d086">AP325-d086.cpp</a></strong></em></p><h6 id="tags-DP-11"><a href="#tags-DP-11" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;07,21,2022 Thu  8:49:51,74]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d086.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d091">AP325-d091.cpp</a></strong></em></p><h6 id="tags-DSU-graph"><a href="#tags-DSU-graph" class="headerlink" title="tags:  DSU graph"></a>tags:  <code>DSU</code> <code>graph</code></h6><blockquote><p>[time&#x3D;07,28,2022 Thu 14:55:22,07]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d091.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d095">AP325-d095.cpp</a></strong></em></p><h6 id="tags-DP-graph"><a href="#tags-DP-graph" class="headerlink" title="tags:  DP graph"></a>tags:  <code>DP</code> <code>graph</code></h6><blockquote><p>[time&#x3D;04,15,2022 Fri 10:12:41,37]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d095.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d100">AP325-d100.cpp</a></strong></em></p><h6 id="tags-graph-DSU"><a href="#tags-graph-DSU" class="headerlink" title="tags:  graph DSU"></a>tags:  <code>graph</code> <code>DSU</code></h6><blockquote><p>[time&#x3D;10,05,2022 Wed 11:41:47,20]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d100.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=d102">AP325-d102.cpp</a></strong></em></p><h6 id="tags-graph-DFS-DSU-struct-operator"><a href="#tags-graph-DFS-DSU-struct-operator" class="headerlink" title="tags:  graph DFS DSU struct operator"></a>tags:  <code>graph</code> <code>DFS</code> <code>DSU</code> <code>struct</code> <code>operator</code></h6><blockquote><p>[time&#x3D;09,16,2022 Fri 20:49:09,28]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d102.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-10503-3.cpp</strong></em></p><h6 id="tags-struct"><a href="#tags-struct" class="headerlink" title="tags:  struct"></a>tags:  <code>struct</code></h6><blockquote><p>[time&#x3D;04,29,2022 Fri 21:21:49,72]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-10503-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-10503-4.cpp</strong></em></p><h6 id="tags-DP-tree"><a href="#tags-DP-tree" class="headerlink" title="tags:  DP tree"></a>tags:  <code>DP</code> <code>tree</code></h6><blockquote><p>[time&#x3D;04,29,2022 Fri 21:49:04,42]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-10503-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-10610-3.cpp</strong></em></p><h6 id="tags-DP-tree-1"><a href="#tags-DP-tree-1" class="headerlink" title="tags:  DP tree"></a>tags:  <code>DP</code> <code>tree</code></h6><blockquote><p>[time&#x3D;05,01,2022 Sun 16:30:04,99]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-10610-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-10610-4.cpp</strong></em></p><h6 id="tags-compare"><a href="#tags-compare" class="headerlink" title="tags:  compare"></a>tags:  <code>compare</code></h6><blockquote><p>[time&#x3D;05,07,2022 Sat 12:55:43,76]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-10610-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-10901-03.cpp</strong></em></p><h6 id="tags-list"><a href="#tags-list" class="headerlink" title="tags:  list"></a>tags:  <code>list</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-10901-03.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-10907-3.cpp</strong></em></p><h6 id="tags-binary-search-1"><a href="#tags-binary-search-1" class="headerlink" title="tags:  binary_search"></a>tags:  <code>binary_search</code></h6><blockquote><p>[time&#x3D;05,21,2022 Sat 16:20:49,80]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-10907-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11001-3.cpp</strong></em></p><h6 id="tags-set-1"><a href="#tags-set-1" class="headerlink" title="tags:  set"></a>tags:  <code>set</code></h6><blockquote><p>[time&#x3D;05,21,2022 Sat 21:19:53,85]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11001-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11001-4.cpp</strong></em></p><h6 id="tags-DP-12"><a href="#tags-DP-12" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;05,22,2022 Sun 10:58:32,17]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11001-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11101-03-2.cpp</strong></em></p><h6 id="tags-set-hash-unordered-set"><a href="#tags-set-hash-unordered-set" class="headerlink" title="tags:  set hash unordered_set"></a>tags:  <code>set</code> <code>hash</code> <code>unordered_set</code></h6><blockquote><p>[time&#x3D;03,05,2022 Sat 20:16:46,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11101-03-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11101-03.cpp</strong></em></p><h6 id="tags-search"><a href="#tags-search" class="headerlink" title="tags:  search"></a>tags:  <code>search</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11101-03.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11106-3-3.cpp</strong></em></p><h6 id="tags-binary-search-2"><a href="#tags-binary-search-2" class="headerlink" title="tags:  binary_search"></a>tags:  <code>binary_search</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11106-3-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11106-4-2.cpp</strong></em></p><h6 id="tags-DP-13"><a href="#tags-DP-13" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,14,2022 Tue  8:26:42,81]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11106-4-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11106-4-3.cpp</strong></em></p><h6 id="tags-DP-14"><a href="#tags-DP-14" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,14,2022 Tue  9:00:43,91]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11106-4-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11106-4.cpp</strong></em></p><h6 id="tags-DP-15"><a href="#tags-DP-15" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,13,2022 Mon 11:22:31,16]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11106-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11110-4-2.cpp</strong></em></p><h6 id="tags-BFS-DP"><a href="#tags-BFS-DP" class="headerlink" title="tags:  BFS DP"></a>tags:  <code>BFS</code> <code>DP</code></h6><blockquote><p>[time&#x3D;10,24,2022 Mon 10:21:27,02]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11110-4-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>APCS-11110-4-3.cpp</strong></em></p><h6 id="tags-BFS-binary-search-DSU"><a href="#tags-BFS-binary-search-DSU" class="headerlink" title="tags:  BFS binary_search DSU"></a>tags:  <code>BFS</code> <code>binary_search</code> <code>DSU</code></h6><blockquote><p>[time&#x3D;10,24,2022 Mon 10:21:43,37]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCS-11110-4-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://apcsclass.csie.ntnu.edu.tw/ShowProblem?problemid=a137">APCSP-a137-2.cpp</a></strong></em></p><h6 id="tags-DSU-MST"><a href="#tags-DSU-MST" class="headerlink" title="tags:  DSU MST"></a>tags:  <code>DSU</code> <code>MST</code></h6><blockquote><p>[time&#x3D;12,08,2022 Thu  9:39:23,26]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/APCSP-a137-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1142/">Advertisement-2.cpp</a></strong></em></p><h6 id="tags-DC-4"><a href="#tags-DC-4" class="headerlink" title="tags:  DC"></a>tags:  <code>DC</code></h6><blockquote><p>[time&#x3D;10,27,2022 Thu 18:25:06,75]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Advertisement-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1635/problem/B">Avoid-Local-Maximums.cpp</a></strong></em></p><h6 id="tags-contest"><a href="#tags-contest" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,20,2022 Sun 22:51:17,00]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Avoid-Local-Maximums.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1666">Building-Roads.cpp</a></strong></em></p><h6 id="tags-graph"><a href="#tags-graph" class="headerlink" title="tags:  graph"></a>tags:  <code>graph</code></h6><blockquote><p>[time&#x3D;08,13,2022 Sat  7:44:15,40]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Building-Roads.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/problemset/problem/938/D">Buy-a-Ticket.cpp</a></strong></em></p><h6 id="tags-graph-1"><a href="#tags-graph-1" class="headerlink" title="tags:  graph"></a>tags:  <code>graph</code></h6><blockquote><p>[time&#x3D;08,24,2022 Wed 17:39:53,03]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Buy-a-Ticket.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1636">Coin-Combinations-II.cpp</a></strong></em></p><h6 id="tags-DP-16"><a href="#tags-DP-16" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;07,30,2022 Sat 18:58:36,53]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Coin-Combinations-II.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/G">Colten’s-math-problem.cpp</a></strong></em></p><h6 id="tags-contest-1"><a href="#tags-contest-1" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 15:19:55,74]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Colten's-math-problem.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/I">Colten-work-in-THSR.cpp</a></strong></em></p><h6 id="tags-contest-2"><a href="#tags-contest-2" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 16:03:37,98]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Colten-work-in-THSR.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1687">Company-Queries-I.cpp</a></strong></em></p><h6 id="tags-tree"><a href="#tags-tree" class="headerlink" title="tags:  tree"></a>tags:  <code>tree</code></h6><blockquote><p>[time&#x3D;11,04,2022 Fri 14:03:57,46]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Company-Queries-I.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1688">Company-Queries-II.cpp</a></strong></em></p><h6 id="tags-LCA-tree"><a href="#tags-LCA-tree" class="headerlink" title="tags:  LCA tree"></a>tags:  <code>LCA</code> <code>tree</code></h6><blockquote><p>[time&#x3D;11,04,2022 Fri 14:19:29,34]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Company-Queries-II.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/problemset/problem/1750/D">Count-GCD.cpp</a></strong></em></p><h6 id="tags-math"><a href="#tags-math" class="headerlink" title="tags:  math"></a>tags:  <code>math</code></h6><blockquote><p>[time&#x3D;11,22,2022 Tue 11:17:46,40]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Count-GCD.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1136">Counting-Paths.cpp</a></strong></em></p><h6 id="tags-tree-LCA-difference"><a href="#tags-tree-LCA-difference" class="headerlink" title="tags:  tree LCA difference"></a>tags:  <code>tree</code> <code>LCA</code> <code>difference</code></h6><blockquote><p>[time&#x3D;11,04,2022 Fri 14:46:42,16]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Counting-Paths.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1192">Counting-Rooms.cpp</a></strong></em></p><h6 id="tags-DFS"><a href="#tags-DFS" class="headerlink" title="tags:  DFS"></a>tags:  <code>DFS</code></h6><blockquote><p>[time&#x3D;07,31,2022 Sun 16:42:02,67]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Counting-Rooms.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1679">Course-Schedule.cpp</a></strong></em></p><h6 id="tags-tapo-graph"><a href="#tags-tapo-graph" class="headerlink" title="tags:  tapo graph"></a>tags:  <code>tapo</code> <code>graph</code></h6><blockquote><p>[time&#x3D;10,11,2022 Tue 11:29:32,42]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Course-Schedule.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://192.168.193.20/contest/2/problem/038">Cut.cpp</a></strong></em></p><h6 id="tags-DP-17"><a href="#tags-DP-17" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,06,2022 Mon 10:54:01,62]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Cut.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1135">Distance-Queries-2.cpp</a></strong></em></p><h6 id="tags-tree-LCA"><a href="#tags-tree-LCA" class="headerlink" title="tags:  tree LCA"></a>tags:  <code>tree</code> <code>LCA</code></h6><blockquote><p>[time&#x3D;11,04,2022 Fri 14:31:53,59]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Distance-Queries-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1734">Distinct-Values-Queries.cpp</a></strong></em></p><h6 id="tags-seg-tree-offline"><a href="#tags-seg-tree-offline" class="headerlink" title="tags:  seg_tree offline"></a>tags:  <code>seg_tree</code> <code>offline</code></h6><blockquote><p>[time&#x3D;11,22,2022 Tue 23:34:15,03]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Distinct-Values-Queries.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1764/problem/D">Doremy’s-Pegging-Game.cpp</a></strong></em></p><h6 id="tags-math-1"><a href="#tags-math-1" class="headerlink" title="tags:  math"></a>tags:  <code>math</code></h6><blockquote><p>[time&#x3D;11,28,2022 Mon 21:12:09,57]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Doremy's-Pegging-Game.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://choj.me/problem/c001">EIKO’s-concert.cpp</a></strong></em></p><h6 id="tags-choj-chsh-exam"><a href="#tags-choj-chsh-exam" class="headerlink" title="tags:  choj chsh-exam"></a>tags:  <code>choj</code> <code>chsh-exam</code></h6><blockquote><p>[time&#x3D;07,01,2022 Fri  6:28:45,19]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/EIKO's-concert.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1195">Flight-Discount.cpp</a></strong></em></p><h6 id="tags-graph-dijkstra"><a href="#tags-graph-dijkstra" class="headerlink" title="tags:  graph dijkstra"></a>tags:  <code>graph</code> <code>dijkstra</code></h6><blockquote><p>[time&#x3D;08,30,2022 Tue 13:34:45,07]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Flight-Discount.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://atcoder.jp/contests/dp/tasks/dp_q">Flowers-2.cpp</a></strong></em></p><h6 id="tags-DP-BIT"><a href="#tags-DP-BIT" class="headerlink" title="tags:  DP BIT"></a>tags:  <code>DP</code> <code>BIT</code></h6><blockquote><p>[time&#x3D;09,14,2022 Wed  8:39:04,05]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Flowers-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://atcoder.jp/contests/dp/tasks/dp_q">Flowers.cpp</a></strong></em></p><h6 id="tags-DP-18"><a href="#tags-DP-18" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;09,14,2022 Wed  8:27:04,81]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Flowers.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1652">Forest-Queries.cpp</a></strong></em></p><h6 id="tags-DP-19"><a href="#tags-DP-19" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;11,29,2022 Tue 16:56:30,75]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Forest-Queries.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>Fortune-Telling.cpp</strong></em></p><h6 id="tags-contest-3"><a href="#tags-contest-3" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,07,2022 Mon 10:16:46,86]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Fortune-Telling.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1144/problem/F">Graph-Without-Long-Directed-Paths.cpp</a></strong></em></p><h6 id="tags-DSU-graph-DFS"><a href="#tags-DSU-graph-DFS" class="headerlink" title="tags:  DSU graph DFS"></a>tags:  <code>DSU</code> <code>graph</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;10,12,2022 Wed 14:01:07,26]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Graph-Without-Long-Directed-Paths.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1638">Grid-Paths.cpp</a></strong></em></p><h6 id="tags-DP-20"><a href="#tags-DP-20" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;08,25,2022 Thu 17:23:21,41]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Grid-Paths.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1673">High-Score-5.cpp</a></strong></em></p><h6 id="tags-graph-DFS"><a href="#tags-graph-DFS" class="headerlink" title="tags:  graph DFS"></a>tags:  <code>graph</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;10,10,2022 Mon  8:29:12,95]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/High-Score-5.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://www.usaco.org/index.php?page=viewproblem2">Hoof-Paper-Scissors.cpp</a></strong></em></p><h6 id="tags-DP-21"><a href="#tags-DP-21" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;10,22,2022 Sat 17:14:51,38]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Hoof-Paper-Scissors.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1143">Hotel-Queries.cpp</a></strong></em></p><h6 id="tags-seg-tree-binary-search"><a href="#tags-seg-tree-binary-search" class="headerlink" title="tags:  seg_tree binary_search"></a>tags:  <code>seg_tree</code> <code>binary_search</code></h6><blockquote><p>[time&#x3D;11,29,2022 Tue 17:06:04,60]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Hotel-Queries.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://www.luogu.com.cn/problem/P1993">K’s-farm.cpp</a></strong></em></p><h6 id="tags-graph-difference"><a href="#tags-graph-difference" class="headerlink" title="tags:  graph difference"></a>tags:  <code>graph</code> <code>difference</code></h6><blockquote><p>[time&#x3D;10,18,2022 Tue 16:24:07,31]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/K's-farm.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://atcoder.jp/contests/dp/tasks/dp_d">Knapsack1.cpp</a></strong></em></p><h6 id="tags-DP-22"><a href="#tags-DP-22" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,02,2022 Thu  9:11:13,58]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Knapsack1.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://www.luogu.com.cn/problem/P3379">LCA.cpp</a></strong></em></p><h6 id="tags-gp-hash-table-tree-LCA-sparse-table-BFS-DFS"><a href="#tags-gp-hash-table-tree-LCA-sparse-table-BFS-DFS" class="headerlink" title="tags:  gp_hash_table tree LCA sparse_table BFS DFS"></a>tags:  <code>gp_hash_table</code> <code>tree</code> <code>LCA</code> <code>sparse_table</code> <code>BFS</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;10,15,2022 Sat  8:08:49,90]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/LCA.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1193">Labyrinth.cpp</a></strong></em></p><h6 id="tags-BFS-re-search"><a href="#tags-BFS-re-search" class="headerlink" title="tags:  BFS re-search"></a>tags:  <code>BFS</code> <code>re-search</code></h6><blockquote><p>[time&#x3D;08,09,2022 Tue 15:34:23,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Labyrinth.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1680/">Longest-Flight-Route-2.cpp</a></strong></em></p><h6 id="tags-graph-re-search-tapo-DAG"><a href="#tags-graph-re-search-tapo-DAG" class="headerlink" title="tags:  graph re-search tapo DAG"></a>tags:  <code>graph</code> <code>re-search</code> <code>tapo</code> <code>DAG</code></h6><blockquote><p>[time&#x3D;10,12,2022 Wed 11:21:18,29]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Longest-Flight-Route-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/888/problem/E">Maximum-Subsequence-2.cpp</a></strong></em></p><h6 id="tags-half-brute-1"><a href="#tags-half-brute-1" class="headerlink" title="tags:  half-brute"></a>tags:  <code>half-brute</code></h6><blockquote><p>[time&#x3D;12,07,2022 Wed 21:07:56,37]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Maximum-Subsequence-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1667">Message-Route.cpp</a></strong></em></p><h6 id="tags-BFS-re-search-1"><a href="#tags-BFS-re-search-1" class="headerlink" title="tags:  BFS re-search"></a>tags:  <code>BFS</code> <code>re-search</code></h6><blockquote><p>[time&#x3D;08,13,2022 Sat 10:08:29,02]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Message-Route.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>Middle-Letter.py</strong></em></p><h6 id="tags-contest-4"><a href="#tags-contest-4" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;08,27,2022 Sat 20:48:38,10]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Middle-Letter.py"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>Modulo-Number.py</strong></em></p><h6 id="tags-contest-5"><a href="#tags-contest-5" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;08,27,2022 Sat 20:51:43,18]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Modulo-Number.py"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1194">Monsters.cpp</a></strong></em></p><h6 id="tags-BFS"><a href="#tags-BFS" class="headerlink" title="tags:  BFS"></a>tags:  <code>BFS</code></h6><blockquote><p>[time&#x3D;08,16,2022 Tue  8:08:02,33]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Monsters.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1027/problem/D">Mouse-Hunt.cpp</a></strong></em></p><h6 id="tags-DFS-1"><a href="#tags-DFS-1" class="headerlink" title="tags:  DFS"></a>tags:  <code>DFS</code></h6><blockquote><p>[time&#x3D;12,07,2022 Wed 11:45:56,90]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Mouse-Hunt.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1741/problem/F">Multi-Colored-Segments.cpp</a></strong></em></p><h6 id="tags-seg-tree-offline-1"><a href="#tags-seg-tree-offline-1" class="headerlink" title="tags:  seg_tree offline"></a>tags:  <code>seg_tree</code> <code>offline</code></h6><blockquote><p>[time&#x3D;12,03,2022 Sat 20:17:16,52]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Multi-Colored-Segments.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1645/">Nearest-Smaller-Values.cpp</a></strong></em></p><h6 id="tags-priority-queue-2"><a href="#tags-priority-queue-2" class="headerlink" title="tags:  priority_queue"></a>tags:  <code>priority_queue</code></h6><blockquote><p>[time&#x3D;05,31,2022 Tue 21:55:19,94]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Nearest-Smaller-Values.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/B">Number-compare.cpp</a></strong></em></p><h6 id="tags-contest-6"><a href="#tags-contest-6" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 14:10:10,21]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Number-compare.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/D">Perfect-take.cpp</a></strong></em></p><h6 id="tags-contest-7"><a href="#tags-contest-7" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,14,2022 Mon 13:00:20,28]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Perfect-take.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1696/problem/D">Permutation-Graph-2.cpp</a></strong></em></p><h6 id="tags-greedy-3"><a href="#tags-greedy-3" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;12,09,2022 Fri  9:13:44,31]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Permutation-Graph-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/C">Power-of-art.cpp</a></strong></em></p><h6 id="tags-contest-8"><a href="#tags-contest-8" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 14:21:09,42]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Power-of-art.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/2166">Prefix-Sum-Queries-2.cpp</a></strong></em></p><h6 id="tags-seg-tree"><a href="#tags-seg-tree" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;08,19,2022 Fri 21:39:25,22]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Prefix-Sum-Queries-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/2166/">Prefix-Sum-Queries-3.cpp</a></strong></em></p><h6 id="tags-seg-tree-1"><a href="#tags-seg-tree-1" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;08,19,2022 Fri 22:29:12,06]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Prefix-Sum-Queries-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/245/problem/H">Queries-for-Number-of-Palindromes.cpp</a></strong></em></p><h6 id="tags-DP-23"><a href="#tags-DP-23" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;12,09,2022 Fri 14:24:25,70]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Queries-for-Number-of-Palindromes.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1760/problem/F">Quests.cpp</a></strong></em></p><h6 id="tags-binary-search-3"><a href="#tags-binary-search-3" class="headerlink" title="tags:  binary-search"></a>tags:  <code>binary-search</code></h6><blockquote><p>[time&#x3D;11,22,2022 Tue 10:12:46,19]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Quests.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/hack/1651/list/">Range-Update-Queries-2.cpp</a></strong></em></p><h6 id="tags-BIT-tree-1"><a href="#tags-BIT-tree-1" class="headerlink" title="tags:  BIT tree"></a>tags:  <code>BIT</code> <code>tree</code></h6><blockquote><p>[time&#x3D;08,18,2022 Thu 20:50:48,09]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Range-Update-Queries-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/hack/1651/list/">Range-Update-Queries.cpp</a></strong></em></p><h6 id="tags-seg-tree-lazy-tag-tree"><a href="#tags-seg-tree-lazy-tag-tree" class="headerlink" title="tags:  seg_tree lazy_tag tree"></a>tags:  <code>seg_tree</code> <code>lazy_tag</code> <code>tree</code></h6><blockquote><p>[time&#x3D;08,18,2022 Thu 20:49:48,17]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Range-Update-Queries.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/result/4647467/">Range-Xor-Queries-2.cpp</a></strong></em></p><h6 id="tags-pref"><a href="#tags-pref" class="headerlink" title="tags:  pref"></a>tags:  <code>pref</code></h6><blockquote><p>[time&#x3D;09,18,2022 Sun  9:20:33,41]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Range-Xor-Queries-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1650">Range-Xor-Queries.cpp</a></strong></em></p><h6 id="tags-BIT"><a href="#tags-BIT" class="headerlink" title="tags:  BIT"></a>tags:  <code>BIT</code></h6><blockquote><p>[time&#x3D;09,18,2022 Sun  9:12:35,91]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Range-Xor-Queries.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/problemset/problem/1759/G">Restore-the-Permutation.cpp</a></strong></em></p><h6 id="tags-greedy-4"><a href="#tags-greedy-4" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;12,07,2022 Wed 16:15:54,37]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Restore-the-Permutation.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1634/problem/A">Reverse-and-Concatenate.cpp</a></strong></em></p><h6 id="tags-abba-contest"><a href="#tags-abba-contest" class="headerlink" title="tags:  abba contest"></a>tags:  <code>abba</code> <code>contest</code></h6><blockquote><p>[time&#x3D;02,06,2022 Sun 22:41:13,04]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Reverse-and-Concatenate.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1678">Round-Trip-II.cpp</a></strong></em></p><h6 id="tags-graph-DFS-1"><a href="#tags-graph-DFS-1" class="headerlink" title="tags:  graph DFS"></a>tags:  <code>graph</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;10,11,2022 Tue  9:20:43,99]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Round-Trip-II.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1669">Round-Trip.cpp</a></strong></em></p><h6 id="tags-DFS-2"><a href="#tags-DFS-2" class="headerlink" title="tags:  DFS"></a>tags:  <code>DFS</code></h6><blockquote><p>[time&#x3D;08,15,2022 Mon 12:59:35,46]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Round-Trip.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1144">Salary-Queries-3.cpp</a></strong></em></p><h6 id="tags-BIT-tree-template"><a href="#tags-BIT-tree-template" class="headerlink" title="tags:  BIT tree template"></a>tags:  <code>BIT</code> <code>tree</code> <code>template</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Salary-Queries-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1144">Salary-Queries-4.cpp</a></strong></em></p><h6 id="tags-pb-ds-re"><a href="#tags-pb-ds-re" class="headerlink" title="tags:  pb_ds re"></a>tags:  <code>pb_ds</code> <code>re</code></h6><blockquote><p>[time&#x3D;09,18,2022 Sun  9:47:00,79]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Salary-Queries-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1144/">Salary-Queries.cpp</a></strong></em></p><h6 id="tags-pb-ds-tree-1"><a href="#tags-pb-ds-tree-1" class="headerlink" title="tags:  pb_ds tree"></a>tags:  <code>pb_ds</code> <code>tree</code></h6><blockquote><p>[time&#x3D;08,17,2022 Wed  8:06:09,42]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Salary-Queries.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/contest/1743/problem/C">Save-the-Magazines.cpp</a></strong></em></p><h6 id="tags-DP-24"><a href="#tags-DP-24" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;11,20,2022 Sun  7:23:30,61]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Save-the-Magazines.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1753">String-Matching.cpp</a></strong></em></p><h6 id="tags-KMP"><a href="#tags-KMP" class="headerlink" title="tags:  KMP"></a>tags:  <code>KMP</code></h6><blockquote><p>[time&#x3D;07,31,2022 Sun  9:25:04,48]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/String-Matching.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1660">Subarray-Sums-I.cpp</a></strong></em></p><h6 id="tags-DP-map"><a href="#tags-DP-map" class="headerlink" title="tags:  DP map"></a>tags:  <code>DP</code> <code>map</code></h6><blockquote><p>[time&#x3D;07,31,2022 Sun 17:01:02,72]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Subarray-Sums-I.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1674">Subordinates.cpp</a></strong></em></p><h6 id="tags-DFS-3"><a href="#tags-DFS-3" class="headerlink" title="tags:  DFS"></a>tags:  <code>DFS</code></h6><blockquote><p>[time&#x3D;09,21,2022 Wed 15:41:09,21]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Subordinates.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1137">Subtree-Queries-2.cpp</a></strong></em></p><h6 id="tags-BIT-tree-DFS"><a href="#tags-BIT-tree-DFS" class="headerlink" title="tags:  BIT tree DFS"></a>tags:  <code>BIT</code> <code>tree</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;11,04,2022 Fri 15:48:09,91]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Subtree-Queries-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/1175">TIOJ-1175.cpp</a></strong></em></p><h6 id="tags-DP-25"><a href="#tags-DP-25" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;12,07,2022 Wed 11:27:02,80]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-1175.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/1209">TIOJ-1209.cpp</a></strong></em></p><h6 id="tags-bigraph-graph-DFS"><a href="#tags-bigraph-graph-DFS" class="headerlink" title="tags:  bigraph graph DFS"></a>tags:  <code>bigraph</code> <code>graph</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;10,27,2022 Thu  7:53:48,38]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-1209.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2252">TIOJ-2252-2.cpp</a></strong></em></p><h6 id="tags-geometry"><a href="#tags-geometry" class="headerlink" title="tags:  geometry"></a>tags:  <code>geometry</code></h6><blockquote><p>[time&#x3D;11,25,2022 Fri  9:20:00,81]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-2252-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2254">TIOJ-2254.cpp</a></strong></em></p><h6 id="tags-graph-tapoo-binary-search"><a href="#tags-graph-tapoo-binary-search" class="headerlink" title="tags:  graph tapoo binary_search"></a>tags:  <code>graph</code> <code>tapoo</code> <code>binary_search</code></h6><blockquote><p>[time&#x3D;11,25,2022 Fri 15:34:18,38]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-2254.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2257">TIOJ-2257.cpp</a></strong></em></p><h6 id="tags-BIT-graph-DFS-tree"><a href="#tags-BIT-graph-DFS-tree" class="headerlink" title="tags:  BIT graph DFS tree"></a>tags:  <code>BIT</code> <code>graph</code> <code>DFS</code> <code>tree</code></h6><blockquote><p>[time&#x3D;12,12,2022 Mon  9:58:21,91]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-2257.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2259">TIOJ-2259.cpp</a></strong></em></p><h6 id="tags-fast-power-DP"><a href="#tags-fast-power-DP" class="headerlink" title="tags:  fast-power DP"></a>tags:  <code>fast-power</code> <code>DP</code></h6><blockquote><p>[time&#x3D;12,09,2022 Fri 16:29:56,33]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-2259.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2276">TIOJ-2276.cpp</a></strong></em></p><h6 id="tags-permutation"><a href="#tags-permutation" class="headerlink" title="tags:  permutation"></a>tags:  <code>permutation</code></h6><blockquote><p>[time&#x3D;11,05,2022 Sat 19:12:15,41]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-2276.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2283">TIOJ-2283.cpp</a></strong></em></p><h6 id="tags-Dijkstra-graph-difference"><a href="#tags-Dijkstra-graph-difference" class="headerlink" title="tags:  Dijkstra graph difference"></a>tags:  <code>Dijkstra</code> <code>graph</code> <code>difference</code></h6><blockquote><p>[time&#x3D;11,09,2022 Wed 11:23:22,05]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/TIOJ-2283.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1131">Tree-Diameter.cpp</a></strong></em></p><h6 id="tags-DFS-DP-tree"><a href="#tags-DFS-DP-tree" class="headerlink" title="tags:  DFS DP tree"></a>tags:  <code>DFS</code> <code>DP</code> <code>tree</code></h6><blockquote><p>[time&#x3D;09,23,2022 Fri 20:14:07,73]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Tree-Diameter.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://cses.fi/problemset/task/1133">Tree-Distances-II-2.cpp</a></strong></em></p><h6 id="tags-tree-DFS"><a href="#tags-tree-DFS" class="headerlink" title="tags:  tree DFS"></a>tags:  <code>tree</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;11,02,2022 Wed  9:20:11,51]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Tree-Distances-II-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/A">Trips.cpp</a></strong></em></p><h6 id="tags-contest-9"><a href="#tags-contest-9" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 14:05:19,34]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Trips.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://atcoder.jp/contests/dp/tasks/dp_r">Walk-2.cpp</a></strong></em></p><h6 id="tags-fast-power-2"><a href="#tags-fast-power-2" class="headerlink" title="tags:  fast-power"></a>tags:  <code>fast-power</code></h6><blockquote><p>[time&#x3D;09,15,2022 Thu 21:13:55,26]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Walk-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://atcoder.jp/contests/dp/tasks/dp_r">Walk.cpp</a></strong></em></p><h6 id="tags-fast-power-3"><a href="#tags-fast-power-3" class="headerlink" title="tags:  fast-power"></a>tags:  <code>fast-power</code></h6><blockquote><p>[time&#x3D;09,15,2022 Thu 20:13:04,30]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Walk.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/E">Water-problem.cpp</a></strong></em></p><h6 id="tags-contest-10"><a href="#tags-contest-10" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 14:49:28,75]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Water-problem.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/H">XOR-and-OR-problem.cpp</a></strong></em></p><h6 id="tags-contest-11"><a href="#tags-contest-11" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 15:39:52,90]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/XOR-and-OR-problem.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=a007">Zerojudge-a007-2.cpp</a></strong></em></p><h6 id="tags-prime"><a href="#tags-prime" class="headerlink" title="tags:  prime"></a>tags:  <code>prime</code></h6><blockquote><p>[time&#x3D;06,23,2022 Thu 14:24:14,87]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a007-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=a059">Zerojudge-a059-2.cpp</a></strong></em></p><h6 id="tags-pref-map-table"><a href="#tags-pref-map-table" class="headerlink" title="tags:  pref map table"></a>tags:  <code>pref</code> <code>map</code> <code>table</code></h6><blockquote><p>[time&#x3D;07,04,2022 Mon 16:56:48,47]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a059-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=a121">Zerojudge-a121.cpp</a></strong></em></p><h6 id="tags-prime-1"><a href="#tags-prime-1" class="headerlink" title="tags:  prime"></a>tags:  <code>prime</code></h6><blockquote><p>[time&#x3D;06,30,2022 Thu 12:37:20,39]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a121.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=a129">Zerojudge-a129.cpp</a></strong></em></p><h6 id="tags-graph-2"><a href="#tags-graph-2" class="headerlink" title="tags:  graph"></a>tags:  <code>graph</code></h6><blockquote><p>[time&#x3D;04,11,2022 Mon 11:16:53,66]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a129.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=a133">Zerojudge-a133.cpp</a></strong></em></p><h6 id="tags-DP-26"><a href="#tags-DP-26" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,23,2022 Thu 10:29:46,83]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a133.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=a194">Zerojudge-a194.cpp</a></strong></em></p><h6 id="tags-DP-27"><a href="#tags-DP-27" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;08,25,2022 Thu 21:45:19,09]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a194.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=b051">Zerojudge-b051.cpp</a></strong></em></p><h6 id="tags-compare-1"><a href="#tags-compare-1" class="headerlink" title="tags:  compare"></a>tags:  <code>compare</code></h6><blockquote><p>[time&#x3D;06,17,2022 Fri  6:33:16,09]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b051.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=b123">Zerojudge-b123-2.cpp</a></strong></em></p><h6 id="tags-DP-re-1"><a href="#tags-DP-re-1" class="headerlink" title="tags:  DP re"></a>tags:  <code>DP</code> <code>re</code></h6><blockquote><p>[time&#x3D;08,19,2022 Fri 19:39:27,38]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b123-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=b184">Zerojudge-b184.cpp</a></strong></em></p><h6 id="tags-DP-28"><a href="#tags-DP-28" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,06,2022 Wed  8:11:20,58]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b184.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=b430">Zerojudge-b430.cpp</a></strong></em></p><h6 id="tags-fast-power-4"><a href="#tags-fast-power-4" class="headerlink" title="tags:  fast-power"></a>tags:  <code>fast-power</code></h6><blockquote><p>[time&#x3D;03,22,2022 Tue  9:18:35,58]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b430.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=b552">Zerojudge-b552.cpp</a></strong></em></p><h6 id="tags-prime-2"><a href="#tags-prime-2" class="headerlink" title="tags:  prime"></a>tags:  <code>prime</code></h6><blockquote><p>[time&#x3D;06,26,2022 Sun 12:14:10,59]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b552.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=b967">Zerojudge-b967.cpp</a></strong></em></p><h6 id="tags-DP-tree-2"><a href="#tags-DP-tree-2" class="headerlink" title="tags:  DP tree"></a>tags:  <code>DP</code> <code>tree</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b967.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=c299">Zerojudge-c299.cpp</a></strong></em></p><h6 id="tags-bitset"><a href="#tags-bitset" class="headerlink" title="tags:  bitset"></a>tags:  <code>bitset</code></h6><blockquote><p>[time&#x3D;06,15,2022 Wed 19:51:45,01]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-c299.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d052">Zerojudge-d052.cpp</a></strong></em></p><h6 id="tags-DP-29"><a href="#tags-DP-29" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,23,2022 Thu 11:27:10,65]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d052.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539-2.cpp</a></strong></em></p><h6 id="tags-seg-tree-2"><a href="#tags-seg-tree-2" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;08,18,2022 Thu 16:01:07,31]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539-3.cpp</a></strong></em></p><h6 id="tags-sparse-table"><a href="#tags-sparse-table" class="headerlink" title="tags:  sparse_table"></a>tags:  <code>sparse_table</code></h6><blockquote><p>[time&#x3D;08,18,2022 Thu 16:31:39,45]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539-4.cpp</a></strong></em></p><h6 id="tags-sparse-table-re"><a href="#tags-sparse-table-re" class="headerlink" title="tags:  sparse_table re"></a>tags:  <code>sparse_table</code> <code>re</code></h6><blockquote><p>[time&#x3D;08,20,2022 Sat  8:02:03,35]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539-5.cpp</a></strong></em></p><h6 id="tags-re-seg-tree"><a href="#tags-re-seg-tree" class="headerlink" title="tags:  re seg_tree"></a>tags:  <code>re</code> <code>seg_tree</code></h6><blockquote><p>[time&#x3D;09,14,2022 Wed  9:55:45,45]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-5.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539-6.cpp</a></strong></em></p><h6 id="tags-sparse-table-1"><a href="#tags-sparse-table-1" class="headerlink" title="tags:  sparse_table"></a>tags:  <code>sparse_table</code></h6><blockquote><p>[time&#x3D;09,14,2022 Wed  9:59:45,75]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-6.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539-7.cpp</a></strong></em></p><h6 id="tags-sqrt"><a href="#tags-sqrt" class="headerlink" title="tags:  sqrt"></a>tags:  <code>sqrt</code></h6><blockquote><p>[time&#x3D;12,07,2022 Wed  9:10:36,26]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-7.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d539">Zerojudge-d539.cpp</a></strong></em></p><h6 id="tags-seg-tree-3"><a href="#tags-seg-tree-3" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;04,03,2022 Sun 18:11:13,50]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d636">Zerojudge-d636.cpp</a></strong></em></p><h6 id="tags-fast-power-5"><a href="#tags-fast-power-5" class="headerlink" title="tags:  fast-power"></a>tags:  <code>fast-power</code></h6><blockquote><p>[time&#x3D;03,21,2022 Mon 22:45:31,10]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d636.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d652">Zerojudge-d652-2.cpp</a></strong></em></p><h6 id="tags-DP-30"><a href="#tags-DP-30" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;07,21,2022 Thu 17:29:13,99]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d652-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d652">Zerojudge-d652-3.cpp</a></strong></em></p><h6 id="tags-DP-re-2"><a href="#tags-DP-re-2" class="headerlink" title="tags:  DP re"></a>tags:  <code>DP</code> <code>re</code></h6><blockquote><p>[time&#x3D;08,19,2022 Fri 19:15:54,69]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d652-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d652">Zerojudge-d652-4.cpp</a></strong></em></p><h6 id="tags-re-DP"><a href="#tags-re-DP" class="headerlink" title="tags:  re DP"></a>tags:  <code>re</code> <code>DP</code></h6><blockquote><p>[time&#x3D;09,03,2022 Sat 16:31:55,12]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d652-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d767">Zerojudge-d767-2.cpp</a></strong></em></p><h6 id="tags-graph-LCA"><a href="#tags-graph-LCA" class="headerlink" title="tags:  graph LCA"></a>tags:  <code>graph</code> <code>LCA</code></h6><blockquote><p>[time&#x3D;11,04,2022 Fri  8:28:42,40]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d767-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d767">Zerojudge-d767.cpp</a></strong></em></p><h6 id="tags-LCA-graph-DFS-sparse-table"><a href="#tags-LCA-graph-DFS-sparse-table" class="headerlink" title="tags:  LCA graph DFS sparse_table"></a>tags:  <code>LCA</code> <code>graph</code> <code>DFS</code> <code>sparse_table</code></h6><blockquote><p>[time&#x3D;10,14,2022 Fri  8:17:54,89]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d767.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d784">Zerojudge-d784-2.cpp</a></strong></em></p><h6 id="tags-DP-31"><a href="#tags-DP-31" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,10,2022 Fri 13:52:41,37]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d784-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d784">Zerojudge-d784-3.cpp</a></strong></em></p><h6 id="tags-DP-32"><a href="#tags-DP-32" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,10,2022 Fri 13:57:58,92]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d784-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d784">Zerojudge-d784.cpp</a></strong></em></p><h6 id="tags-DP-33"><a href="#tags-DP-33" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;06,10,2022 Fri 13:38:31,07]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d784.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d788">Zerojudge-d788-2.cpp</a></strong></em></p><h6 id="tags-pb-ds-tree-re"><a href="#tags-pb-ds-tree-re" class="headerlink" title="tags:  pb_ds tree re"></a>tags:  <code>pb_ds</code> <code>tree</code> <code>re</code></h6><blockquote><p>[time&#x3D;09,03,2022 Sat 19:28:03,84]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d788-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d788">Zerojudge-d788-3.cpp</a></strong></em></p><h6 id="tags-BIT-tree-re"><a href="#tags-BIT-tree-re" class="headerlink" title="tags:  BIT tree re"></a>tags:  <code>BIT</code> <code>tree</code> <code>re</code></h6><blockquote><p>[time&#x3D;09,03,2022 Sat 19:42:36,78]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d788-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d788">Zerojudge-d788.cpp</a></strong></em></p><h6 id="tags-seg-tree-4"><a href="#tags-seg-tree-4" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;06,11,2022 Sat  8:45:20,98]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d788.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d793">Zerojudge-d793.cpp</a></strong></em></p><h6 id="tags-dijkstra-graph"><a href="#tags-dijkstra-graph" class="headerlink" title="tags:  dijkstra graph"></a>tags:  <code>dijkstra</code> <code>graph</code></h6><blockquote><p>[time&#x3D;11,01,2022 Tue 11:19:59,04]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d793.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d799">Zerojudge-d799-2.cpp</a></strong></em></p><h6 id="tags-lazy-tag-seg-tree"><a href="#tags-lazy-tag-seg-tree" class="headerlink" title="tags:  lazy-tag seg_tree"></a>tags:  <code>lazy-tag</code> <code>seg_tree</code></h6><blockquote><p>[time&#x3D;11,22,2022 Tue 22:15:44,21]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d799-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d799">Zerojudge-d799-3.cpp</a></strong></em></p><h6 id="tags-BIT-1"><a href="#tags-BIT-1" class="headerlink" title="tags:  BIT"></a>tags:  <code>BIT</code></h6><blockquote><p>[time&#x3D;12,07,2022 Wed 12:54:30,09]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d799-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d799">Zerojudge-d799.cpp</a></strong></em></p><h6 id="tags-seg-tree-tree-lazy-tag-own-template"><a href="#tags-seg-tree-tree-lazy-tag-own-template" class="headerlink" title="tags:  seg_tree tree lazy_tag own-template"></a>tags:  <code>seg_tree</code> <code>tree</code> <code>lazy_tag</code> <code>own-template</code></h6><blockquote><p>[time&#x3D;08,19,2022 Fri 20:31:50,68]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d799.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://192.168.193.20/contest/1/problem/004">Zerojudge-d828.cpp</a></strong></em></p><h6 id="tags-fast-power-fib"><a href="#tags-fast-power-fib" class="headerlink" title="tags:  fast-power fib"></a>tags:  <code>fast-power</code> <code>fib</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d828.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=d847">Zerojudge-d847.cpp</a></strong></em></p><h6 id="tags-BIT-2"><a href="#tags-BIT-2" class="headerlink" title="tags:  BIT"></a>tags:  <code>BIT</code></h6><blockquote><p>[time&#x3D;11,24,2022 Thu 22:36:10,72]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d847.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=e367">Zerojudge-e367.py</a></strong></em></p><h6 id="tags-pref-1"><a href="#tags-pref-1" class="headerlink" title="tags:  pref"></a>tags:  <code>pref</code></h6><blockquote><p>[time&#x3D;08,16,2022 Tue 16:53:37,42]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-e367.py"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=e810">Zerojudge-e810-4.cpp</a></strong></em></p><h6 id="tags-dijkstra-graph-1"><a href="#tags-dijkstra-graph-1" class="headerlink" title="tags:  dijkstra graph"></a>tags:  <code>dijkstra</code> <code>graph</code></h6><blockquote><p>[time&#x3D;09,09,2022 Fri 17:46:28,12]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-e810-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=e810">Zerojudge-e810-6.cpp</a></strong></em></p><h6 id="tags-re-graph-dijkstra"><a href="#tags-re-graph-dijkstra" class="headerlink" title="tags:  re graph dijkstra"></a>tags:  <code>re</code> <code>graph</code> <code>dijkstra</code></h6><blockquote><p>[time&#x3D;10,10,2022 Mon  8:02:09,84]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-e810-6.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f314">Zerojudge-f314-2.cpp</a></strong></em></p><h6 id="tags-DP-34"><a href="#tags-DP-34" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,26,2022 Tue 22:10:59,12]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f314-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f315">Zerojudge-f315-3.cpp</a></strong></em></p><h6 id="tags-seg-tree-5"><a href="#tags-seg-tree-5" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;06,10,2022 Fri 16:18:38,06]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f315-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f315">Zerojudge-f315-4.cpp</a></strong></em></p><h6 id="tags-pb-ds"><a href="#tags-pb-ds" class="headerlink" title="tags:  pb_ds"></a>tags:  <code>pb_ds</code></h6><blockquote><p>[time&#x3D;09,06,2022 Tue 20:39:14,93]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f315-4.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f416">Zerojudge-f416-3.cpp</a></strong></em></p><h6 id="tags-string-KMP"><a href="#tags-string-KMP" class="headerlink" title="tags:  string KMP"></a>tags:  <code>string</code> <code>KMP</code></h6><blockquote><p>[time&#x3D;06,22,2022 Wed 18:08:26,56]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f416-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f505">Zerojudge-f505.cpp</a></strong></em></p><h6 id="tags-BFS-1"><a href="#tags-BFS-1" class="headerlink" title="tags:  BFS"></a>tags:  <code>BFS</code></h6><blockquote><p>[time&#x3D;10,20,2022 Thu  9:44:27,83]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f505.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f640">Zerojudge-f640.cpp</a></strong></em></p><h6 id="tags-vector"><a href="#tags-vector" class="headerlink" title="tags:  vector"></a>tags:  <code>vector</code></h6><blockquote><p>[time&#x3D;04,05,2022 Tue  7:45:16,01]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f640.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=f680">Zerojudge-f680-2.cpp</a></strong></em></p><h6 id="tags-DFS-class"><a href="#tags-DFS-class" class="headerlink" title="tags:  DFS class"></a>tags:  <code>DFS</code> <code>class</code></h6><blockquote><p>[time&#x3D;06,15,2022 Wed  8:31:15,90]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f680-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=g277">Zerojudge-g277-2.cpp</a></strong></em></p><h6 id="tags-priority-queue-pref"><a href="#tags-priority-queue-pref" class="headerlink" title="tags:  priority_queue pref"></a>tags:  <code>priority_queue</code> <code>pref</code></h6><blockquote><p>[time&#x3D;05,11,2022 Wed  9:53:21,21]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g277-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=g277">Zerojudge-g277-3.cpp</a></strong></em></p><h6 id="tags-seg-tree-6"><a href="#tags-seg-tree-6" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;05,11,2022 Wed 15:58:23,63]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g277-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://192.168.193.20/contest/1/problem/004">Zerojudge-g556.cpp</a></strong></em></p><h6 id="tags-fib-DP"><a href="#tags-fib-DP" class="headerlink" title="tags:  fib DP"></a>tags:  <code>fib</code> <code>DP</code></h6><blockquote><p>[time&#x3D;06,24,2022 Fri 16:21:24,50]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g556.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=g598">Zerojudge-g598-2.cpp</a></strong></em></p><h6 id="tags-DSU-undo"><a href="#tags-DSU-undo" class="headerlink" title="tags:  DSU undo"></a>tags:  <code>DSU</code> <code>undo</code></h6><blockquote><p>[time&#x3D;09,07,2022 Wed 10:36:50,26]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g598-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=g640">Zerojudge-g640.cpp</a></strong></em></p><h6 id="tags-binary-search-4"><a href="#tags-binary-search-4" class="headerlink" title="tags:  binary_search"></a>tags:  <code>binary_search</code></h6><blockquote><p>[time&#x3D;09,14,2022 Wed 10:46:41,52]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g640.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=g733">Zerojudge-g733.cpp</a></strong></em></p><h6 id="tags-dijkstra-DP-graph"><a href="#tags-dijkstra-DP-graph" class="headerlink" title="tags:  dijkstra DP graph"></a>tags:  <code>dijkstra</code> <code>DP</code> <code>graph</code></h6><blockquote><p>[time&#x3D;10,03,2022 Mon 15:00:39,40]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g733.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=g774">Zerojudge-g774-2.cpp</a></strong></em></p><h6 id="tags-DP-TOI"><a href="#tags-DP-TOI" class="headerlink" title="tags:  DP TOI"></a>tags:  <code>DP</code> <code>TOI</code></h6><blockquote><p>[time&#x3D;03,19,2022 Sat 18:23:18,20]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g774-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=h028">Zerojudge-h028.cpp</a></strong></em></p><h6 id="tags-struct-greedy-APCS-re-pointer"><a href="#tags-struct-greedy-APCS-re-pointer" class="headerlink" title="tags:  struct greedy APCS re pointer"></a>tags:  <code>struct</code> <code>greedy</code> <code>APCS</code> <code>re</code> <code>pointer</code></h6><blockquote><p>[time&#x3D;03,06,2022 Sun 11:32:31,40]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-h028.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=h029">Zerojudge-h029.cpp</a></strong></em></p><h6 id="tags-tree-apcs"><a href="#tags-tree-apcs" class="headerlink" title="tags:  tree apcs"></a>tags:  <code>tree</code> <code>apcs</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-h029.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=i401">Zerojudge-i401.cpp</a></strong></em></p><h6 id="tags-binary-search-map"><a href="#tags-binary-search-map" class="headerlink" title="tags:  binary_search map"></a>tags:  <code>binary_search</code> <code>map</code></h6><blockquote><p>[time&#x3D;10,23,2022 Sun 10:34:15,51]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-i401.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=i426">Zerojudge-i426.cpp</a></strong></em></p><h6 id="tags-list-1"><a href="#tags-list-1" class="headerlink" title="tags:  list"></a>tags:  <code>list</code></h6><blockquote><p>[time&#x3D;06,18,2022 Sat  9:07:18,04]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-i426.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=i510">Zerojudge-i510-2.cpp</a></strong></em></p><h6 id="tags-KMP-string-search"><a href="#tags-KMP-string-search" class="headerlink" title="tags:  KMP string search"></a>tags:  <code>KMP</code> <code>string</code> <code>search</code></h6><blockquote><p>[time&#x3D;06,27,2022 Mon  7:54:06,54]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-i510-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://zerojudge.tw/ShowProblem?problemid=j125">Zerojudge-j125-3.cpp</a></strong></em></p><h6 id="tags-graph-BFS"><a href="#tags-graph-BFS" class="headerlink" title="tags:  graph BFS"></a>tags:  <code>graph</code> <code>BFS</code></h6><blockquote><p>[time&#x3D;10,30,2022 Sun 12:00:03,17]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-j125-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00072">a-city-without-myself.cpp</a></strong></em></p><h6 id="tags-choj-bit"><a href="#tags-choj-bit" class="headerlink" title="tags:  choj bit"></a>tags:  <code>choj</code> <code>bit</code></h6><blockquote><p>[time&#x3D;02,06,2022 Sun 17:47:51,23]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/a-city-without-myself.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://choj.me/problem/c002">annia’s-gift.cpp</a></strong></em></p><h6 id="tags-choj-chsh-exam-1"><a href="#tags-choj-chsh-exam-1" class="headerlink" title="tags:  choj chsh-exam"></a>tags:  <code>choj</code> <code>chsh-exam</code></h6><blockquote><p>[time&#x3D;07,01,2022 Fri  6:32:05,54]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/annia's-gift.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/1066">annoying-money.cpp</a></strong></em></p><h6 id="tags-greedy-5"><a href="#tags-greedy-5" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;10,21,2022 Fri  9:09:09,77]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/annoying-money.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/b032">award.cpp</a></strong></em></p><h6 id="tags-DP-35"><a href="#tags-DP-35" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,11,2022 Mon 20:29:35,44]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/award.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/F">bamboo’s-bamboo-sequence.cpp</a></strong></em></p><h6 id="tags-contest-12"><a href="#tags-contest-12" class="headerlink" title="tags:  contest"></a>tags:  <code>contest</code></h6><blockquote><p>[time&#x3D;02,13,2022 Sun 15:03:59,54]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/bamboo's-bamboo-sequence.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/c005">becoming-the-best-coser-2.cpp</a></strong></em></p><h6 id="tags-greedy-6"><a href="#tags-greedy-6" class="headerlink" title="tags:  greedy"></a>tags:  <code>greedy</code></h6><blockquote><p>[time&#x3D;07,20,2022 Wed 20:58:28,23]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/becoming-the-best-coser-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://choj.me/problem/c005">becoming-the-best-coser.cpp</a></strong></em></p><h6 id="tags-map-DP-choj-chsh-exam"><a href="#tags-map-DP-choj-chsh-exam" class="headerlink" title="tags:  map DP choj chsh-exam"></a>tags:  <code>map</code> <code>DP</code> <code>choj</code> <code>chsh-exam</code></h6><blockquote><p>[time&#x3D;07,01,2022 Fri  7:51:16,93]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/becoming-the-best-coser.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://choj.me/problem/c006">coin-game.cpp</a></strong></em></p><h6 id="tags-choj-chsh-exam-2"><a href="#tags-choj-chsh-exam-2" class="headerlink" title="tags:  choj chsh-exam"></a>tags:  <code>choj</code> <code>chsh-exam</code></h6><blockquote><p>[time&#x3D;07,01,2022 Fri  6:42:48,35]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/coin-game.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2224">country-and-road-2.cpp</a></strong></em></p><h6 id="tags-graph-3"><a href="#tags-graph-3" class="headerlink" title="tags:  graph"></a>tags:  <code>graph</code></h6><blockquote><p>[time&#x3D;08,25,2022 Thu  9:03:10,09]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/country-and-road-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2224">country-and-road.cpp</a></strong></em></p><h6 id="tags-graph-4"><a href="#tags-graph-4" class="headerlink" title="tags:  graph"></a>tags:  <code>graph</code></h6><blockquote><p>[time&#x3D;08,25,2022 Thu  7:13:29,95]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/country-and-road.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://choj.me/problem/c004">crusading-monkey.cpp</a></strong></em></p><h6 id="tags-BFS-choj-chsh-exam"><a href="#tags-BFS-choj-chsh-exam" class="headerlink" title="tags:  BFS choj chsh-exam"></a>tags:  <code>BFS</code> <code>choj</code> <code>chsh-exam</code></h6><blockquote><p>[time&#x3D;07,01,2022 Fri 20:16:50,83]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/crusading-monkey.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00024">disappearing-number.cpp</a></strong></em></p><h6 id="tags-choj-bit-bitset"><a href="#tags-choj-bit-bitset" class="headerlink" title="tags:  choj bit bitset"></a>tags:  <code>choj</code> <code>bit</code> <code>bitset</code></h6><blockquote><p>[time&#x3D;02,09,2022 Wed 11:35:49,13]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/disappearing-number.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00072">fake-sun2.cpp</a></strong></em></p><h6 id="tags-choj-bitset-bit"><a href="#tags-choj-bitset-bit" class="headerlink" title="tags:  choj bitset bit"></a>tags:  <code>choj</code> <code>bitset</code> <code>bit</code></h6><blockquote><p>[time&#x3D;02,06,2022 Sun 18:42:40,23]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/fake-sun2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00053">fast-power.cpp</a></strong></em></p><h6 id="tags-choj-bit-choj-test"><a href="#tags-choj-bit-choj-test" class="headerlink" title="tags:  choj bit choj test"></a>tags:  <code>choj</code> <code>bit</code> <code>choj</code> <code>test</code></h6><blockquote><p>[time&#x3D;02,05,2022 Sat 17:37:42,79]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/fast-power.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://www.luogu.com.cn/problem/P1049">filling-box.cpp</a></strong></em></p><h6 id="tags-DP-36"><a href="#tags-DP-36" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;11,05,2022 Sat 14:10:09,04]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/filling-box.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00008">flower-picking-II.cpp</a></strong></em></p><h6 id="tags-choj-DFS"><a href="#tags-choj-DFS" class="headerlink" title="tags:  choj DFS"></a>tags:  <code>choj</code> <code>DFS</code></h6><blockquote><p>[time&#x3D;02,11,2022 Fri 20:02:21,83]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/flower-picking-II.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00007">flower-picking.cpp</a></strong></em></p><h6 id="tags-choj-DP"><a href="#tags-choj-DP" class="headerlink" title="tags:  choj DP"></a>tags:  <code>choj</code> <code>DP</code></h6><blockquote><p>[time&#x3D;02,10,2022 Thu 14:54:20,99]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/flower-picking.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/a053">funny-woods.cpp</a></strong></em></p><h6 id="tags-choj"><a href="#tags-choj" class="headerlink" title="tags:  choj"></a>tags:  <code>choj</code></h6><blockquote><p>[time&#x3D;02,08,2022 Tue 22:41:20,73]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/funny-woods.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/a053">funny-woods2.cpp</a></strong></em></p><h6 id="tags-choj-deque"><a href="#tags-choj-deque" class="headerlink" title="tags:  choj deque"></a>tags:  <code>choj</code> <code>deque</code></h6><blockquote><p>[time&#x3D;02,08,2022 Tue 22:57:11,88]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/funny-woods2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://choj.me/problem/c003">going-out-at-night.cpp</a></strong></em></p><h6 id="tags-map-choj-chsh-exam"><a href="#tags-map-choj-chsh-exam" class="headerlink" title="tags:  map choj chsh-exam"></a>tags:  <code>map</code> <code>choj</code> <code>chsh-exam</code></h6><blockquote><p>[time&#x3D;07,01,2022 Fri  6:48:54,97]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/going-out-at-night.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>interval-calculation.cpp</strong></em></p><h6 id="tags-choj-citrc-unordered-map-DP"><a href="#tags-choj-citrc-unordered-map-DP" class="headerlink" title="tags:  choj citrc unordered_map DP"></a>tags:  <code>choj</code> <code>citrc</code> <code>unordered_map</code> <code>DP</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/interval-calculation.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>interval-calculation2.cpp</strong></em></p><h6 id="tags-set-2"><a href="#tags-set-2" class="headerlink" title="tags:  set"></a>tags:  <code>set</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/interval-calculation2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://open.kattis.com/problems/alphabet">kattis-Alphabet2.cpp</a></strong></em></p><h6 id="tags-re-DP-1"><a href="#tags-re-DP-1" class="headerlink" title="tags:  re DP"></a>tags:  <code>re</code> <code>DP</code></h6><blockquote><p>[time&#x3D;02,20,2022 Sun 10:36:21,45]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/kattis-Alphabet2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://open.kattis.com/problems/commercials">kattis-Radio_Commercials.cpp</a></strong></em></p><h6 id="tags-DP-37"><a href="#tags-DP-37" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/kattis-Radio_Commercials.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://open.kattis.com/problems/walrusweights">kattis-Walrus-Weights.cpp</a></strong></em></p><h6 id="tags-DP-38"><a href="#tags-DP-38" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;04,06,2022 Wed 17:48:02,14]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/kattis-Walrus-Weights.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00071">lonelier.cpp</a></strong></em></p><h6 id="tags-choj-bit-bitset-1"><a href="#tags-choj-bit-bitset-1" class="headerlink" title="tags:  choj bit bitset"></a>tags:  <code>choj</code> <code>bit</code> <code>bitset</code></h6><blockquote><p>[time&#x3D;02,08,2022 Tue 22:22:25,66]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/lonelier.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/1069">magical-task-2.cpp</a></strong></em></p><h6 id="tags-graph-bigraph"><a href="#tags-graph-bigraph" class="headerlink" title="tags:  graph bigraph"></a>tags:  <code>graph</code> <code>bigraph</code></h6><blockquote><p>[time&#x3D;10,21,2022 Fri 16:06:37,83]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/magical-task-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>magical-task-3.cpp</strong></em></p><h6 id="tags-re-bigraph-graph"><a href="#tags-re-bigraph-graph" class="headerlink" title="tags:  re bigraph graph"></a>tags:  <code>re</code> <code>bigraph</code> <code>graph</code></h6><blockquote><p>[time&#x3D;10,29,2022 Sat 13:25:25,65]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/magical-task-3.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://www.luogu.com.cn/problem/P4933">master.cpp</a></strong></em></p><h6 id="tags-DP-39"><a href="#tags-DP-39" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;10,16,2022 Sun  9:01:26,79]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/master.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://www.luogu.com.cn/problem/P1168">middle.cpp</a></strong></em></p><h6 id="tags-pb-ds-1"><a href="#tags-pb-ds-1" class="headerlink" title="tags:  pb_ds"></a>tags:  <code>pb_ds</code></h6><blockquote><p>[time&#x3D;10,15,2022 Sat  8:41:59,93]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/middle.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/J">mining-water-chestnut.cpp</a></strong></em></p><h6 id="tags-contest-contest-gp"><a href="#tags-contest-contest-gp" class="headerlink" title="tags:  contest contest gp"></a>tags:  <code>contest</code> <code>contest</code> <code>gp</code></h6><blockquote><p>[time&#x3D;02,14,2022 Mon 13:06:32,41]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/mining-water-chestnut.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/d015">move-in-playground.cpp</a></strong></em></p><h6 id="tags-Dijkstra"><a href="#tags-Dijkstra" class="headerlink" title="tags:  Dijkstra"></a>tags:  <code>Dijkstra</code></h6><blockquote><p>[time&#x3D;11,07,2022 Mon 20:01:04,59]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/move-in-playground.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>ouo.cpp</strong></em></p><h6 id="tags-KMP-1"><a href="#tags-KMP-1" class="headerlink" title="tags:  KMP"></a>tags:  <code>KMP</code></h6><blockquote><p>[time&#x3D;08,02,2022 Tue 22:27:26,95]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/ouo.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="http://choj.me/problem/00121">palace-emissary.cpp</a></strong></em></p><h6 id="tags-DFS-BFS"><a href="#tags-DFS-BFS" class="headerlink" title="tags:  DFS BFS"></a>tags:  <code>DFS</code> <code>BFS</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/palace-emissary.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/1067">prime-task.cpp</a></strong></em></p><h6 id="tags-DP-40"><a href="#tags-DP-40" class="headerlink" title="tags:  DP"></a>tags:  <code>DP</code></h6><blockquote><p>[time&#x3D;10,21,2022 Fri  8:27:03,38]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/prime-task.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://192.168.193.20/contest/1/problem/004">seat.cpp</a></strong></em></p><h6 id="tags-fast-power-fib-1"><a href="#tags-fast-power-fib-1" class="headerlink" title="tags:  fast-power fib"></a>tags:  <code>fast-power</code> <code>fib</code></h6><blockquote><p>[time&#x3D;06,11,2022 Sat  9:39:02,66]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/seat.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://www.luogu.com.cn/problem/P1129">square-game.cpp</a></strong></em></p><h6 id="tags-graph-bigraph-1"><a href="#tags-graph-bigraph-1" class="headerlink" title="tags:  graph bigraph"></a>tags:  <code>graph</code> <code>bigraph</code></h6><blockquote><p>[time&#x3D;10,22,2022 Sat 13:13:51,77]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/square-game.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://203.64.159.117/ShowProblem?problemid=a268">sum-of-score.cpp</a></strong></em></p><h6 id="tags-seg-tree-7"><a href="#tags-seg-tree-7" class="headerlink" title="tags:  seg_tree"></a>tags:  <code>seg_tree</code></h6><blockquote><p>[time&#x3D;05,05,2022 Thu 17:49:00,56]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/sum-of-score.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong>t.cpp</strong></em></p><h6 id="tags-test"><a href="#tags-test" class="headerlink" title="tags:  test"></a>tags:  <code>test</code></h6><blockquote><p>[time&#x3D;12,10,2022 Sat 22:16:52,06]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/t.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=b035">tcirc-b035-2.cpp</a></strong></em></p><h6 id="tags-gp-hash-table"><a href="#tags-gp-hash-table" class="headerlink" title="tags:  gp_hash_table"></a>tags:  <code>gp_hash_table</code></h6><blockquote><p>[time&#x3D;]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/tcirc-b035-2.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=b035">tcirc-b035.cpp</a></strong></em></p><h6 id="tags-multiset"><a href="#tags-multiset" class="headerlink" title="tags:  multiset"></a>tags:  <code>multiset</code></h6><blockquote><p>[time&#x3D;06,21,2022 Tue 11:10:24,69]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/tcirc-b035.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://judge.tcirc.tw/ShowProblem?problemid=c085">tcirc-c085.cpp</a></strong></em></p><h6 id="tags-DSU"><a href="#tags-DSU" class="headerlink" title="tags:  DSU"></a>tags:  <code>DSU</code></h6><blockquote><p>[time&#x3D;09,16,2022 Fri 22:31:59,28]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/tcirc-c085.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/2266">tioj-2266.cpp</a></strong></em></p><h6 id="tags-greedy-set"><a href="#tags-greedy-set" class="headerlink" title="tags:  greedy set"></a>tags:  <code>greedy</code> <code>set</code></h6><blockquote><p>[time&#x3D;10,01,2022 Sat 12:22:19,50]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/tioj-2266.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><p><em><strong><a href="https://tioj.ck.tp.edu.tw/problems/1509">tunnel.cpp</a></strong></em></p><h6 id="tags-graph-5"><a href="#tags-graph-5" class="headerlink" title="tags:  graph"></a>tags:  <code>graph</code></h6><blockquote><p>[time&#x3D;08,25,2022 Thu  6:52:52,49]</p></blockquote><p><a href="https://github.com/mysh212/Coding/blob/master/tunnel.cpp"><em><strong><font color = '#AAAAAA'>code</font></strong></em></a></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        algorithm    </div>    <div class='spoiler-content'>        <p><em><strong>APCS</strong></em> 1<br><em><strong>BFS</strong></em> 10<br><em><strong>BIT</strong></em> 11<br><em><strong>DAG</strong></em> 1<br><em><strong>DC</strong></em> 5<br><em><strong>DFS</strong></em> 18<br><em><strong>DP</strong></em> 69<br><em><strong>DSU</strong></em> 8<br><em><strong>Dijkstra</strong></em> 2<br><em><strong>KMP</strong></em> 4<br><em><strong>LCA</strong></em> 6<br><em><strong>MST</strong></em> 1<br><em><strong>TOI</strong></em> 1<br><em><strong>abba</strong></em> 1<br><em><strong>apcs</strong></em> 1<br><em><strong>bigraph</strong></em> 4<br><em><strong>binary-search</strong></em> 1<br><em><strong>binary_search</strong></em> 11<br><em><strong>bit</strong></em> 5<br><em><strong>bitset</strong></em> 4<br><em><strong>brute</strong></em> 2<br><em><strong>choj</strong></em> 17<br><em><strong>chsh-exam</strong></em> 6<br><em><strong>citrc</strong></em> 1<br><em><strong>class</strong></em> 1<br><em><strong>compare</strong></em> 3<br><em><strong>contest</strong></em> 16<br><em><strong>deque</strong></em> 4<br><em><strong>difference</strong></em> 3<br><em><strong>dijkstra</strong></em> 5<br><em><strong>eg.</strong></em> 1<br><em><strong>emissary”.cpp</strong></em> 1<br><em><strong>fast-power</strong></em> 10<br><em><strong>fib</strong></em> 4<br><em><strong>geometry</strong></em> 1<br><em><strong>gp</strong></em> 1<br><em><strong>gp_hash_table</strong></em> 2<br><em><strong>graph</strong></em> 31<br><em><strong>greedy</strong></em> 15<br><em><strong>half-brute</strong></em> 2<br><em><strong>hash</strong></em> 1<br><em><strong>lazy-tag</strong></em> 1<br><em><strong>lazy_tag</strong></em> 2<br><em><strong>list</strong></em> 2<br><em><strong>lower_bound</strong></em> 2<br><em><strong>map</strong></em> 8<br><em><strong>math</strong></em> 2<br><em><strong>multiset</strong></em> 1<br><em><strong>offline</strong></em> 2<br><em><strong>operator</strong></em> 3<br><em><strong>own-template</strong></em> 1<br><em><strong>pb_ds</strong></em> 6<br><em><strong>permutation</strong></em> 1<br><em><strong>pointer</strong></em> 1<br><em><strong>pref</strong></em> 5<br><em><strong>prime</strong></em> 3<br><em><strong>priority_queue</strong></em> 8<br><em><strong>queue</strong></em> 3<br><em><strong>re</strong></em> 14<br><em><strong>re-search</strong></em> 3<br><em><strong>search</strong></em> 2<br><em><strong>seg_tree</strong></em> 15<br><em><strong>set</strong></em> 7<br><em><strong>sparse_table</strong></em> 5<br><em><strong>sqrt</strong></em> 1<br><em><strong>stack</strong></em> 1<br><em><strong>string</strong></em> 2<br><em><strong>struct</strong></em> 5<br><em><strong>sweep-line</strong></em> 9<br><em><strong>table</strong></em> 1<br><em><strong>tapo</strong></em> 2<br><em><strong>tapoo</strong></em> 1<br><em><strong>template</strong></em> 1<br><em><strong>test</strong></em> 2<br><em><strong>tree</strong></em> 23<br><em><strong>undo</strong></em> 1<br><em><strong>unordered_map</strong></em> 1<br><em><strong>unordered_set</strong></em> 1<br><em><strong>vector</strong></em> 3</p>    </div></div><p>總題數: 442</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>演算法</category>
      
      <category>題單</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first</title>
    <link href="/algosolution/2022/11/13/first/"/>
    <url>/algosolution/2022/11/13/first/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密碼錯誤" data-whm="解密失敗">  <script id="hbeData" type="hbeData" data-hmacdigest="b11164b31d111a3ba4e1c393ea7bb6d69b2e38bcd9325abaf88edf807ce866de"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">請輸入密碼</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
      <tag>algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/algosolution/2022/11/13/hello-world/"/>
    <url>/algosolution/2022/11/13/hello-world/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密碼錯誤" data-whm="解密失敗">  <script id="hbeData" type="hbeData" data-hmacdigest="8c3eac9123413e8b57444df6fbbe85c9581ec2fddd6c3dd6445829838f163f96">4630436162ade97ba2718b7d0c4b3b63f97fe7f487088031e1ec7f30c37889e17af4f6297068ec459b8609dd5e773f884c55009995b4e2fa14cd0ad5eff0ada9f9fb8fb348a39322f64a27b4e67198e9d0918355853825b4a8b859e1b0997d0838db13d93eb663a75abf26151a4cd6693bc3399e41eef6d4a0d8ac518bee9c9ddee4d733ecfde4f1c7c01610b2139c3f919d321e3580e4ea4d25333a1eb6a757138158c91746eb650d2bd292b639e6c34cbf144f87d98390fac9f8662146f06c3a6438c2b9ee94e1d311e783b3870047c72629be8369de61aafcfd95d1a6b146908a00176e823191858046b0d3068b0efa543f002c4411ac17d84cfbc5419db7d33e0dec60d5febc26877845ea4a0c78edbec57ec484cb94f4a5981b779247299a083552613550cf2067f03e18806e1d8b7363322598e505c747f93d1e38576db45e8de5d1770b452a4fb1219a730e7968e9f6fbb48dd64088b4f6b768d41ae0fde1188c840a5b26f4bcf87fc459371861bccf009fd56466bfb6189998e9e6a70ba3621ca8bdf949e5cadcc118f51f12983682d54b3fadc89599f99b3bc97b0ac705b13416a1e530d1e06e17469a74ffce4af1c9c1c3a7fe2e7d43f0a4553f309b55a680d4ba0eff5e1480ff40e6cca6cf09c8d0ab9d3d27139e5f1fa8ce760b2b398ec79fa2325ce353708b5fd4928897ec368d0027fa2da6b5a0fd8e4e9b7529ca09bebcdd4ee3a67b8793bf535765eccd25777435299c4f7eaac3b37aa14cd4e771f0d59050e41a2121cab03ed0afccb01338cfaa270444513ab17731861d2e4818cce309b9ff34abf619216411da184092968ba15dba46fd74305d671fcc251530f5b9827fa2b99f113bdb279c694311141aabe932ec8f916d1141fa0fa5fb9c336c8d55290f365e81af15851af60dd2273f8b070f04815da018cdd4cac4492bf8dcbdf2a0888687bc668eb9ec2200a5154640852cd13f7cc159ceb54053a51434407f3390bd3530d0018bca207eaaf125a9b557713a603323d4380c0134023d7fb01473ca7ca821fe6db9767206bfa21db748533bc87153314794d19869ff3ba2b221ddc9c63e35d360303fa58293abcc1710f55888684540f039f220fc752c62a02c513b1462aca40e92de0899a08cd3edddc9979dced55c3192d210ddcb124eb68779bda80591fc1709ddde20e3aeecd6c1dd3050969b62b2a19b425e9f1a951244a4e69404f6d93dc58ca226f5444cab052506808f67e3b5545db437289dc9f2ef82ff7c62358bfa3eee3fba87041442119b8eee1096644729b3b15458972b77cf3a5e18c04be5271caf4881e780c11c3f7906a187448926803bf3df024d3d77af787b6850c4873ec07a95b8a728c567b70bf5eb460afb9ebf42c76b983808049305a356020504f8a264d4ac8717887ca0cbf828370db7425c1638ffc334591d04034f5eb5e63a9c9efdc321b680100bf5321ced23b0e6969044f849857f9af37be0980b260bf2fd0fd2e0fd06678f4ab724bc31ee2f0bc8e385431590d1087dd786bf90b62c03585a969acdb4264602367a61a74054fc36ed426cab2e9101242a2cdc088a16380955d9e70cb2bf65199488d2e367aa43c4b29810a66929566431d5672c014e9e7727dfb0fa6699a694ac49a4bc586c01487fc053bea0d8b678d48f7a758fb38ac0152b32596e2682093d654812b0d2c6991d9db4e1a24a395bd9d83a8e0a977f5d948d89e94997d8195571a8eabe1b0f0f8130a9f93168324b65301fdce7cea5b47534c4fbe7bc19c479e08c8d2a84bce661e458f46ba129e4f93846c3e86fb8788f6c7c845d21304d0a2dd101e3a2d1b353fe3a6bee7a4a99eeecec802f1df54df047f72a95b3db2e97ef11cd863d7a4b5359b456a226e0fe4a2b10cf867048939da2a02761b7daf77b27c21c52e6f9e8541c9339cd890268f80c5e613a58e1b46922bf1ef0ee481cc62e36fe7a1650c2ad673ccc83f8218d811f773d50aba10dbde44ea047976b3a026a6675e56a92f10780bedb27c8a1664c44bf38d0929a0a9aa0922024a80f88ff9c6fea5b85eb41d63ed5fef02002d9a60ac5b41e406a3e6305e05e8f21faba7999cfdc6da11f10bf17a43bb671cc7214a0944abbb0ed0fd6bee853a1072f12e72525e4995867dcc1e6fa67209752f782d24be26fefd684683f1b451960a8c6e411c8f5c4d9c43d2b1ac7d865075469d769158c8dabf8992a583b823b0baf187989651f251e4e311f3af4e43b4bc556f4af3afb07f877c93f98554fd60217b3d59e2618014971e89fa58c656ad7cf9e5766f74ec3abccd7bcf94d1baa5fa4fa35b52acc90ec0a52193a41ff1016fce0177d0ec5fb19d193ab398ab9dd92c68331584195ed1767130952a548ec0ced70aa3edea15636656b8425f44b65ab1564cbf80e91f933897ffd0a7133a2307df3c9cf2e176d1eb94d65692850695b7553489cc0f42dfcaad71a2d79f275f7ddecd2e2fab2a0e2e8f6dc7b436760e8fdd98ce6c385de0c6f93e9547d6d8ac5b86efff5c91c18c15242893e814f2c05f36be05cfda2ae90d980c64da874780726475bfcc61fe7c3eb6f5233b6a7dcfc46ffa712433079c274aa4986001cc403c3532fcee394d09304e4020b07dff86e486dc55ca6bb28be79779d363320b4e6bc32e3c6a2dc670c896d035d0bec433a678feda839689aee018f6d952f9b2b08f46ea2ed75f6bc3b7dbd87df00db87ba5cc12f0d19f75d67a4e2a9256f59e8e320ccc93d4b00229f448fb1f6fa3d8c4a5b828f9a379b3a45afb19c270f594e2d57fbd78bfeba3d864db079bf504b32a4ac069bce5290b1e9aed63501426adf94d31ce9b02a9d30e75f903b7d12013b0bafcfc08078800daa29f97c40ccd3c7d4e95cadfa50201ca4e1b951e6e88a8fac41d95976e441cb29828ea153361de3f1409cf2e58e2b800bfb841bc3b80671f10f2393e7d9cd74555d20e7750e95a3c3bee15eead514408c0b1dd9fb1755285f8c6ea4c7efd0e167046c223d67c60812a3ffbb4950513815e84c8bba689185b8a12fb5c505f8baeac6cec952b3aaabc6b30798e30ec3132172831158d5d2d2f742007ac0901f4bc754ea677b1fa235d19ff20023e9a204ddac03c69afb4a1f9e5aca2c2f11560ab0af48c161ddbeaaea2fdecbdee179f5f28933b629a26d4083965f5f9cf4726c8fd708d5e311df1b2a6346d56fead7710928c22dd4f63592705150998ee4441cbcaf89415ca7ae2dfbc21547ecaf55a54aee1a871bc1a457a3a69be346b98e5b00dba69820926e742435d9dcacd7da6325e4067ceb12c4ac69ff14d89462eda437139a5f609ce93341b373791beac7232b5ed08b67795ceaf5720397b83a78fa725a6e2cba92f8650a157b793f2f0bb4a2e42b6e669f9f52eb77c340da32ae0c75859bddf32ebde4a0bb4946c9dbc871dd1ea661ffc77aa7d7237efe366de0037df38c1377c44a5ba1036b17e8c85fd7b4c8d54216cac6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">請輸入密碼</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>i401. 3. 雷射測試 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/10/23/Zerojudge-i401.cpp/"/>
    <url>/algosolution/2022/10/23/Zerojudge-i401.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="i401-3-雷射測試-高中生程式解題系統"><a href="#i401-3-雷射測試-高中生程式解題系統" class="headerlink" title="i401. 3. 雷射測試 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=i401">i401. 3. 雷射測試 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-i401.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/23/2022 Sun 10:34:15.50</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">D</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">L</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">U</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> box a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> a<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> y <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/*R + 1 == DL + 1 == UU + 1 == LD + 1 == RR + 0 == UL + 0 == DU + 0 == RD + 0 == L*/</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">touch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cerr&lt;&lt;a&lt;&lt;b;</span>    ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> R <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> D<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> L <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> U<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> U <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> L<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> D <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> R<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> R <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> U<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> L <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> D<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> U <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> R<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> D <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> L<span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    gp_hash_table<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>mx<span class="token punctuation">,</span>my<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>x<span class="token operator">>></span>i<span class="token punctuation">.</span>y<span class="token operator">>></span>i<span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> mx<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> mx<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> mx<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>y<span class="token punctuation">,</span>i<span class="token punctuation">.</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>y<span class="token punctuation">,</span>i<span class="token punctuation">.</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        found <span class="token operator">=</span> my<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> my<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> my<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>x<span class="token punctuation">,</span>i<span class="token punctuation">.</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>x<span class="token punctuation">,</span>i<span class="token punctuation">.</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(auto &amp;i : mx) &#123;</span>    <span class="token comment">//     for(auto &amp;j : i.second) &#123;</span>    <span class="token comment">//         cout&lt;&lt;i.first&lt;&lt;" "&lt;&lt;j.first&lt;&lt;" "&lt;&lt;j.second&lt;&lt;"\n";</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">int</span> xx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>yy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>dd <span class="token operator">=</span> R<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dd <span class="token operator">==</span> R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> found <span class="token operator">=</span> my<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> my<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> ffound <span class="token operator">=</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ffound <span class="token operator">==</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    xx <span class="token operator">=</span> ffound<span class="token operator">-></span>first<span class="token punctuation">;</span>                    dd <span class="token operator">=</span> <span class="token function">touch</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span>ffound<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dd <span class="token operator">==</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> found <span class="token operator">=</span> my<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> my<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> ffound <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ffound<span class="token punctuation">)</span> <span class="token operator">==</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    xx <span class="token operator">=</span> ffound<span class="token operator">-></span>first<span class="token punctuation">;</span>                    dd <span class="token operator">=</span> <span class="token function">touch</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span>ffound<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dd <span class="token operator">==</span> U<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> found <span class="token operator">=</span> mx<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> my<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> ffound <span class="token operator">=</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ffound <span class="token operator">==</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    yy <span class="token operator">=</span> ffound<span class="token operator">-></span>first<span class="token punctuation">;</span>                    dd <span class="token operator">=</span> <span class="token function">touch</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span>ffound<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dd <span class="token operator">==</span> D<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> found <span class="token operator">=</span> mx<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> my<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> ffound <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// cerr&lt;&lt;"\n"&lt;&lt;xx&lt;&lt;yy&lt;&lt;"\n";</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ffound<span class="token punctuation">)</span> <span class="token operator">==</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    yy <span class="token operator">=</span> ffound<span class="token operator">-></span>first<span class="token punctuation">;</span>                    dd <span class="token operator">=</span> <span class="token function">touch</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span>ffound<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>map</tag>
      
      <tag>binary_search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>USACO</title>
    <link href="/algosolution/2022/10/22/Hoof-Paper-Scissors.cpp/"/>
    <url>/algosolution/2022/10/22/Hoof-Paper-Scissors.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="USACO"><a href="#USACO" class="headerlink" title="USACO"></a><a href="http://www.usaco.org/index.php?page=viewproblem2">USACO</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Hoof-Paper-Scissors.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/22/2022 Sat 17:14:51.38</span><span class="token comment">// http://www.usaco.org/index.php?page=viewproblem2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">freopen</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">H</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">P</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">win</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"hps.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"hps.out"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">v</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token char">'H'</span><span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> H<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token char">'P'</span><span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> P<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token char">'S'</span><span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> S<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> wwin <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// cerr&lt;&lt;wwin;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>wwin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> p <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">win</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">win</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">win</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mmax <span class="token operator">+</span> <span class="token function">win</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mmax <span class="token operator">+</span> <span class="token function">win</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mmax <span class="token operator">+</span> <span class="token function">win</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// cerr&lt;&lt;f[p][j][0]&lt;&lt;" "&lt;&lt;f[p][j][1]&lt;&lt;" "&lt;&lt;f[p][j][2]&lt;&lt;"\n";</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// for(int i = 0;i&lt;=b;i++) &#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// &#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>404 Not Found</title>
    <link href="/algosolution/2022/10/22/square-game.cpp/"/>
    <url>/algosolution/2022/10/22/square-game.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a><a href="https://www.luogu.com.cn/problem/P1129">404 Not Found</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/square-game.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/22/2022 Sat 13:13:51.77</span><span class="token comment">// https://www.luogu.com.cn/problem/P1129</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>mark<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>now<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// debug(x);</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// debug(x);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        now<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>        <span class="token comment">// assert(m != 1);</span>        now <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// char now = getchar();</span>                <span class="token comment">// while(now != '0' &amp;&amp; now != '1') now = getchar();</span>                <span class="token keyword">char</span> now<span class="token punctuation">;</span>cin<span class="token operator">>></span>now<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// cerr&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;"\n";</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// debug(f);</span>        <span class="token comment">// debug(f[1]);</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mark <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// debug(ans,now);</span>            <span class="token comment">// debug(ans);</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>bigraph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f505. 10603 - Fill - 高中生程式解題系統</title>
    <link href="/algosolution/2022/10/20/Zerojudge-f505.cpp/"/>
    <url>/algosolution/2022/10/20/Zerojudge-f505.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f505-10603-Fill-高中生程式解題系統"><a href="#f505-10603-Fill-高中生程式解題系統" class="headerlink" title="f505. 10603 - Fill - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f505">f505. 10603 - Fill - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f505.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/20/2022 Thu  9:44:27.82</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">,</span>z<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">x</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">z</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> box a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> z <span class="token operator">></span> a<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>box a<span class="token punctuation">,</span>box b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>z <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span>mark<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>box<span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">int</span> found <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span><span class="token keyword">int</span> fillwater <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> now<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> now<span class="token punctuation">.</span>r<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> now<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> found <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            found <span class="token operator">=</span> x<span class="token punctuation">;</span>            fillwater <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">></span> found <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            found <span class="token operator">=</span> y<span class="token punctuation">;</span>            fillwater <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>z <span class="token operator">></span> found <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            found <span class="token operator">=</span> z<span class="token punctuation">;</span>            fillwater <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> c <span class="token operator">||</span> y <span class="token operator">==</span> c <span class="token operator">||</span> z <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>r<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> leftfill <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightfill <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span>leftfill<span class="token punctuation">,</span>x <span class="token operator">+</span> y <span class="token operator">-</span> leftfill<span class="token punctuation">,</span>z<span class="token punctuation">,</span>r <span class="token operator">+</span> leftfill <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">-</span> rightfill<span class="token punctuation">,</span>rightfill<span class="token punctuation">,</span>z<span class="token punctuation">,</span>r <span class="token operator">+</span> rightfill <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leftfill <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        rightfill <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>leftfill<span class="token punctuation">,</span><span class="token punctuation">(</span>y <span class="token operator">+</span> z<span class="token punctuation">)</span> <span class="token operator">-</span> leftfill<span class="token punctuation">,</span>r <span class="token operator">+</span> leftfill <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span>y <span class="token operator">+</span> z<span class="token punctuation">)</span> <span class="token operator">-</span> rightfill<span class="token punctuation">,</span>rightfill<span class="token punctuation">,</span>r <span class="token operator">+</span> rightfill <span class="token operator">-</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leftfill <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        rightfill <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span>leftfill<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token punctuation">(</span>x <span class="token operator">+</span> z<span class="token punctuation">)</span> <span class="token operator">-</span> leftfill<span class="token punctuation">,</span>r <span class="token operator">+</span> leftfill <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> z<span class="token punctuation">)</span> <span class="token operator">-</span> rightfill<span class="token punctuation">,</span>y<span class="token punctuation">,</span>rightfill<span class="token punctuation">,</span>r <span class="token operator">+</span> rightfill <span class="token operator">-</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>fillwater<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>found<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        found <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>fillwater <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>404 Not Found</title>
    <link href="/algosolution/2022/10/18/K&#39;s-farm.cpp/"/>
    <url>/algosolution/2022/10/18/K&#39;s-farm.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a><a href="https://www.luogu.com.cn/problem/P1993">404 Not Found</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/K's-farm.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/18/2022 Tue 16:24:07.30</span><span class="token comment">// https://www.luogu.com.cn/problem/P1993</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fast></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cerr<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// b--;c--;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">,</span><span class="token operator">-</span>d<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// vector&lt;bool>mark(a + 1);</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dt</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second <span class="token operator">></span> dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second <span class="token operator">></span> dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>difference</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>404 Not Found</title>
    <link href="/algosolution/2022/10/16/master.cpp/"/>
    <url>/algosolution/2022/10/16/master.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a><a href="https://www.luogu.com.cn/problem/P4933">404 Not Found</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/master.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/16/2022 Sun  9:01:26.79</span><span class="token comment">// https://www.luogu.com.cn/problem/P4933</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token number">998244353</span></span></span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// if(i == 1) c[j][f[i] - f[j]] += 1;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">]</span> <span class="token operator">%</span> R<span class="token punctuation">;</span>            sig <span class="token operator">=</span> sig <span class="token operator">+</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20000</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            sig <span class="token operator">=</span> sig <span class="token operator">%</span> R<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sig <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> R<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>404 Not Found</title>
    <link href="/algosolution/2022/10/15/middle.cpp/"/>
    <url>/algosolution/2022/10/15/middle.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a><a href="https://www.luogu.com.cn/problem/P1168">404 Not Found</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/middle.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/15/2022 Sat  8:41:59.93</span><span class="token comment">// https://www.luogu.com.cn/problem/P1168</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>null_type<span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>rb_tree_tag<span class="token punctuation">,</span>tree_order_statistics_node_update<span class="token operator">></span>t<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">.</span><span class="token function">find_by_order</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> c <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>pb_ds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>404 Not Found</title>
    <link href="/algosolution/2022/10/15/LCA.cpp/"/>
    <url>/algosolution/2022/10/15/LCA.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a><a href="https://www.luogu.com.cn/problem/P3379">404 Not Found</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/LCA.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/15/2022 Sat  8:08:49.90</span><span class="token comment">// https://www.luogu.com.cn/problem/P3379</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;table></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>    c<span class="token operator">--</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    gp_hash_table<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">,</span>mr<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">mk</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>vtd<span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">++</span>r<span class="token punctuation">,</span>now<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mr<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>now<span class="token punctuation">,</span>r<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> ck <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nr <span class="token operator">=</span> mr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">;</span>        vtd<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> vtd<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ck</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            vtd<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ck</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">t</span><span class="token punctuation">(</span>vtd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>vtd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DFS</tag>
      
      <tag>tree</tag>
      
      <tag>LCA</tag>
      
      <tag>gp_hash_table</tag>
      
      <tag>sparse_table</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Counting Paths</title>
    <link href="/algosolution/2022/10/14/Counting-Paths.cpp/"/>
    <url>/algosolution/2022/10/14/Counting-Paths.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Counting-Paths"><a href="#CSES-Counting-Paths" class="headerlink" title="CSES - Counting Paths"></a><a href="https://cses.fi/problemset/task/1136">CSES - Counting Paths</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Counting-Paths.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 11/04/2022 Fri 14:46:42.16</span><span class="token comment">// https://cses.fi/problemset/task/1136</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>mark<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>level<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>g<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ck</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>g <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    level<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ck</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ck</span><span class="token punctuation">(</span><span class="token keyword">int</span> last<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>g<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token operator">=</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> last<span class="token punctuation">)</span> <span class="token function">ck</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> jump <span class="token operator">=</span> level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>g<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>jump <span class="token operator">=</span> jump <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jump <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jump <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> b <span class="token operator">=</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> g<span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    n <span class="token operator">=</span> a<span class="token punctuation">;</span>g <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">init</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int &amp;i : count) cerr&lt;&lt;i&lt;&lt;" ";</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> last<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> last<span class="token punctuation">)</span> sig <span class="token operator">+=</span> <span class="token function">walk</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+=</span> sig<span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>tree</tag>
      
      <tag>LCA</tag>
      
      <tag>difference</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d767. 血緣關係 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/10/14/Zerojudge-d767.cpp/"/>
    <url>/algosolution/2022/10/14/Zerojudge-d767.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d767-血緣關係-高中生程式解題系統"><a href="#d767-血緣關係-高中生程式解題系統" class="headerlink" title="d767. 血緣關係 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d767">d767. 血緣關係 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d767.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/14/2022 Fri  8:17:54.88</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">struct</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">table</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cerr&lt;&lt;n;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">__lg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token function">__lg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ll <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>ll<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> ll<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ll<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// vector&lt;int>mk,mre(a);</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>l<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">re</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fre</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">level</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">nowl</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        level<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        fre<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            l<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// int ans = 0,fd = 0;</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> ck <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// return min(abs(fre.at(b - 1) - re.at(a - 1)),abs(re.at(b - 1) - fre.at(a - 1)));</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> level<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> level<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>level<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// int r = 0;</span>        <span class="token comment">// int now = mre.at(c);</span>        <span class="token comment">// vector&lt;int>v(&#123;-1&#125;);</span>        <span class="token comment">// int aa = -1,bb = -1;</span>        <span class="token comment">// // cerr&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;"\n";</span>        <span class="token comment">// while(1) &#123;</span>        <span class="token comment">//     debug(v,r,mk.at(now),aa,bb);</span>        <span class="token comment">//     assert(now &lt; mk.size());</span>        <span class="token comment">//     if(bb == -1 &amp;&amp; mk.at(now) == b) bb = r;</span>        <span class="token comment">//     if(aa == -1 &amp;&amp; mk.at(now) == a) aa = r;</span>        <span class="token comment">//     if(aa != -1 &amp;&amp; bb != -1) return aa + bb;</span>        <span class="token comment">//     if(mk.at(now) == v.back()) &#123;</span>        <span class="token comment">//         v.pop_back();</span>        <span class="token comment">//         r--;</span>        <span class="token comment">//         now++;</span>        <span class="token comment">//         continue;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     v.push_back(mk.at(now));</span>        <span class="token comment">//     r++;</span>        <span class="token comment">//     now++;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// return 0;</span>        <span class="token comment">// queue&lt;pair&lt;int,int>>q;</span>        <span class="token comment">// int aa = -1,bb = -1;</span>        <span class="token comment">// q.emplace(c,0);</span>        <span class="token comment">// while(!q.empty()) &#123;</span>        <span class="token comment">//     auto now = q.front();q.pop();</span>        <span class="token comment">//     int d = now.first;</span>        <span class="token comment">//     int r = now.second;</span>        <span class="token comment">//     if(d == a) aa = r;</span>        <span class="token comment">//     if(d == b) bb = r;</span>        <span class="token comment">//     if(aa != -1 &amp;&amp; bb != -1) return aa + bb;</span>        <span class="token comment">//     for(int &amp;i : f.at(d)) &#123;</span>        <span class="token comment">//         q.emplace(i,r + 1);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// debug(ll);</span>    table t <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// for(int &amp;i : l) cerr&lt;&lt;i&lt;&lt;" ";</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token function">ck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>DFS</tag>
      
      <tag>LCA</tag>
      
      <tag>sparse_table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Graph-Without-Long-Directed-Paths</title>
    <link href="/algosolution/2022/10/12/Graph-Without-Long-Directed-Paths.cpp/"/>
    <url>/algosolution/2022/10/12/Graph-Without-Long-Directed-Paths.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Graph-Without-Long-Directed-Paths"><a href="#Codeforces-Graph-Without-Long-Directed-Paths" class="headerlink" title="Codeforces - Graph-Without-Long-Directed-Paths"></a><a href="https://codeforces.com/contest/1144/problem/F">Codeforces - Graph-Without-Long-Directed-Paths</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Graph-Without-Long-Directed-Paths.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/12/2022 Wed 14:01:07.25</span><span class="token comment">// https://codeforces.com/contest/1144/problem/F</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>c<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iota</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>s<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> bk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ff</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ff</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span> bk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bk<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">mg</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES\n"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>DSU</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Longest Flight Route</title>
    <link href="/algosolution/2022/10/12/Longest-Flight-Route-2.cpp/"/>
    <url>/algosolution/2022/10/12/Longest-Flight-Route-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Longest-Flight-Route"><a href="#CSES-Longest-Flight-Route" class="headerlink" title="CSES - Longest Flight Route"></a><a href="https://cses.fi/problemset/task/1680/">CSES - Longest Flight Route</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Longest-Flight-Route-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/12/2022 Wed 11:21:18.28</span><span class="token comment">// https://cses.fi/problemset/task/1680/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>c<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">in</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token function">dt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1e11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1LL</span> <span class="token operator">></span> dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            in<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"IMPOSSIBLE"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>now <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>            now <span class="token operator">=</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n1 "</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>tapo</tag>
      
      <tag>re-search</tag>
      
      <tag>DAG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Course Schedule</title>
    <link href="/algosolution/2022/10/11/Course-Schedule.cpp/"/>
    <url>/algosolution/2022/10/11/Course-Schedule.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Course-Schedule"><a href="#CSES-Course-Schedule" class="headerlink" title="CSES - Course Schedule"></a><a href="https://cses.fi/problemset/task/1679">CSES - Course Schedule</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Course-Schedule.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/11/2022 Tue 11:29:32.41</span><span class="token comment">// https://cses.fi/problemset/task/1679</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> to<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        to<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ans<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"IMPOSSIBLE"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>tapo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Round Trip II</title>
    <link href="/algosolution/2022/10/11/Round-Trip-II.cpp/"/>
    <url>/algosolution/2022/10/11/Round-Trip-II.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Round-Trip-II"><a href="#CSES-Round-Trip-II" class="headerlink" title="CSES - Round Trip II"></a><a href="https://cses.fi/problemset/task/1678">CSES - Round Trip II</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Round-Trip-II.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/11/2022 Tue  9:20:43.98</span><span class="token comment">// https://cses.fi/problemset/task/1678</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>mark<span class="token punctuation">;</span>bitset<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e5</span><span class="token operator">></span>mk<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>re<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mk<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">-</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            re<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mk<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            re<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// mk.reset(x);</span>    mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> to<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        to<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// queue&lt;int>ans;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>mk<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// printf("check(%d) return %d\n",i,1);</span>            <span class="token comment">// for(int i : re) cout&lt;&lt;i&lt;&lt;" ";</span>            <span class="token comment">// cout&lt;&lt;"\n";</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                re<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span>re<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>re<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span>re<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>re<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// cout&lt;&lt;ans.front() + 1&lt;&lt;" ";ans.pop();</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"IMPOSSIBLE"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - High Score</title>
    <link href="/algosolution/2022/10/10/High-Score-5.cpp/"/>
    <url>/algosolution/2022/10/10/High-Score-5.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-High-Score"><a href="#CSES-High-Score" class="headerlink" title="CSES - High Score"></a><a href="https://cses.fi/problemset/task/1673">CSES - High Score</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/High-Score-5.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/10/2022 Mon  8:29:12.94</span><span class="token comment">// https://cses.fi/problemset/task/1673</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        a<span class="token operator">--</span><span class="token punctuation">;</span>b<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span><span class="token operator">-</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// f.at(b).push_back(&#123;a,-c&#125;);</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1e13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>r <span class="token operator">&lt;</span> a<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> <span class="token operator">&amp;</span>j <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>k <span class="token operator">:</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i : dt) cerr&lt;&lt;i&lt;&lt;" ";</span>    <span class="token comment">// cerr&lt;&lt;"\n";</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mk</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">re</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">bool</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cerr&lt;&lt;x&lt;&lt;" ";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">></span> checkn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">bool</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cerr&lt;&lt;x&lt;&lt;" ";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> mark <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkn</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>r <span class="token operator">&lt;</span> a<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> <span class="token operator">&amp;</span>j <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>k <span class="token operator">:</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// re.at(r) = 1;</span>                <span class="token comment">// re.at(k.first) = 1;</span>                o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                re<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(bool i : re) cerr&lt;&lt;(int) i&lt;&lt;" ";</span>    <span class="token comment">// cerr&lt;&lt;"\n";</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">checkn</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span>dt<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>e810. 2.潛水 (Diving) - 高中生程式解題系統</title>
    <link href="/algosolution/2022/10/10/Zerojudge-e810-6.cpp/"/>
    <url>/algosolution/2022/10/10/Zerojudge-e810-6.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="e810-2-潛水-Diving-高中生程式解題系統"><a href="#e810-2-潛水-Diving-高中生程式解題系統" class="headerlink" title="e810. 2.潛水 (Diving) - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=e810">e810. 2.潛水 (Diving) - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-e810-6.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/10/2022 Mon  8:02:09.83</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>cin<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>l<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>re</tag>
      
      <tag>graph</tag>
      
      <tag>dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d100. Q-7-8. 小寶的著色問題 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/10/05/AP325-d100.cpp/"/>
    <url>/algosolution/2022/10/05/AP325-d100.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d100-Q-7-8-小寶的著色問題-TCFSH-CIRC-Judge"><a href="#d100-Q-7-8-小寶的著色問題-TCFSH-CIRC-Judge" class="headerlink" title="d100. Q-7-8. 小寶的著色問題 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d100">d100. Q-7-8. 小寶的著色問題 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d100.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/05/2022 Wed 11:41:47.19</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d100</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>color<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>fc<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">pr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">pr</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// if(ff(a) == ff(pr(b))) return 0;</span>    fc<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> fc<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fc<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> fc<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>fc<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        color <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        fc <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">iota</span><span class="token punctuation">(</span>fc<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fc<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> bk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> last<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ff</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ff</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> bk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bk<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">mg</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// if(bk) cerr&lt;&lt;last&lt;&lt;" "&lt;&lt;x;</span>                <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>bk <span class="token operator">?</span> <span class="token string">"no\n"</span> <span class="token operator">:</span> <span class="token string">"yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>DSU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g733. 110北二4.漫遊高譚市 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/10/03/Zerojudge-g733.cpp/"/>
    <url>/algosolution/2022/10/03/Zerojudge-g733.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g733-110北二4-漫遊高譚市-高中生程式解題系統"><a href="#g733-110北二4-漫遊高譚市-高中生程式解題系統" class="headerlink" title="g733. 110北二4.漫遊高譚市 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g733">g733. 110北二4.漫遊高譚市 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g733.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 10/03/2022 Mon 15:00:39.37</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> aa<span class="token punctuation">,</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">;</span>cin<span class="token operator">>></span>aa<span class="token operator">>></span>bb<span class="token operator">>></span>cc<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>aa<span class="token punctuation">,</span>cc<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> aa<span class="token punctuation">,</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">;</span>cin<span class="token operator">>></span>aa<span class="token operator">>></span>bb<span class="token operator">>></span>cc<span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>aa<span class="token punctuation">,</span>cc<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>cin<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span>    <span class="token keyword">int</span> mmin <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">,</span>p<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mmin<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>l <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>l <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        mark <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mmin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> i <span class="token operator">:</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                p<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>l <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>graph</tag>
      
      <tag>dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Tree Diameter</title>
    <link href="/algosolution/2022/09/23/Tree-Diameter.cpp/"/>
    <url>/algosolution/2022/09/23/Tree-Diameter.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Tree-Diameter"><a href="#CSES-Tree-Diameter" class="headerlink" title="CSES - Tree Diameter"></a><a href="https://cses.fi/problemset/task/1131">CSES - Tree Diameter</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Tree-Diameter.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/23/2022 Fri 20:14:07.72</span><span class="token comment">// https://cses.fi/problemset/task/1131</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>mark<span class="token punctuation">;</span><span class="token keyword">inline</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ft</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>first<span class="token punctuation">,</span>c<span class="token punctuation">.</span>second<span class="token punctuation">,</span>a<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>r <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mmax <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> tmp <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        nc <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nc<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ft</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nc <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nc<span class="token punctuation">,</span>mmax<span class="token punctuation">.</span>first <span class="token operator">+</span> mmax<span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>mmax<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nc<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">200000</span><span class="token operator">></span>s<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">_Find_first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>DFS</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Subordinates</title>
    <link href="/algosolution/2022/09/21/Subordinates.cpp/"/>
    <url>/algosolution/2022/09/21/Subordinates.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Subordinates"><a href="#CSES-Subordinates" class="headerlink" title="CSES - Subordinates"></a><a href="https://cses.fi/problemset/task/1674">CSES - Subordinates</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Subordinates.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/21/2022 Wed 15:41:09.20</span><span class="token comment">// https://cses.fi/problemset/task/1674</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">--</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Salary Queries</title>
    <link href="/algosolution/2022/09/18/Salary-Queries-4.cpp/"/>
    <url>/algosolution/2022/09/18/Salary-Queries-4.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Salary-Queries"><a href="#CSES-Salary-Queries" class="headerlink" title="CSES - Salary Queries"></a><a href="https://cses.fi/problemset/task/1144">CSES - Salary Queries</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Salary-Queries-4.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/20/2022 Sun  9:47:00.78</span><span class="token comment">// https://cses.fi/problemset/task/1144</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>null_type<span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>rb_tree_tag<span class="token punctuation">,</span>tree_order_statistics_node_update<span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">v</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>LONG_LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token char">'!'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>re</tag>
      
      <tag>pb_ds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Range Xor Queries</title>
    <link href="/algosolution/2022/09/18/Range-Xor-Queries.cpp/"/>
    <url>/algosolution/2022/09/18/Range-Xor-Queries.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Range-Xor-Queries"><a href="#CSES-Range-Xor-Queries" class="headerlink" title="CSES - Range Xor Queries"></a><a href="https://cses.fi/problemset/task/1650">CSES - Range Xor Queries</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Range-Xor-Queries.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/18/2022 Sun  9:12:35.91</span><span class="token comment">// https://cses.fi/problemset/task/1650</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span>t<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">^</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tree <span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c085. $E.$$Friends$ - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/09/16/tcirc-c085.cpp/"/>
    <url>/algosolution/2022/09/16/tcirc-c085.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="c085-E-Friends-TCFSH-CIRC-Judge"><a href="#c085-E-Friends-TCFSH-CIRC-Judge" class="headerlink" title="c085. $E.$$Friends$ - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=c085">c085. $E.$$Friends$ - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/tcirc-c085.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/16/2022 Fri 22:31:59.27</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=c085</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iota</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmpa<span class="token operator">>></span>tmpb<span class="token punctuation">;</span>        <span class="token function">mg</span><span class="token punctuation">(</span>tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">r</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        r<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>first <span class="token operator">!=</span> b<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>first <span class="token operator">></span> b<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DSU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d102. P-8-1. 樹上的推銷員 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/09/16/AP325-d102.cpp/"/>
    <url>/algosolution/2022/09/16/AP325-d102.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d102-P-8-1-樹上的推銷員-TCFSH-CIRC-Judge"><a href="#d102-P-8-1-樹上的推銷員-TCFSH-CIRC-Judge" class="headerlink" title="d102. P-8-1. 樹上的推銷員 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d102">d102. P-8-1. 樹上的推銷員 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d102.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/16/2022 Fri 20:49:09.27</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d102</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> f<span class="token punctuation">,</span>t<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> box b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> b<span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> r <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">!=</span> b<span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token keyword">return</span> f <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>f<span class="token punctuation">;</span>        <span class="token keyword">return</span> t <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>mark<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>box<span class="token operator">></span>now<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>g<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">ff</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>mk<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mk<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    t <span class="token operator">=</span> n<span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    mk<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iota</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mg</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>f<span class="token punctuation">,</span>i<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> i<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>operator</tag>
      
      <tag>graph</tag>
      
      <tag>DSU</tag>
      
      <tag>DFS</tag>
      
      <tag>struct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R - Walk</title>
    <link href="/algosolution/2022/09/15/Walk-2.cpp/"/>
    <url>/algosolution/2022/09/15/Walk-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="R-Walk"><a href="#R-Walk" class="headerlink" title="R - Walk"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_r">R - Walk</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Walk-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/15/2022 Thu 21:13:55.25</span><span class="token comment">// https://atcoder.jp/contests/dp/tasks/dp_r</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;square></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>r<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>r<span class="token punctuation">;</span>    t<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">tt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tt<span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    tt<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    tt <span class="token operator">=</span> tt <span class="token operator">^</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> tt<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans <span class="token operator">%</span> R<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>fast-power</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R - Walk</title>
    <link href="/algosolution/2022/09/15/Walk.cpp/"/>
    <url>/algosolution/2022/09/15/Walk.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="R-Walk"><a href="#R-Walk" class="headerlink" title="R - Walk"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_r">R - Walk</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Walk.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/15/2022 Thu 20:13:04.26</span><span class="token comment">// https://atcoder.jp/contests/dp/tasks/dp_r</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">inline</span> box <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>box x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        box tmp <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">%</span> R<span class="token punctuation">;</span>                    <span class="token comment">// [2][3] ==> [2][0] * [0][3] + [2][1] * [1][3] + ...</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cin<span class="token operator">>></span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> box <span class="token keyword">operator</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        box t <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">^</span> <span class="token punctuation">(</span>k <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> t <span class="token operator">*</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>r<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>r<span class="token punctuation">;</span>    box t <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> t <span class="token operator">^</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> t<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans <span class="token operator">%</span> R<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>fast-power</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g640. 璽羽的壽司 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/14/Zerojudge-g640.cpp/"/>
    <url>/algosolution/2022/09/14/Zerojudge-g640.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g640-璽羽的壽司-高中生程式解題系統"><a href="#g640-璽羽的壽司-高中生程式解題系統" class="headerlink" title="g640. 璽羽的壽司 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g640">g640. 璽羽的壽司 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g640.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/14/2022 Wed 10:46:41.51</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">!=</span> f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> <span class="token operator">*</span>found<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>binary_search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d539. 區間 MAX - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/14/Zerojudge-d539-6.cpp/"/>
    <url>/algosolution/2022/09/14/Zerojudge-d539-6.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d539-區間-MAX-高中生程式解題系統"><a href="#d539-區間-MAX-高中生程式解題系統" class="headerlink" title="d539. 區間 MAX - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d539">d539. 區間 MAX - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-6.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/14/2022 Wed  9:59:45.74</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">table</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    table t <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>sparse_table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d539. 區間 MAX - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/14/Zerojudge-d539-5.cpp/"/>
    <url>/algosolution/2022/09/14/Zerojudge-d539-5.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d539-區間-MAX-高中生程式解題系統"><a href="#d539-區間-MAX-高中生程式解題系統" class="headerlink" title="d539. 區間 MAX - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d539">d539. 區間 MAX - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-5.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/14/2022 Wed  9:55:45.45</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;seg_tree></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    seg_tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>re</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Q - Flowers</title>
    <link href="/algosolution/2022/09/14/Flowers-2.cpp/"/>
    <url>/algosolution/2022/09/14/Flowers-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Q-Flowers"><a href="#Q-Flowers" class="headerlink" title="Q - Flowers"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_q">Q - Flowers</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Flowers-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/14/2022 Wed  8:39:04.05</span><span class="token comment">// https://atcoder.jp/contests/dp/tasks/dp_q</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">tree</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span>t<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>l <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>l <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// vector&lt;int>mark(mmax + 1);</span>    tree <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mmax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">r</span><span class="token punctuation">(</span>mmax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mmax <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>mmax <span class="token operator">-</span> tmp <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+=</span> mmax <span class="token operator">-</span> tmp <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>mmax<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BIT</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Q - Flowers</title>
    <link href="/algosolution/2022/09/14/Flowers.cpp/"/>
    <url>/algosolution/2022/09/14/Flowers.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Q-Flowers"><a href="#Q-Flowers" class="headerlink" title="Q - Flowers"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_q">Q - Flowers</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Flowers.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/14/2022 Wed  8:27:04.80</span><span class="token comment">// https://atcoder.jp/contests/dp/tasks/dp_q</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;seg_tree></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// vector&lt;int>mark(mmax + 1);</span>    seg_tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mmax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>check<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// t.check();</span>        <span class="token comment">// cerr&lt;&lt;1;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mmax <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>mmax <span class="token operator">-</span> tmp <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// cerr&lt;&lt;1;</span>        <span class="token comment">// for(int j = f.at(i) + 1;j&lt;=mmax;j++) &#123;</span>        <span class="token comment">//     // mark.at(j) = max(mark.at(j - 1),mark.at(j));</span>        <span class="token comment">//     if(mark.at(j - 1) > mark.at(j)) &#123;</span>        <span class="token comment">//         mark.at(j) = mark.at(j - 1);</span>        <span class="token comment">//         continue;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     break;</span>        <span class="token comment">// &#125;</span>    <span class="token comment">// debug(mark);</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mmax<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d055. P-4-14. 控制點 (2D-max) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/09/10/AP325-d055-2.cpp/"/>
    <url>/algosolution/2022/09/10/AP325-d055-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d055-P-4-14-控制點-2D-max-TCFSH-CIRC-Judge"><a href="#d055-P-4-14-控制點-2D-max-TCFSH-CIRC-Judge" class="headerlink" title="d055. P-4-14. 控制點 (2D-max) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d055">d055. P-4-14. 控制點 (2D-max) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d055-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/10/2022 Sat 14:52:31.14</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d055</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mmax <span class="token operator">>=</span> i<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> i<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        x <span class="token operator">=</span> i<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        mmax <span class="token operator">=</span> i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>sweep-line</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>e810. 2.潛水 (Diving) - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/09/Zerojudge-e810-4.cpp/"/>
    <url>/algosolution/2022/09/09/Zerojudge-e810-4.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="e810-2-潛水-Diving-高中生程式解題系統"><a href="#e810-2-潛水-Diving-高中生程式解題系統" class="headerlink" title="e810. 2.潛水 (Diving) - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=e810">e810. 2.潛水 (Diving) - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-e810-4.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/09/2022 Fri 17:46:28.12</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>e<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token operator">>></span>e<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>l<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"-1"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g598. 4. 真假子圖 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/07/Zerojudge-g598-2.cpp/"/>
    <url>/algosolution/2022/09/07/Zerojudge-g598-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g598-4-真假子圖-高中生程式解題系統"><a href="#g598-4-真假子圖-高中生程式解題系統" class="headerlink" title="g598. 4. 真假子圖 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g598">g598. 4. 真假子圖 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g598-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/07/2022 Wed 10:36:50.25</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>l<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">pr</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">mg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    l<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token operator">++</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">pr</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">pr</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">pr</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">pr</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// array&lt;array&lt;int,2>,2>mk = &#123;&#123;f[a],pr(f[a])&#125;,&#123;pr(f[b]),f[b]&#125;&#125;;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> run <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">bool</span> now <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> l<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                now <span class="token operator">=</span> now <span class="token operator">&amp;&amp;</span> <span class="token function">run</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">pr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> now<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token function">pr</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token function">mg</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> bkp <span class="token operator">=</span> f<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> bl <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mg</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// for(int i : f) cout&lt;&lt;i&lt;&lt;" ";</span>                <span class="token comment">// cout&lt;&lt;"\n";</span>                f <span class="token operator">=</span> bkp<span class="token punctuation">;</span>                l <span class="token operator">=</span> bl<span class="token punctuation">;</span>                <span class="token comment">// for(int i : f) cout&lt;&lt;i&lt;&lt;" ";</span>                <span class="token comment">// cout&lt;&lt;"\n\n";</span>                c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i : f) cout&lt;&lt;i&lt;&lt;" ";</span>        <span class="token comment">// cout&lt;&lt;"\n";</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DSU</tag>
      
      <tag>undo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f315. 4. 低地距離 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/06/Zerojudge-f315-4.cpp/"/>
    <url>/algosolution/2022/09/06/Zerojudge-f315-4.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f315-4-低地距離-高中生程式解題系統"><a href="#f315-4-低地距離-高中生程式解題系統" class="headerlink" title="f315. 4. 低地距離 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f315">f315. 4. 低地距離 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f315-4.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/06/2022 Tue 20:39:14.93</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>null_type<span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>rb_tree_tag<span class="token punctuation">,</span>tree_order_statistics_node_update<span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">ii</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">o</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        tmp<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ii<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            o<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ii<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>ii<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ii<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>pb_ds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d788. 排名順序 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/03/Zerojudge-d788-3.cpp/"/>
    <url>/algosolution/2022/09/03/Zerojudge-d788-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d788-排名順序-高中生程式解題系統"><a href="#d788-排名順序-高中生程式解題系統" class="headerlink" title="d788. 排名順序 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d788">d788. 排名順序 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d788-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/03/2022 Sat 19:42:36.78</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">tree</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span>t<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>a <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>t <span class="token operator">=</span> <span class="token function">tree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> <span class="token function">tree</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BIT</tag>
      
      <tag>re</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d788. 排名順序 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/03/Zerojudge-d788-2.cpp/"/>
    <url>/algosolution/2022/09/03/Zerojudge-d788-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d788-排名順序-高中生程式解題系統"><a href="#d788-排名順序-高中生程式解題系統" class="headerlink" title="d788. 排名順序 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d788">d788. 排名順序 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d788-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/03/2022 Sat 19:28:03.83</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>null_type<span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>rb_tree_tag<span class="token punctuation">,</span>tree_order_statistics_node_update<span class="token operator">></span>f<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>re</tag>
      
      <tag>tree</tag>
      
      <tag>pb_ds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d652. 貪婪之糊 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/09/03/Zerojudge-d652-4.cpp/"/>
    <url>/algosolution/2022/09/03/Zerojudge-d652-4.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d652-貪婪之糊-高中生程式解題系統"><a href="#d652-貪婪之糊-高中生程式解題系統" class="headerlink" title="d652. 貪婪之糊 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d652">d652. 貪婪之糊 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d652-4.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 09/03/2022 Sat 16:31:55.10</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>mark<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmin <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> mmin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Flight Discount</title>
    <link href="/algosolution/2022/08/30/Flight-Discount.cpp/"/>
    <url>/algosolution/2022/08/30/Flight-Discount.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Flight-Discount"><a href="#CSES-Flight-Discount" class="headerlink" title="CSES - Flight Discount"></a><a href="https://cses.fi/problemset/task/1195">CSES - Flight Discount</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Flight-Discount.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/30/2022 Tue 13:34:45.06</span><span class="token comment">// https://cses.fi/problemset/task/1195</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">z</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>box a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>box a<span class="token punctuation">,</span>box b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> R <span class="token operator">=</span> <span class="token number">1e14</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>to<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dtr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    dt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dtr<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            dt<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>            mark<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>l <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            dtr<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>            mark<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> to<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>l <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int k = 0;k&lt;a - 1;k++) &#123;</span>        <span class="token comment">//     c = 0;</span>        <span class="token comment">//     for(int i = 0;i&lt;a;i++) &#123;</span>        <span class="token comment">//         for(auto &amp;j : f[i]) &#123;</span>        <span class="token comment">//             if(dt[i] == R) continue;</span>        <span class="token comment">//             dt[j.first] = min(dt[j.first],dt[i] + j.second,cp);</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     if(!c) break;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// for(int k = 0;k&lt;a - 1;k++) &#123;</span>        <span class="token comment">//     c = 0;</span>        <span class="token comment">//     for(int i = 0;i&lt;a;i++) &#123;</span>        <span class="token comment">//         for(auto &amp;j : f[i]) &#123;</span>        <span class="token comment">//             if(dtr[j.first] == R) continue;</span>        <span class="token comment">//             dtr[i] = min(dtr[i],dtr[j.first] + j.second,cp);</span>        <span class="token comment">//         &#125;</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     if(!c) break;</span>        <span class="token comment">// &#125;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span>dtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> R<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>j <span class="token operator">:</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> R <span class="token operator">||</span> dtr<span class="token punctuation">[</span>j<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> R<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j<span class="token punctuation">.</span>second <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dtr<span class="token punctuation">[</span>j<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        f<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        to<span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
      <tag>dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B - Modulo Number</title>
    <link href="/algosolution/2022/08/27/Modulo-Number.py/"/>
    <url>/algosolution/2022/08/27/Modulo-Number.py/</url>
    
    <content type="html"><![CDATA[<h1 id="B-Modulo-Number"><a href="#B-Modulo-Number" class="headerlink" title="B - Modulo Number"></a><a href="https://atcoder.jp/contests/abc266/tasks/abc266_b">B - Modulo Number</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Modulo-Number.py"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Author : ysh</span><span class="token comment"># 08/27/2022 Sat 20:51:43.17</span><span class="token comment"># https://atcoder.jp/contests/abc266/tasks/abc266_b</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">998244353</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A - Middle  Letter</title>
    <link href="/algosolution/2022/08/27/Middle-Letter.py/"/>
    <url>/algosolution/2022/08/27/Middle-Letter.py/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Middle-Letter"><a href="#A-Middle-Letter" class="headerlink" title="A - Middle  Letter"></a><a href="https://atcoder.jp/contests/abc266/tasks/abc266_a">A - Middle  Letter</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Middle-Letter.py"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Author : ysh</span><span class="token comment"># 08/27/2022 Sat 20:48:38.10</span><span class="token comment"># https://atcoder.jp/contests/abc266/tasks/abc266_a</span>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a194. 死亡 FLAG - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/25/Zerojudge-a194.cpp/"/>
    <url>/algosolution/2022/08/25/Zerojudge-a194.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="a194-死亡-FLAG-高中生程式解題系統"><a href="#a194-死亡-FLAG-高中生程式解題系統" class="headerlink" title="a194. 死亡 FLAG - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=a194">a194. 死亡 FLAG - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a194.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/25/2022 Thu 21:45:19.09</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>            <span class="token keyword">auto</span> found <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> f<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token operator">*</span><span class="token function">prev</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Grid Paths</title>
    <link href="/algosolution/2022/08/25/Grid-Paths.cpp/"/>
    <url>/algosolution/2022/08/25/Grid-Paths.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Grid-Paths"><a href="#CSES-Grid-Paths" class="headerlink" title="CSES - Grid Paths"></a><a href="https://cses.fi/problemset/task/1638">CSES - Grid Paths</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Grid-Paths.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/25/2022 Thu 17:23:21.41</span><span class="token comment">// https://cses.fi/problemset/task/1638</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    b <span class="token operator">=</span> a<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">c</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string s<span class="token punctuation">;</span>cin<span class="token operator">>></span>s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> R<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Buy-a-Ticket</title>
    <link href="/algosolution/2022/08/24/Buy-a-Ticket.cpp/"/>
    <url>/algosolution/2022/08/24/Buy-a-Ticket.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Buy-a-Ticket"><a href="#Codeforces-Buy-a-Ticket" class="headerlink" title="Codeforces - Buy-a-Ticket"></a><a href="https://codeforces.com/problemset/problem/938/D">Codeforces - Buy-a-Ticket</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Buy-a-Ticket.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/24/2022 Wed 17:39:53.03</span><span class="token comment">// https://codeforces.com/problemset/problem/938/D</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">1e13</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>line<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>mark<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//f[now] = 0;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// q.emplace(i);</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">c</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> line<span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    line<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        line<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        line<span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    for(int i = 0;i&lt;a;i++) &#123;        f[i][i] = 0;    &#125;    */</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//debug(f);</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    for(auto i : f) &#123;        for(int j : i) &#123;            cout&lt;&lt;j&lt;&lt;" ";        &#125;        cout&lt;&lt;"\n";    &#125;    */</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d539. 區間 MAX - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/20/Zerojudge-d539-4.cpp/"/>
    <url>/algosolution/2022/08/20/Zerojudge-d539-4.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d539-區間-MAX-高中生程式解題系統"><a href="#d539-區間-MAX-高中生程式解題系統" class="headerlink" title="d539. 區間 MAX - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d539">d539. 區間 MAX - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-4.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/20/2022 Sat  8:02:03.34</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">;</span>    <span class="token function">table</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    table t <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>re</tag>
      
      <tag>sparse_table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Prefix Sum Queries</title>
    <link href="/algosolution/2022/08/19/Prefix-Sum-Queries-3.cpp/"/>
    <url>/algosolution/2022/08/19/Prefix-Sum-Queries-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Prefix-Sum-Queries"><a href="#CSES-Prefix-Sum-Queries" class="headerlink" title="CSES - Prefix Sum Queries"></a><a href="https://cses.fi/problemset/task/2166/">CSES - Prefix Sum Queries</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Prefix-Sum-Queries-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/19/2022 Fri 22:29:12.05</span><span class="token comment">// https://cses.fi/problemset/task/2166/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">,</span>pref<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pref</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pref</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    box <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> box <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span>sum <span class="token operator">+</span> a<span class="token punctuation">.</span>sum<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>pref<span class="token punctuation">,</span>sum <span class="token operator">+</span> a<span class="token punctuation">.</span>pref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">seg_tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">></span>f<span class="token punctuation">,</span>lt<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lt<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// mt(0,n - 1);</span>    <span class="token punctuation">&#125;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// this->n = v.size();</span>        <span class="token comment">// f.resize(n &lt;&lt; 2);</span>        <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;"\n";</span>        <span class="token comment">// if(l == 2 &amp;&amp; r == 1) return;</span>        <span class="token comment">// system("sleep 10");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>sum<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">lcheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> lt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>sum<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// debug(nl,nr);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// void push(int nl,int nr,int t) &#123;</span>    <span class="token comment">//         f[t] += lt[t] * (nr - nl + 1);</span>    <span class="token comment">//         lt[right(t)] = lt[right(t)] + lt[t];</span>    <span class="token comment">//         lt[left(t)] = lt[left(t)] + lt[t];</span>    <span class="token comment">//         // radd(nl,mid,lt[t]);</span>    <span class="token comment">//         // radd(mid + 1,nr,lt[t]);</span>    <span class="token comment">//         lt[t] = 0;</span>    <span class="token comment">// &#125;</span>        <span class="token comment">// int rsum(int l,int r,int t = 0,int nl = 0,int nr = -1) &#123;</span>    <span class="token comment">//     // cout&lt;&lt;nl&lt;&lt;" "&lt;&lt;nr&lt;&lt;"\n";</span>    <span class="token comment">//     if(nr == -1) nr = n - 1;</span>    <span class="token comment">//     if(nl == nr) return f[t] + lt[t];</span>    <span class="token comment">//     if(lt[t] != 0) push(nl,nr,t);</span>    <span class="token comment">//     // lcheck();</span>    <span class="token comment">//     // check();</span>    <span class="token comment">//     int mid = (nl + nr) >> 1;</span>    <span class="token comment">//     if(mid >= r) return rsum(l,r,left(t),nl,mid);</span>    <span class="token comment">//     if(mid &lt; l) return rsum(l,r,right(t),mid + 1,nr);</span>    <span class="token comment">//     if(nl >= l &amp;&amp; nr &lt;= r) &#123;</span>    <span class="token comment">//         return f[t];</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     return rsum(l,r,left(t),nl,mid) + rsum(l,r,right(t),mid + 1,nr);</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// int radd(int l,int r,int v,int t = 0,int nl = 0,int nr = -1) &#123;</span>    <span class="token comment">//     if(nl == nr) &#123;</span>    <span class="token comment">//         f[t] += v;</span>    <span class="token comment">//         return v;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     if(nr == -1) nr = n - 1;</span>    <span class="token comment">//     int mid = (nl + nr) >> 1;</span>    <span class="token comment">//     if(mid &lt; l) &#123;</span>    <span class="token comment">//         int tmp = radd(l,r,v,right(t),mid + 1,nr);</span>    <span class="token comment">//         f[t] += tmp;</span>    <span class="token comment">//         return tmp;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     if(mid >= r) &#123;</span>    <span class="token comment">//         int tmp = radd(l,r,v,left(t),nl,mid);</span>    <span class="token comment">//         f[t] += tmp;</span>    <span class="token comment">//         return tmp;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     if(nl >= l &amp;&amp; nr &lt;= r) &#123;</span>    <span class="token comment">//         lt[t] += v;</span>    <span class="token comment">//         return (nr - nl + 1) * v;</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     int rr = radd(l,r,v,right(t),mid + 1,nr);</span>    <span class="token comment">//     int ll = radd(l,r,v,left(t),nl,mid);</span>    <span class="token comment">//     f[t] += rr + ll;</span>    <span class="token comment">//     return rr + ll;</span>    <span class="token comment">// &#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// if(i != 0) r[i] = r[i - 1] + f[i];</span>        <span class="token comment">// else r[0] = f[0];</span>    <span class="token punctuation">&#125;</span>    seg_tree t <span class="token operator">=</span> <span class="token function">seg_tree</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> aa<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>aa<span class="token operator">>></span>b<span class="token punctuation">;</span>            <span class="token comment">// int tmp = b;</span>            <span class="token comment">// b = b - f[aa - 1];</span>            f<span class="token punctuation">[</span>aa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>aa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// t.check();</span>            <span class="token comment">// t.lcheck();</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pref<span class="token punctuation">;</span>            <span class="token keyword">else</span> ans <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pref<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Prefix Sum Queries</title>
    <link href="/algosolution/2022/08/19/Prefix-Sum-Queries-2.cpp/"/>
    <url>/algosolution/2022/08/19/Prefix-Sum-Queries-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Prefix-Sum-Queries"><a href="#CSES-Prefix-Sum-Queries" class="headerlink" title="CSES - Prefix Sum Queries"></a><a href="https://cses.fi/problemset/task/2166">CSES - Prefix Sum Queries</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Prefix-Sum-Queries-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/19/2022 Fri 21:39:25.22</span><span class="token comment">// https://cses.fi/problemset/task/2166</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">seg_tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">,</span>lt<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lt<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// mt(0,n - 1);</span>    <span class="token punctuation">&#125;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// this->n = v.size();</span>        <span class="token comment">// f.resize(n &lt;&lt; 2);</span>        <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;"\n";</span>        <span class="token comment">// if(l == 2 &amp;&amp; r == 1) return;</span>        <span class="token comment">// system("sleep 10");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">lcheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> lt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// debug(nl,nr);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// radd(nl,mid,lt[t]);</span>            <span class="token comment">// radd(mid + 1,nr,lt[t]);</span>            lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">rmax</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;nl&lt;&lt;" "&lt;&lt;nr&lt;&lt;"\n";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lcheck();</span>        <span class="token comment">// check();</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rmax</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rmax</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">rmax</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rmax</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">rsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;nl&lt;&lt;" "&lt;&lt;nr&lt;&lt;"\n";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lcheck();</span>        <span class="token comment">// check();</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">radd</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    seg_tree t <span class="token operator">=</span> <span class="token function">seg_tree</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> aa<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>aa<span class="token operator">>></span>b<span class="token punctuation">;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> b <span class="token operator">-</span> f<span class="token punctuation">[</span>aa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>aa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">radd</span><span class="token punctuation">(</span>aa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// t.check();</span>            <span class="token comment">// t.lcheck();</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">rmax</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">.</span><span class="token function">rsum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ans <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">rmax</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d799. 区间求和 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/19/Zerojudge-d799.cpp/"/>
    <url>/algosolution/2022/08/19/Zerojudge-d799.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d799-区间求和-高中生程式解題系統"><a href="#d799-区间求和-高中生程式解題系統" class="headerlink" title="d799. 区间求和 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d799">d799. 区间求和 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d799.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/19/2022 Fri 20:31:50.68</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">seg_tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">,</span>lt<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lt<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// mt(0,n - 1);</span>    <span class="token punctuation">&#125;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// this->n = v.size();</span>        <span class="token comment">// f.resize(n &lt;&lt; 2);</span>        <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;"\n";</span>        <span class="token comment">// if(l == 2 &amp;&amp; r == 1) return;</span>        <span class="token comment">// system("sleep 10");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">lcheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> lt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// debug(nl,nr);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> lt<span class="token punctuation">[</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> lt<span class="token punctuation">[</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// radd(nl,mid,lt[t]);</span>            <span class="token comment">// radd(mid + 1,nr,lt[t]);</span>            lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">rsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;nl&lt;&lt;" "&lt;&lt;nr&lt;&lt;"\n";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lcheck();</span>        <span class="token comment">// check();</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rsum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">radd</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> rr <span class="token operator">=</span> <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ll <span class="token operator">=</span> <span class="token function">radd</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> rr <span class="token operator">+</span> ll<span class="token punctuation">;</span>        <span class="token keyword">return</span> rr <span class="token operator">+</span> ll<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    seg_tree t <span class="token operator">=</span> <span class="token function">seg_tree</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token comment">// t.check();</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">radd</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// t.check();</span>            <span class="token comment">// t.lcheck();</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">rsum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>tree</tag>
      
      <tag>seg_tree</tag>
      
      <tag>lazy_tag</tag>
      
      <tag>own-template</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>b123. 最大矩形 (Area) - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/19/Zerojudge-b123-2.cpp/"/>
    <url>/algosolution/2022/08/19/Zerojudge-b123-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="b123-最大矩形-Area-高中生程式解題系統"><a href="#b123-最大矩形-Area-高中生程式解題系統" class="headerlink" title="b123. 最大矩形 (Area) - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=b123">b123. 最大矩形 (Area) - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b123-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/19/2022 Fri 19:39:27.37</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cin<span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>k <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d652. 貪婪之糊 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/19/Zerojudge-d652-3.cpp/"/>
    <url>/algosolution/2022/08/19/Zerojudge-d652-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d652-貪婪之糊-高中生程式解題系統"><a href="#d652-貪婪之糊-高中生程式解題系統" class="headerlink" title="d652. 貪婪之糊 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d652">d652. 貪婪之糊 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d652-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/19/2022 Fri 19:15:54.69</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>mark<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmin <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> mmin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d539. 區間 MAX - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/18/Zerojudge-d539-3.cpp/"/>
    <url>/algosolution/2022/08/18/Zerojudge-d539-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d539-區間-MAX-高中生程式解題系統"><a href="#d539-區間-MAX-高中生程式解題系統" class="headerlink" title="d539. 區間 MAX - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d539">d539. 區間 MAX - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/18/2022 Thu 16:31:39.44</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">table</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token function">table</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        for(int i = 0;i&lt;n;i++) &#123;            int tmp = INT_MIN;            int r = 0;            f[i][0] = v[i];            int j = 0;            for(int k = 1;i + k&lt;=n;k = (k &lt;&lt; 1)) &#123;                // int t = (1 &lt;&lt; k) - 1;                for(;j&lt;k;j++) &#123;                    tmp = max(tmp,v[i + j]);                &#125;                f[i][r] = tmp;                r = r + 1;            &#125;        &#125;        */</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token function">__lg</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> now<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    table t <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// t.check();</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>sparse_table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d539. 區間 MAX - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/18/Zerojudge-d539-2.cpp/"/>
    <url>/algosolution/2022/08/18/Zerojudge-d539-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d539-區間-MAX-高中生程式解題系統"><a href="#d539-區間-MAX-高中生程式解題系統" class="headerlink" title="d539. 區間 MAX - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d539">d539. 區間 MAX - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/18/2022 Thu 16:01:07.31</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">seg_tree</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// mt(0,n - 1);</span>    <span class="token punctuation">&#125;</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">seg_tree</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// this->n = v.size();</span>        <span class="token comment">// f.resize(n &lt;&lt; 2);</span>        <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;"\n";</span>        <span class="token comment">// if(l == 2 &amp;&amp; r == 1) return;</span>        <span class="token comment">// system("sleep 10");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cerr&lt;&lt;nl&lt;&lt;" "&lt;&lt;nr&lt;&lt;"\n";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> nr <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">==</span> nr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> nr <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>nl <span class="token operator">+</span> nr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">left</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token function">right</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    seg_tree t <span class="token operator">=</span> <span class="token function">seg_tree</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// t.check();</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Salary Queries</title>
    <link href="/algosolution/2022/08/17/Salary-Queries.cpp/"/>
    <url>/algosolution/2022/08/17/Salary-Queries.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Salary-Queries"><a href="#CSES-Salary-Queries" class="headerlink" title="CSES - Salary Queries"></a><a href="https://cses.fi/problemset/task/1144/">CSES - Salary Queries</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Salary-Queries.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/17/2022 Wed  8:06:09.40</span><span class="token comment">// https://cses.fi/problemset/task/1144/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/extc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> __gnu_pbds<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    tree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> null_type<span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> rb_tree_tag<span class="token punctuation">,</span> tree_order_statistics_node_update<span class="token operator">></span>f<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">v</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>LONG_LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> f<span class="token punctuation">.</span><span class="token function">order_of_key</span><span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token string">"!"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;f.order_of_key(b) - f.order_of_key(a) + 1;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>tree</tag>
      
      <tag>pb_ds</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>e367. 區間Xor - 高中生程式解題系統</title>
    <link href="/algosolution/2022/08/16/Zerojudge-e367.py/"/>
    <url>/algosolution/2022/08/16/Zerojudge-e367.py/</url>
    
    <content type="html"><![CDATA[<h1 id="e367-區間Xor-高中生程式解題系統"><a href="#e367-區間Xor-高中生程式解題系統" class="headerlink" title="e367. 區間Xor - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=e367">e367. 區間Xor - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-e367.py"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Author : ysh</span><span class="token comment"># 08/16/2022 Tue 16:53:37.42</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>llast <span class="token operator">=</span> <span class="token number">0</span>last <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    last <span class="token operator">=</span> last <span class="token operator">^</span> i    llast <span class="token operator">=</span> llast <span class="token operator">^</span> last    b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>llast<span class="token punctuation">)</span>    <span class="token comment"># last = last ^ i </span><span class="token comment"># print(b[:10])</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">^</span> b<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>pref</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Monsters</title>
    <link href="/algosolution/2022/08/16/Monsters.cpp/"/>
    <url>/algosolution/2022/08/16/Monsters.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Monsters"><a href="#CSES-Monsters" class="headerlink" title="CSES - Monsters"></a><a href="https://cses.fi/problemset/task/1194">CSES - Monsters</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Monsters.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/16/2022 Tue  8:08:02.33</span><span class="token comment">// https://cses.fi/problemset/task/1194</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> yy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> dd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'D'</span><span class="token punctuation">,</span><span class="token char">'L'</span><span class="token punctuation">,</span><span class="token char">'U'</span><span class="token punctuation">,</span><span class="token char">'R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>    <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">z</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">flood</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token operator">&amp;</span>f<span class="token punctuation">,</span>queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>q<span class="token punctuation">,</span>queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">not</span> f<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(auto i : f) &#123;</span>        <span class="token comment">//     for(bool j : i) &#123;</span>        <span class="token comment">//         cout&lt;&lt;(j ? 1 : 0);</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     cout&lt;&lt;"\n";</span>        <span class="token comment">// &#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>qs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                qs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                x <span class="token operator">=</span> i<span class="token punctuation">;</span>y <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span>box<span class="token operator">></span>p<span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nx<span class="token punctuation">,</span>ny<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> now<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> now<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> a <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> y <span class="token operator">==</span> b <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nx <span class="token operator">=</span> x<span class="token punctuation">;</span>ny <span class="token operator">=</span> y<span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// for(auto i : f) &#123;</span>            <span class="token comment">//     for(bool j : i) &#123;</span>            <span class="token comment">//         cerr&lt;&lt;(j ? 1 : 0);</span>            <span class="token comment">//     &#125;</span>            <span class="token comment">//     cerr&lt;&lt;"\n";</span>            <span class="token comment">// &#125;</span>            last <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">flood</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>qs<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>qs<span class="token punctuation">[</span>t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">not</span> f<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mark<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token comment">// int nx,ny;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nx <span class="token operator">!=</span> x <span class="token operator">||</span> ny <span class="token operator">!=</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cerr&lt;&lt;1;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> nx<span class="token punctuation">,</span>y <span class="token operator">=</span> ny<span class="token punctuation">;</span>            nx <span class="token operator">=</span> x <span class="token operator">-</span> xx<span class="token punctuation">[</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ny <span class="token operator">=</span> y <span class="token operator">-</span> yy<span class="token punctuation">[</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> now <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>dd<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Round Trip</title>
    <link href="/algosolution/2022/08/15/Round-Trip.cpp/"/>
    <url>/algosolution/2022/08/15/Round-Trip.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Round-Trip"><a href="#CSES-Round-Trip" class="headerlink" title="CSES - Round Trip"></a><a href="https://cses.fi/problemset/task/1669">CSES - Round Trip</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Round-Trip.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/15/2022 Mon 12:59:35.46</span><span class="token comment">// https://cses.fi/problemset/task/1669</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>mark<span class="token punctuation">;</span><span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">-</span> mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ff <span class="token operator">=</span> n<span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mark<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token comment">// if(n == t &amp;&amp; c &amp;&amp; r >= 4) &#123;</span>    <span class="token comment">//     q.push(n);</span>    <span class="token comment">//     return 1;</span>    <span class="token comment">// &#125;</span>    c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> ff<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmpa<span class="token operator">>></span>tmpb<span class="token punctuation">;</span>        tmpa<span class="token operator">--</span><span class="token punctuation">;</span>tmpb<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmpa<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmpb<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmpb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmpa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// mark.clear();</span>        <span class="token comment">// mark.resize(a);</span>        c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"IMPOSSIBLE"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Message Route</title>
    <link href="/algosolution/2022/08/13/Message-Route.cpp/"/>
    <url>/algosolution/2022/08/13/Message-Route.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Message-Route"><a href="#CSES-Message-Route" class="headerlink" title="CSES - Message Route"></a><a href="https://cses.fi/problemset/task/1667">CSES - Message Route</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Message-Route.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/13/2022 Sat 10:08:29.02</span><span class="token comment">// https://cses.fi/problemset/task/1667</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmpa<span class="token operator">>></span>tmpb<span class="token punctuation">;</span>        tmpa<span class="token operator">--</span><span class="token punctuation">;</span>tmpb<span class="token operator">--</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>tmpa<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmpb<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>tmpb<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmpa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// mark[0] = 1;</span>    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// if(mark[n]) continue;</span>        <span class="token comment">// mark[n] = 1;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"IMPOSSIBLE"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> mark<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BFS</tag>
      
      <tag>re-search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Building Roads</title>
    <link href="/algosolution/2022/08/13/Building-Roads.cpp/"/>
    <url>/algosolution/2022/08/13/Building-Roads.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Building-Roads"><a href="#CSES-Building-Roads" class="headerlink" title="CSES - Building Roads"></a><a href="https://cses.fi/problemset/task/1666">CSES - Building Roads</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Building-Roads.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/13/2022 Sat  7:44:15.40</span><span class="token comment">// https://cses.fi/problemset/task/1666</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span><span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iota</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmpa<span class="token operator">>></span>tmpb<span class="token punctuation">;</span>        <span class="token function">mark</span><span class="token punctuation">(</span>tmpa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>tmpb <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token function">ff</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mark</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Labyrinth</title>
    <link href="/algosolution/2022/08/09/Labyrinth.cpp/"/>
    <url>/algosolution/2022/08/09/Labyrinth.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Labyrinth"><a href="#CSES-Labyrinth" class="headerlink" title="CSES - Labyrinth"></a><a href="https://cses.fi/problemset/task/1193">CSES - Labyrinth</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Labyrinth.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/09/2022 Tue 15:34:23</span><span class="token comment">// https://cses.fi/problemset/task/1193</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> yy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> dd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'D'</span><span class="token punctuation">,</span><span class="token char">'L'</span><span class="token punctuation">,</span><span class="token char">'U'</span><span class="token punctuation">,</span><span class="token char">'R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> sx<span class="token punctuation">,</span>sy<span class="token punctuation">,</span>gx<span class="token punctuation">,</span>gy<span class="token punctuation">;</span>    <span class="token keyword">bool</span> c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> now <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sx <span class="token operator">=</span> i<span class="token punctuation">;</span>                sy <span class="token operator">=</span> j<span class="token punctuation">;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token char">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                gx <span class="token operator">=</span> i<span class="token punctuation">;</span>                gy <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i = 0;i&lt;a;i++) &#123;</span>    <span class="token comment">//     for(int j = 0;j&lt;b;j++) &#123;</span>    <span class="token comment">//         cout&lt;&lt;(int) c[i][j];</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">bool</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mark<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token comment">// cerr&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;"\n";</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> gx <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> gy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mark<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                c<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ans<span class="token punctuation">;</span>    <span class="token comment">// for(int i = 0;i&lt;a;i++) &#123;</span>    <span class="token comment">//     for(int j = 0;j&lt;b;j++) &#123;</span>    <span class="token comment">//         cout&lt;&lt;dd[mark[i][j]]&lt;&lt;" ";</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// cerr&lt;&lt;gx&lt;&lt;" "&lt;&lt;gy&lt;&lt;"\n";</span>        <span class="token comment">// cerr&lt;&lt;1;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>gx<span class="token punctuation">]</span><span class="token punctuation">[</span>gy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> gx<span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> gy<span class="token punctuation">;</span>        gx <span class="token operator">=</span> gx <span class="token operator">-</span> xx<span class="token punctuation">[</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        gy <span class="token operator">=</span> gy <span class="token operator">-</span> yy<span class="token punctuation">[</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>gx <span class="token operator">==</span> sx <span class="token operator">&amp;&amp;</span> gy <span class="token operator">==</span> sy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// ans = dd[mark[gx][gy]] + ans;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES\n"</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>dd<span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>BFS</tag>
      
      <tag>re-search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d055. P-4-14. 控制點 (2D-max) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/08/03/AP325-d055.cpp/"/>
    <url>/algosolution/2022/08/03/AP325-d055.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d055-P-4-14-控制點-2D-max-TCFSH-CIRC-Judge"><a href="#d055-P-4-14-控制點-2D-max-TCFSH-CIRC-Judge" class="headerlink" title="d055. P-4-14. 控制點 (2D-max) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d055">d055. P-4-14. 控制點 (2D-max) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d055.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 08/03/2022 Wed 10:06:43</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d055</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>first <span class="token operator">!=</span> b<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>first <span class="token operator">></span> b<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">></span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>second <span class="token operator">></span> mmax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mmax <span class="token operator">=</span> i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>sweep-line</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Subarray Sums I</title>
    <link href="/algosolution/2022/07/31/Subarray-Sums-I.cpp/"/>
    <url>/algosolution/2022/07/31/Subarray-Sums-I.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Subarray-Sums-I"><a href="#CSES-Subarray-Sums-I" class="headerlink" title="CSES - Subarray Sums I"></a><a href="https://cses.fi/problemset/task/1660">CSES - Subarray Sums I</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Subarray-Sums-I.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/31/2022 Sun 17:01:02.71</span><span class="token comment">// https://cses.fi/problemset/task/1660</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> last <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">+</span> found<span class="token operator">-></span>second<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        m<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>map</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Counting Rooms</title>
    <link href="/algosolution/2022/07/31/Counting-Rooms.cpp/"/>
    <url>/algosolution/2022/07/31/Counting-Rooms.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Counting-Rooms"><a href="#CSES-Counting-Rooms" class="headerlink" title="CSES - Counting Rooms"></a><a href="https://cses.fi/problemset/task/1192">CSES - Counting Rooms</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Counting-Rooms.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/31/2022 Sun 16:42:02.65</span><span class="token comment">// https://cses.fi/problemset/task/1192</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> yy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span>f<span class="token punctuation">;</span><span class="token comment">// vector&lt;vector&lt;bool>>f;</span><span class="token comment">// vector&lt;vector&lt;bool>>mark;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string c<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'#'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">bool</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> nx <span class="token operator">=</span> a <span class="token operator">+</span> xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ny <span class="token operator">=</span> b <span class="token operator">+</span> yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nx <span class="token operator">&lt;</span> <span class="token double-colon punctuation">::</span>a <span class="token operator">&amp;&amp;</span> nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> <span class="token double-colon punctuation">::</span>b <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">check</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - String Matching</title>
    <link href="/algosolution/2022/07/31/String-Matching.cpp/"/>
    <url>/algosolution/2022/07/31/String-Matching.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-String-Matching"><a href="#CSES-String-Matching" class="headerlink" title="CSES - String Matching"></a><a href="https://cses.fi/problemset/task/1753">CSES - String Matching</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/String-Matching.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/31/2022 Sun  9:25:04.48</span><span class="token comment">// https://cses.fi/problemset/task/1753</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>string x<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>len <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> f<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    f<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> a<span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Coin Combinations II</title>
    <link href="/algosolution/2022/07/30/Coin-Combinations-II.cpp/"/>
    <url>/algosolution/2022/07/30/Coin-Combinations-II.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Coin-Combinations-II"><a href="#CSES-Coin-Combinations-II" class="headerlink" title="CSES - Coin Combinations II"></a><a href="https://cses.fi/problemset/task/1636">CSES - Coin Combinations II</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Coin-Combinations-II.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/30/2022 Sat 18:58:36.52</span><span class="token comment">// https://cses.fi/problemset/task/1636</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token comment">// c[i] = 1;</span>    <span class="token punctuation">&#125;</span>    c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// cerr&lt;&lt;"c["&lt;&lt;i&lt;&lt;"] += c["&lt;&lt;i - f[j]&lt;&lt;"] == "&lt;&lt;c[i - f[j]]&lt;&lt;"\n";</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// cout&lt;&lt;c[i]&lt;&lt;" ";</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// cout&lt;&lt;"\n";</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d054. Q-4-10. 恢復能量的白雲熊膽丸 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/30/AP325-d054-2.cpp/"/>
    <url>/algosolution/2022/07/30/AP325-d054-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d054-Q-4-10-恢復能量的白雲熊膽丸-TCFSH-CIRC-Judge"><a href="#d054-Q-4-10-恢復能量的白雲熊膽丸-TCFSH-CIRC-Judge" class="headerlink" title="d054. Q-4-10. 恢復能量的白雲熊膽丸 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d054">d054. Q-4-10. 恢復能量的白雲熊膽丸 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d054-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/30/2022 Sat 14:19:18.50</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d054</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">int</span> mmax<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> mmax<span class="token punctuation">)</span> <span class="token keyword">return</span> LONG_LONG_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-=</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now <span class="token operator">=</span> x <span class="token operator">-</span> i<span class="token punctuation">;</span>            t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cerr&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;"\n";</span>    <span class="token function">assert</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cp</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">ff</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">ff</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        sig <span class="token operator">=</span> sig <span class="token operator">+</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mmax <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// vector&lt;int>v(sig);</span>    <span class="token comment">// iota(v.begin(),v.end(),0);</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">ff</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>sig<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>binary_search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d065. P-5-7. 大樓外牆廣告 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/29/AP325-d065.cpp/"/>
    <url>/algosolution/2022/07/29/AP325-d065.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d065-P-5-7-大樓外牆廣告-TCFSH-CIRC-Judge"><a href="#d065-P-5-7-大樓外牆廣告-TCFSH-CIRC-Judge" class="headerlink" title="d065. P-5-7. 大樓外牆廣告 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d065">d065. P-5-7. 大樓外牆廣告 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d065.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/29/2022 Fri 19:03:40.55</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d065</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>f<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// debug(l,r);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// debug(l,r,f[l]);</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lf <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rf <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nl<span class="token punctuation">,</span>nr<span class="token punctuation">;</span>nl <span class="token operator">=</span> mid<span class="token punctuation">;</span>nr <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> f<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> f<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>nl <span class="token operator">></span> l <span class="token operator">||</span> nr <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert(nl >= l &amp;&amp; nr &lt;= r);</span>        <span class="token comment">// debug(nl,nr,mmax,h);</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">></span> l <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>nl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nl<span class="token operator">--</span><span class="token punctuation">;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nr<span class="token operator">++</span><span class="token punctuation">;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">not</span> <span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nl <span class="token operator">></span> l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nr <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nl<span class="token operator">--</span><span class="token punctuation">;</span>                h <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>f<span class="token punctuation">[</span>nl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nr<span class="token operator">++</span><span class="token punctuation">;</span>            h <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>f<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// printf("%d",(nr - nl + 1) * h);</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> f<span class="token punctuation">[</span>nl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nr<span class="token operator">++</span><span class="token punctuation">;</span>            h <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>f<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nl<span class="token operator">--</span><span class="token punctuation">;</span>        h <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>f<span class="token punctuation">[</span>nl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token punctuation">(</span>nr <span class="token operator">-</span> nl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// debug(l,r,mmax);</span>    <span class="token comment">// debug(l,r,max(&#123;lf,rf,mmax&#125;));</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>lf<span class="token punctuation">,</span>rf<span class="token punctuation">,</span>mmax<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d073. Q-6-5. 二維最大子矩陣 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/24/AP325-d073.cpp/"/>
    <url>/algosolution/2022/07/24/AP325-d073.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d073-Q-6-5-二維最大子矩陣-TCFSH-CIRC-Judge"><a href="#d073-Q-6-5-二維最大子矩陣-TCFSH-CIRC-Judge" class="headerlink" title="d073. Q-6-5. 二維最大子矩陣 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d073">d073. Q-6-5. 二維最大子矩陣 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d073.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/24/2022 Sun 15:13:52.17</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d073</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> k <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// cin>>k;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                last <span class="token operator">+=</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">auto</span> found <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>last <span class="token operator">-</span> <span class="token double-colon punctuation">::</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>last <span class="token operator">-</span> <span class="token operator">*</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>brute</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d046. 例題 P-4-5. 嵩山磨劍坊的問題 (加權最小完成時間) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/21/AP325-d046.cpp/"/>
    <url>/algosolution/2022/07/21/AP325-d046.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d046-例題-P-4-5-嵩山磨劍坊的問題-加權最小完成時間-TCFSH-CIRC-Judge"><a href="#d046-例題-P-4-5-嵩山磨劍坊的問題-加權最小完成時間-TCFSH-CIRC-Judge" class="headerlink" title="d046. 例題 P-4-5. 嵩山磨劍坊的問題 (加權最小完成時間) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d046">d046. 例題 P-4-5. 嵩山磨劍坊的問題 (加權最小完成時間) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d046.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/21/2022 Thu 19:55:59.74</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d046</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>box a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>x <span class="token operator">*</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>box <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>box <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>box i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> <span class="token punctuation">(</span>last <span class="token operator">+=</span> i<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d652. 貪婪之糊 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/07/21/Zerojudge-d652-2.cpp/"/>
    <url>/algosolution/2022/07/21/Zerojudge-d652-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d652-貪婪之糊-高中生程式解題系統"><a href="#d652-貪婪之糊-高中生程式解題系統" class="headerlink" title="d652. 貪婪之糊 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d652">d652. 貪婪之糊 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d652-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/21/2022 Thu 17:29:13.99</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    n<span class="token operator">--</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">mark</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">+</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>k <span class="token operator">&lt;</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//cerr&lt;&lt;j&lt;&lt;" "&lt;&lt;j + i&lt;&lt;" "&lt;&lt;k&lt;&lt;"\n";</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX <span class="token operator">||</span> mark<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> mark<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// for(auto i : mark) &#123;</span>                <span class="token comment">//     for(auto j : i) &#123;</span>                <span class="token comment">//         cout&lt;&lt;j&lt;&lt;" ";</span>                <span class="token comment">//     &#125;</span>                <span class="token comment">//     cout&lt;&lt;"\n";</span>                <span class="token comment">// &#125;</span>                <span class="token comment">// cout&lt;&lt;"\n";</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mark<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d086. Q-6-18. 矩陣乘法鏈 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/21/AP325-d086-2.cpp/"/>
    <url>/algosolution/2022/07/21/AP325-d086-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d086-Q-6-18-矩陣乘法鏈-TCFSH-CIRC-Judge"><a href="#d086-Q-6-18-矩陣乘法鏈-TCFSH-CIRC-Judge" class="headerlink" title="d086. Q-6-18. 矩陣乘法鏈 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d086">d086. Q-6-18. 矩陣乘法鏈 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d086-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/21/2022 Thu 16:31:59.31</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d086</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">mark</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>LONG_LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">+</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>k <span class="token operator">&lt;</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//cerr&lt;&lt;j&lt;&lt;" "&lt;&lt;j + i&lt;&lt;" "&lt;&lt;k&lt;&lt;"\n";</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> LONG_LONG_MAX <span class="token operator">||</span> mark<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> LONG_LONG_MAX<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> mark<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// for(auto i : mark) &#123;</span>                <span class="token comment">//     for(auto j : i) &#123;</span>                <span class="token comment">//         cout&lt;&lt;j&lt;&lt;" ";</span>                <span class="token comment">//     &#125;</span>                <span class="token comment">//     cout&lt;&lt;"\n";</span>                <span class="token comment">// &#125;</span>                <span class="token comment">// cout&lt;&lt;"\n";</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mark<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d086. Q-6-18. 矩陣乘法鏈 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/21/AP325-d086.cpp/"/>
    <url>/algosolution/2022/07/21/AP325-d086.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d086-Q-6-18-矩陣乘法鏈-TCFSH-CIRC-Judge"><a href="#d086-Q-6-18-矩陣乘法鏈-TCFSH-CIRC-Judge" class="headerlink" title="d086. Q-6-18. 矩陣乘法鏈 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d086">d086. Q-6-18. 矩陣乘法鏈 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d086.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/21/2022 Thu  8:49:51.73</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d086</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>mark<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mark<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>LONG_LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> r <span class="token operator">=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r <span class="token operator">||</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> LONG_LONG_MAX<span class="token punctuation">)</span> <span class="token keyword">return</span> mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mark<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d045. 例題 P-4-4. 幾場華山論劍 (activity selection) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/20/AP325-d045.cpp/"/>
    <url>/algosolution/2022/07/20/AP325-d045.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d045-例題-P-4-4-幾場華山論劍-activity-selection-TCFSH-CIRC-Judge"><a href="#d045-例題-P-4-4-幾場華山論劍-activity-selection-TCFSH-CIRC-Judge" class="headerlink" title="d045. 例題 P-4-4. 幾場華山論劍 (activity selection) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d045">d045. 例題 P-4-4. 幾場華山論劍 (activity selection) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d045.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/20/2022 Wed 20:44:54.03</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d045</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cp</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>first<span class="token operator">>></span>i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d038. 例題 Q-3-14. 線性函數 (@@) (同 P-5-6，分治版) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/20/AP325-d038.cpp/"/>
    <url>/algosolution/2022/07/20/AP325-d038.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d038-例題-Q-3-14-線性函數-同-P-5-6，分治版-TCFSH-CIRC-Judge"><a href="#d038-例題-Q-3-14-線性函數-同-P-5-6，分治版-TCFSH-CIRC-Judge" class="headerlink" title="d038. 例題 Q-3-14. 線性函數 (@@) (同 P-5-6，分治版) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d038">d038. 例題 Q-3-14. 線性函數 (@@) (同 P-5-6，分治版) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d038.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/20/2022 Wed 19:43:31.70</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d038</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>f<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>c<span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">.</span>first<span class="token operator">>></span>i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> cl<span class="token punctuation">,</span><span class="token keyword">int</span> cr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>cl<span class="token punctuation">,</span>cr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cl <span class="token operator">></span> cr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cl <span class="token operator">==</span> cr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> LONG_LONG_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">*</span> c<span class="token punctuation">[</span>cl<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// printf("%d %d\n",cl,mmax);</span>        <span class="token keyword">return</span> mmax<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>cl <span class="token operator">+</span> cr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> LONG_LONG_MIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mmax <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mmax <span class="token operator">=</span> c<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">*</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            d <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// printf("%d %d\n",mid,mmax);</span>    <span class="token keyword">return</span> mmax <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>d<span class="token punctuation">,</span>cl<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>r<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>cr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d037. 習題Q-3-13. X差值範圍內的最大Y差值 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/20/AP325-d037.cpp/"/>
    <url>/algosolution/2022/07/20/AP325-d037.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d037-習題Q-3-13-X差值範圍內的最大Y差值-TCFSH-CIRC-Judge"><a href="#d037-習題Q-3-13-X差值範圍內的最大Y差值-TCFSH-CIRC-Judge" class="headerlink" title="d037. 習題Q-3-13. X差值範圍內的最大Y差值 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d037">d037. 習題Q-3-13. X差值範圍內的最大Y差值 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d037.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/20/2022 Wed 19:09:21.44</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d037</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">x</span> <span class="token expression">first</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">y</span> <span class="token expression">second</span></span><span class="token keyword">bool</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">cp</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">></span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>cp<span class="token operator">></span>q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">;</span>            <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>mmax <span class="token operator">&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> now<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mmax <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> now<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">debug</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>now<span class="token punctuation">.</span>x<span class="token punctuation">,</span>now<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>priority_queue</tag>
      
      <tag>DP</tag>
      
      <tag>sweep-line</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d034. 例題 P-3-10. 全彩彩帶 (需離散化或字典) (@@) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/17/AP325-d034.cpp/"/>
    <url>/algosolution/2022/07/17/AP325-d034.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d034-例題-P-3-10-全彩彩帶-需離散化或字典-TCFSH-CIRC-Judge"><a href="#d034-例題-P-3-10-全彩彩帶-需離散化或字典-TCFSH-CIRC-Judge" class="headerlink" title="d034. 例題 P-3-10. 全彩彩帶 (需離散化或字典) (@@) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d034">d034. 例題 P-3-10. 全彩彩帶 (需離散化或字典) (@@) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d034.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/17/2022 Sun 12:49:37</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d034</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> all <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmin <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// cout&lt;&lt;now&lt;&lt;" "&lt;&lt;l&lt;&lt;"\n";</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>now <span class="token operator">==</span> all<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                now<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            l<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> all<span class="token punctuation">)</span> mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>queue</tag>
      
      <tag>map</tag>
      
      <tag>sweep-line</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d033. 例題 P-3-9. 最多色彩帶 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/17/AP325-d033.cpp/"/>
    <url>/algosolution/2022/07/17/AP325-d033.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d033-例題-P-3-9-最多色彩帶-TCFSH-CIRC-Judge"><a href="#d033-例題-P-3-9-最多色彩帶-TCFSH-CIRC-Judge" class="headerlink" title="d033. 例題 P-3-9. 最多色彩帶 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d033">d033. 例題 P-3-9. 最多色彩帶 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d033.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/17/2022 Sun 11:39:24</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d033</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now<span class="token operator">++</span><span class="token punctuation">;</span>            mmax <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            now<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> now<span class="token operator">--</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>queue</tag>
      
      <tag>sweep-line</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d032. 例題 P-3-8. 固定長度區間的最大區段差 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/17/AP325-d032.cpp/"/>
    <url>/algosolution/2022/07/17/AP325-d032.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d032-例題-P-3-8-固定長度區間的最大區段差-TCFSH-CIRC-Judge"><a href="#d032-例題-P-3-8-固定長度區間的最大區段差-TCFSH-CIRC-Judge" class="headerlink" title="d032. 例題 P-3-8. 固定長度區間的最大區段差 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d032">d032. 例題 P-3-8. 固定長度區間的最大區段差 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d032.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/17/2022 Sun  8:07:47.64</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d032</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>g<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>s<span class="token punctuation">;</span>    <span class="token comment">//g.push(&#123;0,-1&#125;);</span>    <span class="token comment">//s.push(&#123;0,-1&#125;);</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">-</span> b<span class="token punctuation">;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>second <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                g<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">auto</span> nows <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nows<span class="token punctuation">.</span>second <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nows <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//printf("%d %d\n",now.first,nows.first);</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>first <span class="token operator">-</span> nows<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>priority_queue</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d031. 例題 P-3-7. 正整數序列之最接近的區間和 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/16/AP325-d031.cpp/"/>
    <url>/algosolution/2022/07/16/AP325-d031.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d031-例題-P-3-7-正整數序列之最接近的區間和-TCFSH-CIRC-Judge"><a href="#d031-例題-P-3-7-正整數序列之最接近的區間和-TCFSH-CIRC-Judge" class="headerlink" title="d031. 例題 P-3-7. 正整數序列之最接近的區間和 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d031">d031. 例題 P-3-7. 正整數序列之最接近的區間和 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d031.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/16/2022 Sat 14:55:13.37</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d031</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now<span class="token punctuation">;</span>cin<span class="token operator">>></span>now<span class="token punctuation">;</span>        now <span class="token operator">=</span> last <span class="token operator">+=</span> now<span class="token punctuation">;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>now <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> found<span class="token operator">-></span>first <span class="token operator">></span> mmax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mmax <span class="token operator">=</span> now <span class="token operator">-</span> found<span class="token operator">-></span>first<span class="token punctuation">;</span>                c <span class="token operator">=</span> found<span class="token operator">-></span>second<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> found<span class="token operator">-></span>first <span class="token operator">==</span> mmax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">+=</span> found<span class="token operator">-></span>second<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        m<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d022. 習題 Q-2-13. 無理數的快速冪 (108 高中全國賽, simplifed) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/16/AP325-d022.cpp/"/>
    <url>/algosolution/2022/07/16/AP325-d022.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d022-習題-Q-2-13-無理數的快速冪-108-高中全國賽-simplifed-TCFSH-CIRC-Judge"><a href="#d022-習題-Q-2-13-無理數的快速冪-108-高中全國賽-simplifed-TCFSH-CIRC-Judge" class="headerlink" title="d022. 習題 Q-2-13. 無理數的快速冪 (108 高中全國賽, simplifed) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d022">d022. 習題 Q-2-13. 無理數的快速冪 (108 高中全國賽, simplifed) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d022.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/16/2022 Sat  7:49:57</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d022</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    box <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>box x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span>a <span class="token operator">*</span> x<span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">*</span> x<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a <span class="token operator">*</span> x<span class="token punctuation">.</span>b <span class="token operator">+</span> b <span class="token operator">*</span> x<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>box x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span>a <span class="token operator">+</span> x<span class="token punctuation">.</span>a<span class="token punctuation">,</span>b <span class="token operator">+</span> x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>box x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span>a <span class="token operator">-</span> x<span class="token punctuation">.</span>a<span class="token punctuation">,</span>b <span class="token operator">-</span> x<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span>a <span class="token operator">%</span> x<span class="token punctuation">,</span>b <span class="token operator">%</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    box <span class="token keyword">operator</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">box</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        box tmp <span class="token operator">=</span> <span class="token function">box</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> r <span class="token operator">*</span> <span class="token function">box</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cerr<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" + "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" * sqrt(2)\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token punctuation">.</span>a<span class="token operator">>></span>c<span class="token punctuation">.</span>b<span class="token operator">>></span>y<span class="token punctuation">;</span>    box ans <span class="token operator">=</span> c <span class="token operator">^</span>  y<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>fast-power</tag>
      
      <tag>operator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d012. 例題 P-2-3. 快速冪 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/07/14/AP325-d012.cpp/"/>
    <url>/algosolution/2022/07/14/AP325-d012.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d012-例題-P-2-3-快速冪-TCFSH-CIRC-Judge"><a href="#d012-例題-P-2-3-快速冪-TCFSH-CIRC-Judge" class="headerlink" title="d012. 例題 P-2-3. 快速冪 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d012">d012. 例題 P-2-3. 快速冪 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d012.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/14/2022 Thu 22:28:10.35</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d012</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> xx<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> xx<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> z <span class="token operator">*</span> xx<span class="token punctuation">)</span> <span class="token operator">%</span> z<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>xx<span class="token operator">>></span>y<span class="token operator">>></span>z<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>fast-power</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a059. 完全平方和 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/07/04/Zerojudge-a059-2.cpp/"/>
    <url>/algosolution/2022/07/04/Zerojudge-a059-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="a059-完全平方和-高中生程式解題系統"><a href="#a059-完全平方和-高中生程式解題系統" class="headerlink" title="a059. 完全平方和 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=a059">a059. 完全平方和 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a059-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 07/04/2022 Mon 16:56:48.46</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>last <span class="token operator">+</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> last <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">-</span> <span class="token function">prev</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>sig<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>map</tag>
      
      <tag>pref</tag>
      
      <tag>table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a121. 質數又來囉 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/30/Zerojudge-a121.cpp/"/>
    <url>/algosolution/2022/06/30/Zerojudge-a121.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="a121-質數又來囉-高中生程式解題系統"><a href="#a121-質數又來囉-高中生程式解題系統" class="headerlink" title="a121. 質數又來囉 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=a121">a121. 質數又來囉 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a121.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/30/2022 Thu 12:37:20.38</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">10001</span></span></span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>prime<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">!</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> prime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> mmax<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>prime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>i510. 尋找子字串 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/27/Zerojudge-i510-2.cpp/"/>
    <url>/algosolution/2022/06/27/Zerojudge-i510-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="i510-尋找子字串-高中生程式解題系統"><a href="#i510-尋找子字串-高中生程式解題系統" class="headerlink" title="i510. 尋找子字串 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=i510">i510. 尋找子字串 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-i510-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/27/2022 Mon  7:54:06.54</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>string x<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> x<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> f<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes\npos: "</span><span class="token operator">&lt;&lt;</span>i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"No\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>KMP</tag>
      
      <tag>string</tag>
      
      <tag>search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>b552. 3.找質數 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/26/Zerojudge-b552.cpp/"/>
    <url>/algosolution/2022/06/26/Zerojudge-b552.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="b552-3-找質數-高中生程式解題系統"><a href="#b552-3-找質數-高中生程式解題系統" class="headerlink" title="b552. 3.找質數 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=b552">b552. 3.找質數 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b552.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/26/2022 Sun 12:14:10.59</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">100000</span></span></span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>prime<span class="token punctuation">;</span><span class="token comment">// #define int long long</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">!</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> prime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> mmax<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>MAX<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">int</span> <span class="token function">toint</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">toint</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>toint<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// int n;</span>    <span class="token comment">// while(cin>>n) &#123;</span>    <span class="token comment">//     cout&lt;&lt;n&lt;&lt;" "&lt;&lt;(int) check(n)&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// return 0;</span>    string a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">debug</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> now <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">toint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> now<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>prime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g556. 白色世界(困難版) - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/24/Zerojudge-g556.cpp/"/>
    <url>/algosolution/2022/06/24/Zerojudge-g556.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g556-白色世界-困難版-高中生程式解題系統"><a href="#g556-白色世界-困難版-高中生程式解題系統" class="headerlink" title="g556. 白色世界(困難版) - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g556">g556. 白色世界(困難版) - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g556.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/24/2022 Fri 16:21:24.48</span><span class="token comment">// https://192.168.193.20/contest/1/problem/004</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">st</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>box <span class="token function">tt</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>box <span class="token function">check</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        box a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        a<span class="token punctuation">.</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        b <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        box c<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">tt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">st</span><span class="token punctuation">(</span>box n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>b<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>d<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>box <span class="token function">check</span><span class="token punctuation">(</span>box a<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    box tmp<span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>now <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> tmp <span class="token operator">=</span> <span class="token function">tt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token function">tt</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tmp <span class="token operator">=</span> <span class="token function">tt</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> box <span class="token function">tt</span><span class="token punctuation">(</span>box a<span class="token punctuation">,</span>box b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    box tmp<span class="token punctuation">;</span>    tmp<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a <span class="token operator">*</span> b<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>b <span class="token operator">*</span> b<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>    tmp<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a <span class="token operator">*</span> b<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>b <span class="token operator">*</span> b<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>    tmp<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>c <span class="token operator">*</span> b<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>    tmp<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>c <span class="token operator">*</span> b<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> r<span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>fib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d052. 11456 - Trainsorting - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/23/Zerojudge-d052.cpp/"/>
    <url>/algosolution/2022/06/23/Zerojudge-d052.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d052-11456-Trainsorting-高中生程式解題系統"><a href="#d052-11456-Trainsorting-高中生程式解題系統" class="headerlink" title="d052. 11456 - Trainsorting - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d052">d052. 11456 - Trainsorting - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d052.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/23/2022 Thu 11:27:10.65</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"0\n"</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">g</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> found <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">==</span> f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token operator">*</span>found <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a133. 10066 - The Twin Towers - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/23/Zerojudge-a133.cpp/"/>
    <url>/algosolution/2022/06/23/Zerojudge-a133.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="a133-10066-The-Twin-Towers-高中生程式解題系統"><a href="#a133-10066-The-Twin-Towers-高中生程式解題系統" class="headerlink" title="a133. 10066 - The Twin Towers - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=a133">a133. 10066 - The Twin Towers - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a133.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/23/2022 Thu 10:29:46.82</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">v</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// if(f.at(0) == g.at(0)) v.at(0).at(0) = 1;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> g<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(vector&lt;int> i : v) &#123;</span>        <span class="token comment">//     for(int j : i) cout&lt;&lt;j&lt;&lt;" ";</span>        <span class="token comment">//     cout&lt;&lt;"\n";</span>        <span class="token comment">// &#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Twin Towers #"</span><span class="token operator">&lt;&lt;</span>t<span class="token operator">++</span><span class="token operator">&lt;&lt;</span><span class="token string">"\nNumber of Tiles : "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f416. 果然我的期中程設考搞錯了什麼 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/22/Zerojudge-f416-3.cpp/"/>
    <url>/algosolution/2022/06/22/Zerojudge-f416-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f416-果然我的期中程設考搞錯了什麼-高中生程式解題系統"><a href="#f416-果然我的期中程設考搞錯了什麼-高中生程式解題系統" class="headerlink" title="f416. 果然我的期中程設考搞錯了什麼 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f416">f416. 果然我的期中程設考搞錯了什麼 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f416-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/22/2022 Wed 18:08:26.56</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">check</span><span class="token punctuation">(</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>len <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> j <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    string c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token char">' '</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> r<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> n <span class="token operator">?</span> <span class="token string">"YES"</span> <span class="token operator">:</span> <span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>KMP</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>b035. 電皇的資源回收場 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/06/21/tcirc-b035.cpp/"/>
    <url>/algosolution/2022/06/21/tcirc-b035.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="b035-電皇的資源回收場-TCFSH-CIRC-Judge"><a href="#b035-電皇的資源回收場-TCFSH-CIRC-Judge" class="headerlink" title="b035. 電皇的資源回收場 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=b035">b035. 電皇的資源回收場 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/tcirc-b035.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/21/2022 Tue 11:10:24.68</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=b035</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    unordered_multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>cin<span class="token operator">>></span>r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>r <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>multiset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>i426. 12657 Boxes in a Line - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/18/Zerojudge-i426.cpp/"/>
    <url>/algosolution/2022/06/18/Zerojudge-i426.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="i426-12657-Boxes-in-a-Line-高中生程式解題系統"><a href="#i426-12657-Boxes-in-a-Line-高中生程式解題系統" class="headerlink" title="i426. 12657 Boxes in a Line - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=i426">i426. 12657 Boxes in a Line - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-i426.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/18/2022 Sat  9:07:18.04</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    box<span class="token operator">*</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ff</span><span class="token punctuation">(</span>box<span class="token operator">*</span><span class="token punctuation">,</span>box<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>box<span class="token operator">*</span><span class="token punctuation">,</span>box<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span>box<span class="token operator">*</span><span class="token punctuation">,</span>box<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>box<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">100002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        l<span class="token operator">++</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// g(&amp;f[5],&amp;f[7]);</span>        <span class="token comment">// r(&amp;f[4],&amp;f[5]);</span>        <span class="token comment">// for(int i = 1;i&lt;=n;i++) &#123;</span>        <span class="token comment">//     cout&lt;&lt;f[i].n&lt;&lt;": "&lt;&lt;f[i].l[0]->n&lt;&lt;" "&lt;&lt;f[i].l[1]->n&lt;&lt;"\n";   </span>        <span class="token comment">// &#125;</span>        <span class="token comment">// return 1;</span>        <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>                    <span class="token comment">// cout&lt;&lt;f[6].l[0]->n&lt;&lt;" "&lt;&lt;f[6].l[1]->n&lt;&lt;"\n";</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>                <span class="token function">ff</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>                <span class="token function">g</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> now <span class="token operator">=</span> <span class="token operator">!</span>now<span class="token punctuation">;</span>                    <span class="token comment">// box* p = (!now ? &amp;f[0] : &amp;f[n + 1]);</span>        <span class="token comment">// int rr = n + 1;</span>        <span class="token comment">// while(rr--) &#123;</span>        <span class="token comment">//     cerr&lt;&lt;p->n&lt;&lt;" ";</span>        <span class="token comment">//     if(p->n == ((!now) ? n + 1 : 0)) break;</span>        <span class="token comment">//     p = p->l[!now];</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// cerr&lt;&lt;"\n";</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        box<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>now <span class="token operator">?</span> <span class="token operator">&amp;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">&amp;</span>f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// n = 20;</span>        <span class="token comment">// int k = 20;</span>        <span class="token keyword">int</span> rr <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rr<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// cout&lt;&lt;f[6].l[0]->n&lt;&lt;" "&lt;&lt;f[6].l[1]->n&lt;&lt;"\n";</span>            <span class="token comment">// cerr&lt;&lt;p->n;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>n <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>now<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">+</span> p<span class="token operator">-></span>n<span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;ans;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token operator">!</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span>l<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ff</span><span class="token punctuation">(</span>box<span class="token operator">*</span> l<span class="token punctuation">,</span>box<span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>box<span class="token operator">*</span> l<span class="token punctuation">,</span>box<span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">r</span><span class="token punctuation">(</span>box<span class="token operator">*</span> l<span class="token punctuation">,</span>box<span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>    l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-></span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>b051. 2. 排列最大值 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/17/Zerojudge-b051.cpp/"/>
    <url>/algosolution/2022/06/17/Zerojudge-b051.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="b051-2-排列最大值-高中生程式解題系統"><a href="#b051-2-排列最大值-高中生程式解題系統" class="headerlink" title="b051. 2. 排列最大值 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=b051">b051. 2. 排列最大值 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b051.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/17/2022 Fri  6:33:16.09</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token keyword">bool</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">,</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;z&lt;&lt;" "&lt;&lt;(int) x&lt;&lt;"\n";</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string tmp <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c <span class="token function">xor</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i <span class="token operator">=</span> i <span class="token operator">%</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j <span class="token operator">=</span> j <span class="token operator">%</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>compare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c299. 1. 連號或不連號 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/15/Zerojudge-c299.cpp/"/>
    <url>/algosolution/2022/06/15/Zerojudge-c299.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="c299-1-連號或不連號-高中生程式解題系統"><a href="#c299-1-連號或不連號-高中生程式解題系統" class="headerlink" title="c299. 1. 連號或不連號 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=c299">c299. 1. 連號或不連號 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-c299.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/15/2022 Wed 19:51:45.00</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">1001</span><span class="token operator">></span>b<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> INT_MIN<span class="token punctuation">,</span>mmin <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmin<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mmax<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">_Find_first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">_Find_first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1001</span><span class="token punctuation">;</span>i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">_Find_next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>last <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>bitset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f680. 色塊數量 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/15/Zerojudge-f680-2.cpp/"/>
    <url>/algosolution/2022/06/15/Zerojudge-f680-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f680-色塊數量-高中生程式解題系統"><a href="#f680-色塊數量-高中生程式解題系統" class="headerlink" title="f680. 色塊數量 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f680">f680. 色塊數量 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f680-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// void c.check(int,int,int,int);</span><span class="token keyword">void</span> <span class="token function">pm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> color<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> mark<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">finding</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>up<span class="token punctuation">,</span>down<span class="token punctuation">;</span>left<span class="token operator">=</span>right<span class="token operator">=</span>up<span class="token operator">=</span>down<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token operator">&amp;&amp;</span>mark<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//pm();</span>            mark<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> up<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> left<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> down<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> right<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//cout&lt;&lt;up&lt;&lt;down&lt;&lt;right&lt;&lt;left&lt;&lt;"\n";</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>down<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向下找</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>up<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上找</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向左找</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向右找</span>    <span class="token comment">//if(left!=1&amp;&amp;up!=1) check(a-1,b-1,c,n);//向左上找</span>    <span class="token comment">//if(left!=1&amp;&amp;down!=1) check(a+1,b-1,c,n);//向左下找</span>    <span class="token comment">//if(right!=1&amp;&amp;up!=1) check(a-1,b+1,c,n);//向右上找</span>    <span class="token comment">//if(right!=1&amp;&amp;down!=1) check(a+1,b+1,c,n);//向右下找 </span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token operator">&amp;&amp;</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DFS</tag>
      
      <tag>class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d788. 排名順序 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/11/Zerojudge-d788.cpp/"/>
    <url>/algosolution/2022/06/11/Zerojudge-d788.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d788-排名順序-高中生程式解題系統"><a href="#d788-排名順序-高中生程式解題系統" class="headerlink" title="d788. 排名順序 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d788">d788. 排名順序 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d788.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/11/2022 Sat  8:45:20.98</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    tree<span class="token operator">*</span> l<span class="token punctuation">;</span>    tree<span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>tree<span class="token operator">></span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">200000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tree<span class="token operator">*</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>l <span class="token operator">=</span> a<span class="token operator">-></span>r <span class="token operator">=</span> a<span class="token punctuation">;</span>        a<span class="token operator">-></span>left <span class="token operator">=</span> a<span class="token operator">-></span>right <span class="token operator">=</span> l<span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">=</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>l <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>r <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>left <span class="token operator">=</span> l<span class="token punctuation">;</span>    a<span class="token operator">-></span>right <span class="token operator">=</span> r<span class="token punctuation">;</span>    a<span class="token operator">-></span>max <span class="token operator">=</span> a<span class="token operator">-></span>l<span class="token operator">-></span>max <span class="token operator">+</span> a<span class="token operator">-></span>r<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pluz</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    l <span class="token operator">=</span> a<span class="token operator">-></span>left<span class="token punctuation">;</span>    r <span class="token operator">=</span> a<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// int tmp = a->max;</span>        a<span class="token operator">-></span>max <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">pluz</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">pluz</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>max <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// printf("(%d %d) (%d %d)\n",l,r,a->left,a->right);</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if(l == r) &#123;</span>    <span class="token comment">//     printf("return %d\n",a->max);</span>    <span class="token comment">//     return a->max;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> a<span class="token operator">-></span>left<span class="token operator">&amp;&amp;</span>r <span class="token operator">==</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// printf("return %d\n",a->max);</span>        <span class="token keyword">return</span> a<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">pluz</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f315. 4. 低地距離 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/10/Zerojudge-f315-3.cpp/"/>
    <url>/algosolution/2022/06/10/Zerojudge-f315-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f315-4-低地距離-高中生程式解題系統"><a href="#f315-4-低地距離-高中生程式解題系統" class="headerlink" title="f315. 4. 低地距離 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f315">f315. 4. 低地距離 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f315-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/10/2022 Fri 16:18:38.06</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    tree<span class="token operator">*</span> l<span class="token punctuation">;</span>    tree<span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">int</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>tree<span class="token operator">*</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>l <span class="token operator">=</span> a<span class="token operator">-></span>r <span class="token operator">=</span> a<span class="token punctuation">;</span>        a<span class="token operator">-></span>left <span class="token operator">=</span> a<span class="token operator">-></span>right <span class="token operator">=</span> l<span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">=</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>l <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>r <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>left <span class="token operator">=</span> l<span class="token punctuation">;</span>    a<span class="token operator">-></span>right <span class="token operator">=</span> r<span class="token punctuation">;</span>    a<span class="token operator">-></span>max <span class="token operator">=</span> a<span class="token operator">-></span>l<span class="token operator">-></span>max <span class="token operator">+</span> a<span class="token operator">-></span>r<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pluz</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token operator">-></span>max<span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">return</span> n <span class="token operator">-</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">pluz</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">pluz</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>max <span class="token operator">+=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// printf("(%d %d) (%d %d)\n",l,r,a->left,a->right);</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if(l == r) &#123;</span>    <span class="token comment">//     printf("return %d\n",a->max);</span>    <span class="token comment">//     return a->max;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> a<span class="token operator">-></span>left<span class="token operator">&amp;&amp;</span>r <span class="token operator">==</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// printf("return %d\n",a->max);</span>        <span class="token keyword">return</span> a<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">ff</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ll</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ff<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ff<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">// debug(i);</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            ll<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>ff<span class="token punctuation">,</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// pluz(0,(n &lt;&lt; 1) - 1,&amp;c[0],3,1);</span>    <span class="token comment">// pluz(0,(n &lt;&lt; 1) - 1,&amp;c[0],2,1);</span>    <span class="token comment">// cerr&lt;&lt;check(0,(n &lt;&lt; 1) - 1,&amp;c[0]);</span>    <span class="token comment">// cerr&lt;&lt;check(3,3,&amp;c[0]);</span>    <span class="token comment">// return 0;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> ans <span class="token operator">+</span> <span class="token function">check</span><span class="token punctuation">(</span>ff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>ll<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// printf("check(%d,%d)\n",ff[i] + 1,ll[i] - 1);</span>        <span class="token function">pluz</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pluz</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ll<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i = 0;i&lt;10;i++) &#123;</span>    <span class="token comment">//     cerr&lt;&lt;c[i].max&lt;&lt;" ";</span>    <span class="token comment">// &#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d784. 一、連續元素的和 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/10/Zerojudge-d784-3.cpp/"/>
    <url>/algosolution/2022/06/10/Zerojudge-d784-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d784-一、連續元素的和-高中生程式解題系統"><a href="#d784-一、連續元素的和-高中生程式解題系統" class="headerlink" title="d784. 一、連續元素的和 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d784">d784. 一、連續元素的和 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d784-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/10/2022 Fri 13:57:58.91</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string a<span class="token punctuation">;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringstream s<span class="token punctuation">;</span>        s <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>        s <span class="token operator">>></span> a<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// f.pop_front();</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>mmax<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d784. 一、連續元素的和 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/10/Zerojudge-d784-2.cpp/"/>
    <url>/algosolution/2022/06/10/Zerojudge-d784-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d784-一、連續元素的和-高中生程式解題系統"><a href="#d784-一、連續元素的和-高中生程式解題系統" class="headerlink" title="d784. 一、連續元素的和 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d784">d784. 一、連續元素的和 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d784-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/10/2022 Fri 13:52:41.37</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> cin<span class="token operator">>></span>i<span class="token punctuation">;</span><span class="token keyword">int</span> mmax <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>ans <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>mmax<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d784. 一、連續元素的和 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/06/10/Zerojudge-d784.cpp/"/>
    <url>/algosolution/2022/06/10/Zerojudge-d784.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d784-一、連續元素的和-高中生程式解題系統"><a href="#d784-一、連續元素的和-高中生程式解題系統" class="headerlink" title="d784. 一、連續元素的和 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d784">d784. 一、連續元素的和 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d784.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/10/2022 Fri 13:38:31.07</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOCAL</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;C:\Users\Public\debug.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">printf</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token char">'*'</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string a<span class="token punctuation">;</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringstream s<span class="token punctuation">;</span>        s <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        f<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mmax <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">debug</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>mmax<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D - Knapsack 1</title>
    <link href="/algosolution/2022/06/02/Knapsack1.cpp/"/>
    <url>/algosolution/2022/06/02/Knapsack1.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="D-Knapsack-1"><a href="#D-Knapsack-1" class="headerlink" title="D - Knapsack 1"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_d">D - Knapsack 1</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Knapsack1.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 06/02/2022 Thu  9:11:13.58</span><span class="token comment">// https://atcoder.jp/contests/dp/tasks/dp_d</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> w<span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> mark<span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//w[i] = max(w[i],w[i - p[j]] + v[j]);</span>                    <span class="token keyword">int</span> r <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//w[i] = max(w[i],0 + v[j]);</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i = 0;i&lt;=b;i++) &#123;</span>    <span class="token comment">//     cout&lt;&lt;w[i]&lt;&lt;" ";</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// cout&lt;&lt;"\n";</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> nowv <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// for(int i = a - 1;i>=0;i--) &#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>nowv<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nowv <span class="token operator">=</span> nowv <span class="token operator">-</span> p<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// &#125;</span>        left<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nowv <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>w<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSES - Nearest Smaller Values</title>
    <link href="/algosolution/2022/05/31/Nearest-Smaller-Values.cpp/"/>
    <url>/algosolution/2022/05/31/Nearest-Smaller-Values.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="CSES-Nearest-Smaller-Values"><a href="#CSES-Nearest-Smaller-Values" class="headerlink" title="CSES - Nearest Smaller Values"></a><a href="https://cses.fi/problemset/task/1645/">CSES - Nearest Smaller Values</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Nearest-Smaller-Values.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 05/31/2022 Tue 21:55:19.94</span><span class="token comment">// https://cses.fi/problemset/task/1645/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token comment">// i = i * (-1);</span>    <span class="token punctuation">&#125;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"0 "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// if(i == 3) &#123;</span>        <span class="token comment">//     while(!q.empty()) &#123;</span>        <span class="token comment">//         cout&lt;&lt;q.top().first&lt;&lt;" "&lt;&lt;q.top().second&lt;&lt;" ";q.pop();</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     return 0;</span>        <span class="token comment">// &#125;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>second <span class="token operator">>=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token string">"0 "</span><span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>now<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>priority_queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g277. 3. 幸運數字 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/05/11/Zerojudge-g277-3.cpp/"/>
    <url>/algosolution/2022/05/11/Zerojudge-g277-3.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g277-3-幸運數字-高中生程式解題系統"><a href="#g277-3-幸運數字-高中生程式解題系統" class="headerlink" title="g277. 3. 幸運數字 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g277">g277. 3. 幸運數字 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g277-3.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 05/11/2022 Wed 15:58:23.63</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INT_MAX</span> <span class="token expression">LONG_LONG_MAX</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INT_MIN</span> <span class="token expression">LONG_LONG_MIN</span></span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    tree<span class="token operator">*</span> l<span class="token punctuation">;</span>    tree<span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">int</span> mi<span class="token punctuation">;</span>    <span class="token keyword">int</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">[</span><span class="token number">600000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>tree<span class="token operator">*</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>l <span class="token operator">=</span> a<span class="token operator">-></span>r <span class="token operator">=</span> a<span class="token punctuation">;</span>        a<span class="token operator">-></span>left <span class="token operator">=</span> a<span class="token operator">-></span>right <span class="token operator">=</span> l<span class="token punctuation">;</span>        a<span class="token operator">-></span>min <span class="token operator">=</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token operator">-></span>mi <span class="token operator">=</span> l<span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">=</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>l <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>r <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>left <span class="token operator">=</span> l<span class="token punctuation">;</span>    a<span class="token operator">-></span>right <span class="token operator">=</span> r<span class="token punctuation">;</span>    a<span class="token operator">-></span>max <span class="token operator">=</span> a<span class="token operator">-></span>l<span class="token operator">-></span>max <span class="token operator">+</span> a<span class="token operator">-></span>r<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">-></span>l<span class="token operator">-></span>min <span class="token operator">&lt;=</span> a<span class="token operator">-></span>r<span class="token operator">-></span>min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>min <span class="token operator">=</span> a<span class="token operator">-></span>l<span class="token operator">-></span>min<span class="token punctuation">;</span>        a<span class="token operator">-></span>mi <span class="token operator">=</span> a<span class="token operator">-></span>l<span class="token operator">-></span>mi<span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    a<span class="token operator">-></span>min <span class="token operator">=</span> a<span class="token operator">-></span>r<span class="token operator">-></span>min<span class="token punctuation">;</span>    a<span class="token operator">-></span>mi <span class="token operator">=</span> a<span class="token operator">-></span>r<span class="token operator">-></span>mi<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// printf("(%d %d) (%d %d)\n",l,r,a->left,a->right);</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if(l == r) &#123;</span>    <span class="token comment">//     printf("return %d\n",a->max);</span>    <span class="token comment">//     return a->max;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> a<span class="token operator">-></span>left<span class="token operator">&amp;&amp;</span>r <span class="token operator">==</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// printf("return %d\n",a->max);</span>        <span class="token keyword">return</span> a<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cm</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>INT_MAX<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> a<span class="token operator">-></span>left<span class="token operator">&amp;&amp;</span>r <span class="token operator">==</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>a<span class="token operator">-></span>min<span class="token punctuation">,</span>a<span class="token operator">-></span>mi<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cm</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cm</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> na <span class="token operator">=</span> <span class="token function">cm</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> nb <span class="token operator">=</span> <span class="token function">cm</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>na<span class="token punctuation">.</span>first <span class="token operator">&lt;=</span> nb<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> na<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pluz</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> a<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> l <span class="token operator">==</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>max <span class="token operator">+=</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>max <span class="token operator">+=</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">pluz</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>p<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>max <span class="token operator">+=</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">pluz</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>p<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> now <span class="token operator">=</span> <span class="token function">cm</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token comment">// printf("(%d,%d,%d) ",l,r,mid);</span>    <span class="token keyword">int</span> sl <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sr <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sl <span class="token operator">></span> sr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">start</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">start</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if(l == a->left&amp;&amp;r == a->right) &#123;</span>    <span class="token comment">//     return &#123;a->min,a->mi&#125;;</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// if(mid > r) return cm(l,r,a->l);</span>    <span class="token comment">// if(mid &lt; l) return cm(l,r,a->r);</span>    <span class="token comment">// auto na = cm(l,mid,a->l);</span>    <span class="token comment">// auto nb = cm(mid+1,r,a->r);</span>    <span class="token comment">// if(na.first &lt;= nb.first) &#123;</span>    <span class="token comment">//     return na;</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// return nb;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g277. 3. 幸運數字 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/05/11/Zerojudge-g277-2.cpp/"/>
    <url>/algosolution/2022/05/11/Zerojudge-g277-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g277-3-幸運數字-高中生程式解題系統"><a href="#g277-3-幸運數字-高中生程式解題系統" class="headerlink" title="g277. 3. 幸運數字 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g277">g277. 3. 幸運數字 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g277-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 05/11/2022 Wed  9:53:21.21</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INT_MAX</span> <span class="token expression">LONG_LONG_MAX</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INT_MIN</span> <span class="token expression">LONG_LONG_MIN</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">left</span> <span class="token expression">l<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">right</span> <span class="token expression">mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r</span></span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">3e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sig</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">auto</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> l <span class="token operator">||</span> now<span class="token punctuation">.</span>second <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token comment">/*    int mid;int tmp = INT_MAX;    for(int i = l;i&lt;=r;i++) &#123;        int s = sig(i,i);        if(s &lt; tmp) &#123;            tmp = s;            mid = i;        &#125;    &#125;*/</span>    <span class="token comment">//cout&lt;&lt;"("&lt;&lt;l&lt;&lt;","&lt;&lt;r&lt;&lt;")"&lt;&lt;"\t";</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">sig</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sig</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> f<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sig</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">sig</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> last <span class="token operator">+</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>last <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*while(!q.empty()) &#123;cout&lt;&lt;q.top().first&lt;&lt;" ";q.pop();&#125;cout&lt;&lt;"\n";return 0;*/</span><span class="token comment">//for(int i = 0;i&lt;n;i++) cout&lt;&lt;f[i]&lt;&lt;" ";</span><span class="token comment">//cout&lt;&lt;"\n";</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>pref</tag>
      
      <tag>priority_queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f314. 3. 勇者修煉 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/04/26/Zerojudge-f314-2.cpp/"/>
    <url>/algosolution/2022/04/26/Zerojudge-f314-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f314-3-勇者修煉-高中生程式解題系統"><a href="#f314-3-勇者修煉-高中生程式解題系統" class="headerlink" title="f314. 3. 勇者修煉 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f314">f314. 3. 勇者修煉 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f314-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/26/2022 Tue 22:10:59.11</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    for(int i = 0;i&lt;a;i++) &#123;        for(int j = 0;j&lt;b;j++) &#123;            cout&lt;&lt;c[i][j]&lt;&lt;" ";        &#125;        cout&lt;&lt;"\n";    &#125;    */</span>   <span class="token keyword">int</span> mmax <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>c<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d095. P-7-6. DAG 的最長與最短路徑 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/04/15/AP325-d095.cpp/"/>
    <url>/algosolution/2022/04/15/AP325-d095.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d095-P-7-6-DAG-的最長與最短路徑-TCFSH-CIRC-Judge"><a href="#d095-P-7-6-DAG-的最長與最短路徑-TCFSH-CIRC-Judge" class="headerlink" title="d095. P-7-6. DAG 的最長與最短路徑 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d095">d095. P-7-6. DAG 的最長與最短路徑 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d095.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/15/2022 Fri 10:12:41.37</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d095</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">p</span> <span class="token expression"><span class="token function">system</span><span class="token punctuation">(</span></span><span class="token string">"pause"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> to<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>h<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token operator">>></span>g<span class="token operator">>></span>h<span class="token punctuation">;</span>        e<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">,</span>h<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        to<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// delete &amp;f,&amp;g,&amp;h;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i = 0;i&lt;a;i++) &#123;</span>    <span class="token comment">//     for(auto j : e[i]) &#123;</span>    <span class="token comment">//         cerr&lt;&lt;j.first&lt;&lt;" "&lt;&lt;j.second&lt;&lt;"\n";</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cerr&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// cerr&lt;&lt;"\n";</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">mmax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>INT_MIN<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mmin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// mmax[i] = mmin[i] = 0;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    mmax<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> mmin<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cerr&lt;&lt;now;</span>        <span class="token comment">// mmax[now] = max(mmax[now],now.second);</span>        <span class="token comment">// mmin[now] = min(now.second,mmin[now]);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// if(now == d) return 100;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mmax<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">!=</span> INT_MIN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mmax<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>mmax<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mmin<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">,</span>mmin<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// to[i.first]--;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>to<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int i = 0;i&lt;a;i++) cout&lt;&lt;mmax.size();</span>    <span class="token comment">// cerr&lt;&lt;"\n";</span>    <span class="token comment">// for(int i : mmax) cerr&lt;&lt;i&lt;&lt;" ";</span>    <span class="token comment">// cerr&lt;&lt;"\n";</span>    <span class="token comment">// for(int i : mmin) cerr&lt;&lt;i&lt;&lt;" ";</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mmin<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"No path\nNo path\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmin<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>a129. 最小生成樹 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/04/11/Zerojudge-a129.cpp/"/>
    <url>/algosolution/2022/04/11/Zerojudge-a129.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="a129-最小生成樹-高中生程式解題系統"><a href="#a129-最小生成樹-高中生程式解題系統" class="headerlink" title="a129. 最小生成樹 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=a129">a129. 最小生成樹 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-a129.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/11/2022 Mon 11:16:53.53</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token operator">||</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token operator">||</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> to<span class="token punctuation">;</span>        <span class="token keyword">return</span> to<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cg</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">line</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cp</span><span class="token punctuation">(</span>line a<span class="token punctuation">,</span>line b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>w<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>line<span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// int c = m;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token keyword">int</span> lf <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rf <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lf <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>rf <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">+=</span> w<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lf <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rf <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>lf<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>rf<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lf <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> lf<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> rf<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lf <span class="token operator">==</span> rf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">+=</span> w<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>lf<span class="token punctuation">]</span> <span class="token operator">=</span> rf<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token comment">// for(int i : a) cerr&lt;&lt;i&lt;&lt;" ";</span>            <span class="token comment">// cerr&lt;&lt;"\n";</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Walrus Weights – Kattis, Kattis</title>
    <link href="/algosolution/2022/04/06/kattis-Walrus-Weights.cpp/"/>
    <url>/algosolution/2022/04/06/kattis-Walrus-Weights.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Walrus-Weights-–-Kattis-Kattis"><a href="#Walrus-Weights-–-Kattis-Kattis" class="headerlink" title="Walrus Weights – Kattis, Kattis"></a><a href="https://open.kattis.com/problems/walrusweights">Walrus Weights – Kattis, Kattis</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/kattis-Walrus-Weights.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/06/2022 Wed 17:48:02.14</span><span class="token comment">// https://open.kattis.com/problems/walrusweights</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("0.in","r",stdin);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for(int j = 1;j&lt;=n;j++) &#123;</span>    <span class="token comment">//     for(int i = 1;i&lt;=2000;i = i + 100) &#123;</span>    <span class="token comment">//         cerr&lt;&lt;c[j][i]&lt;&lt;" ";</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cerr&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dt <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> dt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mmax <span class="token operator">=</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            dt <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>b184. 5. 裝貨櫃問題 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/04/06/Zerojudge-b184.cpp/"/>
    <url>/algosolution/2022/04/06/Zerojudge-b184.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="b184-5-裝貨櫃問題-高中生程式解題系統"><a href="#b184-5-裝貨櫃問題-高中生程式解題系統" class="headerlink" title="b184. 5. 裝貨櫃問題 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=b184">b184. 5. 裝貨櫃問題 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b184.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/06/2022 Wed  8:11:20.57</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// freopen("0.in","r",stdin);</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> now <span class="token operator">=</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token keyword">int</span> value <span class="token operator">=</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>now<span class="token punctuation">)</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> now<span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i = 0;i&lt;=100;i++) &#123;</span>        <span class="token comment">//     for(int j = 0;j&lt;=100;j++) &#123;</span>        <span class="token comment">//         cerr&lt;&lt;c[j][i]&lt;&lt;" \n"[j == 100];</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// for(int i = 0;i&lt;=n;i++) &#123;</span>        <span class="token comment">//     for(int j = 0;j&lt;=100;j = j + 4) cerr&lt;&lt;c[i][j]&lt;&lt;" \n"[j == 100];</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// cerr&lt;&lt;"\n";</span>        cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>f640. 函數運算式求值 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/04/05/Zerojudge-f640.cpp/"/>
    <url>/algosolution/2022/04/05/Zerojudge-f640.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="f640-函數運算式求值-高中生程式解題系統"><a href="#f640-函數運算式求值-高中生程式解題系統" class="headerlink" title="f640. 函數運算式求值 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=f640">f640. 函數運算式求值 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-f640.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/05/2022 Tue  7:45:16.00</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    string c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"f"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"g"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"h"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> aa <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1002</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> aa <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bb <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span>bb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1003</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> aa <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bb <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cc <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d539. 區間 MAX - 高中生程式解題系統</title>
    <link href="/algosolution/2022/04/03/Zerojudge-d539.cpp/"/>
    <url>/algosolution/2022/04/03/Zerojudge-d539.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d539-區間-MAX-高中生程式解題系統"><a href="#d539-區間-MAX-高中生程式解題系統" class="headerlink" title="d539. 區間 MAX - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d539">d539. 區間 MAX - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d539.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 04/03/2022 Sun 18:11:13.50</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tree</span><span class="token punctuation">&#123;</span>    tree<span class="token operator">*</span> l<span class="token punctuation">;</span>    tree<span class="token operator">*</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">int</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>tree<span class="token operator">*</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">-></span>l <span class="token operator">=</span> a<span class="token operator">-></span>r <span class="token operator">=</span> a<span class="token punctuation">;</span>        a<span class="token operator">-></span>left <span class="token operator">=</span> a<span class="token operator">-></span>right <span class="token operator">=</span> l<span class="token punctuation">;</span>        a<span class="token operator">-></span>max <span class="token operator">=</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>l <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>r <span class="token operator">=</span> <span class="token function">mt</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>left <span class="token operator">=</span> l<span class="token punctuation">;</span>    a<span class="token operator">-></span>right <span class="token operator">=</span> r<span class="token punctuation">;</span>    a<span class="token operator">-></span>max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token operator">-></span>l<span class="token operator">-></span>max<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token operator">-></span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>tree<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>    <span class="token comment">// printf("(%d %d) (%d %d)\n",l,r,a->left,a->right);</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if(l == r) &#123;</span>    <span class="token comment">//     printf("return %d\n",a->max);</span>    <span class="token comment">//     return a->max;</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> a<span class="token operator">-></span>left<span class="token operator">&amp;&amp;</span>r <span class="token operator">==</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// printf("return %d\n",a->max);</span>        <span class="token keyword">return</span> a<span class="token operator">-></span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">-></span>l<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>left <span class="token operator">+</span> a<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token operator">-></span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">mt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// for(int i = 0;i&lt;a * 2 - 1;i++) &#123;</span>    <span class="token comment">//     if(c[i].l == c[i].r) cout&lt;&lt;c[i].left&lt;&lt;" "&lt;&lt;c[i].max&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// system("pause");</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>l<span class="token operator">>></span>r<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>seg_tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>b430. 簡單乘法 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/03/22/Zerojudge-b430.cpp/"/>
    <url>/algosolution/2022/03/22/Zerojudge-b430.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="b430-簡單乘法-高中生程式解題系統"><a href="#b430-簡單乘法-高中生程式解題系統" class="headerlink" title="b430. 簡單乘法 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=b430">b430. 簡單乘法 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-b430.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 03/22/2022 Tue  9:18:35.58</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">int</span> p<span class="token punctuation">;</span>cin<span class="token operator">>></span>p<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> now<span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> now <span class="token operator">%</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>fast-power</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d636. 大爆炸bomb - 高中生程式解題系統</title>
    <link href="/algosolution/2022/03/21/Zerojudge-d636.cpp/"/>
    <url>/algosolution/2022/03/21/Zerojudge-d636.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d636-大爆炸bomb-高中生程式解題系統"><a href="#d636-大爆炸bomb-高中生程式解題系統" class="headerlink" title="d636. 大爆炸bomb - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=d636">d636. 大爆炸bomb - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-d636.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 03/21/2022 Mon 22:10:25.65</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">p</span> <span class="token expression"><span class="token number">10007</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token comment">//int p;cin>>p;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>now <span class="token operator">*</span> now<span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> now <span class="token operator">*</span> now <span class="token operator">%</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>fast-power</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>g774. 校隊 (School Team) - 高中生程式解題系統</title>
    <link href="/algosolution/2022/03/19/Zerojudge-g774-2.cpp/"/>
    <url>/algosolution/2022/03/19/Zerojudge-g774-2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="g774-校隊-School-Team-高中生程式解題系統"><a href="#g774-校隊-School-Team-高中生程式解題系統" class="headerlink" title="g774. 校隊 (School Team) - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g774">g774. 校隊 (School Team) - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-g774-2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 03/19/2022 Sat 18:23:18.20</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token number">4001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>tmpa<span class="token operator">>></span>tmpb<span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>tmpa<span class="token punctuation">,</span>tmpb<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> hold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> hold <span class="token operator">+</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        hold <span class="token operator">=</span> hold <span class="token operator">+</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    hold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hold <span class="token operator">+</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        hold <span class="token operator">=</span> hold <span class="token operator">+</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// for(int i = 0;i&lt;=a;i++) &#123;</span>    <span class="token comment">//     for(int j = 0;j&lt;=b;j++) &#123;</span>    <span class="token comment">//         cout&lt;&lt;c[i][j]&lt;&lt;" ";</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//     cout&lt;&lt;"\n";</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>TOI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d043. 例題 P-4-2. 笑傲江湖之三戰 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/03/06/AP325-d043.cpp/"/>
    <url>/algosolution/2022/03/06/AP325-d043.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d043-例題-P-4-2-笑傲江湖之三戰-TCFSH-CIRC-Judge"><a href="#d043-例題-P-4-2-笑傲江湖之三戰-TCFSH-CIRC-Judge" class="headerlink" title="d043. 例題 P-4-2. 笑傲江湖之三戰 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d043">d043. 例題 P-4-2. 笑傲江湖之三戰 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d043.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 03/06/2022 Sun 12:16:13.32</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d043</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>greedy</tag>
      
      <tag>deque</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h028. 202001_3 砍樹 - 高中生程式解題系統</title>
    <link href="/algosolution/2022/03/06/Zerojudge-h028.cpp/"/>
    <url>/algosolution/2022/03/06/Zerojudge-h028.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="h028-202001-3-砍樹-高中生程式解題系統"><a href="#h028-202001-3-砍樹-高中生程式解題系統" class="headerlink" title="h028. 202001_3 砍樹 - 高中生程式解題系統"></a><a href="https://zerojudge.tw/ShowProblem?problemid=h028">h028. 202001_3 砍樹 - 高中生程式解題系統</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Zerojudge-h028.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 03/06/2022 Sun 11:32:31.40</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">box</span><span class="token punctuation">&#123;</span>    box<span class="token operator">*</span> left<span class="token punctuation">;</span>    box<span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token keyword">int</span> tree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    box b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>h <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tree <span class="token operator">=</span> m<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>h <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tree<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mmax<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>mmax<span class="token operator">=</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> i <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-></span>tree <span class="token operator">-</span> i<span class="token operator">-></span>h <span class="token operator">>=</span> i<span class="token operator">-></span>left<span class="token operator">-></span>tree<span class="token operator">||</span>i<span class="token operator">-></span>tree <span class="token operator">+</span> i<span class="token operator">-></span>h <span class="token operator">&lt;=</span> i<span class="token operator">-></span>right<span class="token operator">-></span>tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">-></span>left<span class="token operator">-></span>right <span class="token operator">=</span> i<span class="token operator">-></span>right<span class="token punctuation">;</span>            i<span class="token operator">-></span>right<span class="token operator">-></span>left <span class="token operator">=</span> i<span class="token operator">-></span>left<span class="token punctuation">;</span>            mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span>i<span class="token operator">-></span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> i<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> i<span class="token operator">-></span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token operator">&lt;&lt;</span>mmax<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>greedy</tag>
      
      <tag>re</tag>
      
      <tag>struct</tag>
      
      <tag>APCS</tag>
      
      <tag>pointer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d020. 例題 P-2-11. 最接近的區間和 (*) - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/02/23/AP325-d020.cpp/"/>
    <url>/algosolution/2022/02/23/AP325-d020.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d020-例題-P-2-11-最接近的區間和-TCFSH-CIRC-Judge"><a href="#d020-例題-P-2-11-最接近的區間和-TCFSH-CIRC-Judge" class="headerlink" title="d020. 例題 P-2-11. 最接近的區間和 (*) - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d020">d020. 例題 P-2-11. 最接近的區間和 (*) - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d020.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/23/2022 Wed  9:43:33.86</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d020</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">c</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token function">d</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> find <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">*</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>set</tag>
      
      <tag>pref</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d010. 例題 P-2-1. 不同的數—排序 - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/02/23/AP325-d010.cpp/"/>
    <url>/algosolution/2022/02/23/AP325-d010.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d010-例題-P-2-1-不同的數—排序-TCFSH-CIRC-Judge"><a href="#d010-例題-P-2-1-不同的數—排序-TCFSH-CIRC-Judge" class="headerlink" title="d010. 例題 P-2-1. 不同的數—排序 - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d010">d010. 例題 P-2-1. 不同的數—排序 - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d010.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/23/2022 Wed  8:48:27.42</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d010</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token operator">++</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d011. 例題 P-2-2. 離散化 – sort - TCFSH CIRC Judge</title>
    <link href="/algosolution/2022/02/23/AP325-d011.cpp/"/>
    <url>/algosolution/2022/02/23/AP325-d011.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="d011-例題-P-2-2-離散化-–-sort-TCFSH-CIRC-Judge"><a href="#d011-例題-P-2-2-離散化-–-sort-TCFSH-CIRC-Judge" class="headerlink" title="d011. 例題 P-2-2. 離散化 – sort - TCFSH CIRC Judge"></a><a href="https://judge.tcirc.tw/ShowProblem?problemid=d011">d011. 例題 P-2-2. 離散化 – sort - TCFSH CIRC Judge</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/AP325-d011.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/23/2022 Wed  8:38:30.62</span><span class="token comment">// https://judge.tcirc.tw/ShowProblem?problemid=d011</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//printf("f.insert(&#123;%d,%d&#125;);\n",b[i],k);</span>            f<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> second<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Avoid-Local-Maximums</title>
    <link href="/algosolution/2022/02/20/Avoid-Local-Maximums.cpp/"/>
    <url>/algosolution/2022/02/20/Avoid-Local-Maximums.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Avoid-Local-Maximums"><a href="#Codeforces-Avoid-Local-Maximums" class="headerlink" title="Codeforces - Avoid-Local-Maximums"></a><a href="https://codeforces.com/contest/1635/problem/B">Codeforces - Avoid-Local-Maximums</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Avoid-Local-Maximums.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/20/2022 Sun 22:51:17.00</span><span class="token comment">// https://codeforces.com/contest/1635/problem/B</span><span class="token comment">// WA</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">f</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tmp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ans <span class="token operator">+=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    ans <span class="token operator">+=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alphabet – Kattis, Kattis</title>
    <link href="/algosolution/2022/02/20/kattis-Alphabet2.cpp/"/>
    <url>/algosolution/2022/02/20/kattis-Alphabet2.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Alphabet-–-Kattis-Kattis"><a href="#Alphabet-–-Kattis-Kattis" class="headerlink" title="Alphabet – Kattis, Kattis"></a><a href="https://open.kattis.com/problems/alphabet">Alphabet – Kattis, Kattis</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/kattis-Alphabet2.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/20/2022 Sun 10:36:21.45</span><span class="token comment">// https://open.kattis.com/problems/alphabet</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token char">'a'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        c<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>now<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">27</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*        for(int k : c) &#123;            cout&lt;&lt;k&lt;&lt;" ";        &#125;        cout&lt;&lt;"\n";        */</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token number">26</span> <span class="token operator">-</span> c<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>DP</tag>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - mining-water-chestnut</title>
    <link href="/algosolution/2022/02/14/mining-water-chestnut.cpp/"/>
    <url>/algosolution/2022/02/14/mining-water-chestnut.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-mining-water-chestnut"><a href="#Codeforces-mining-water-chestnut" class="headerlink" title="Codeforces - mining-water-chestnut"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/J">Codeforces - mining-water-chestnut</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/mining-water-chestnut.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/14/2022 Mon 13:06:32.40</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/J</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mmin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> e <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> mmin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// for(int i : b) &#123;</span>        <span class="token comment">//     cout&lt;&lt;i&lt;&lt;" ";</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// cout&lt;&lt;" "&lt;&lt;mmax&lt;&lt;"\n";</span>        tmp <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> mmax<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mmin <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                mmax <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//mmax = max(mmax,b[j] - b[i]);</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>mmax <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> mmax <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
      <tag>gp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Perfect-take</title>
    <link href="/algosolution/2022/02/14/Perfect-take.cpp/"/>
    <url>/algosolution/2022/02/14/Perfect-take.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Perfect-take"><a href="#Codeforces-Perfect-take" class="headerlink" title="Codeforces - Perfect-take"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/D">Codeforces - Perfect-take</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Perfect-take.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/14/2022 Mon 13:00:20.27</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/D</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">opt</span><span class="token punctuation">(</span><span class="token keyword">bool</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"yeah!"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"oh no..."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">opt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token number">15</span> <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">opt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">opt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Colten-work-in-THSR</title>
    <link href="/algosolution/2022/02/13/Colten-work-in-THSR.cpp/"/>
    <url>/algosolution/2022/02/13/Colten-work-in-THSR.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Colten-work-in-THSR"><a href="#Codeforces-Colten-work-in-THSR" class="headerlink" title="Codeforces - Colten-work-in-THSR"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/I">Codeforces - Colten-work-in-THSR</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Colten-work-in-THSR.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 16:03:37.98</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/I</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">;</span>cin<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token operator">>></span>e<span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> c<span class="token punctuation">;</span>        <span class="token keyword">bool</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>            f<span class="token punctuation">[</span>tmp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span>t<span class="token operator">/</span>c <span class="token operator">+</span> d<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                cout<span class="token operator">&lt;&lt;</span><span class="token string">"-- "</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            t <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - XOR-and-OR-problem</title>
    <link href="/algosolution/2022/02/13/XOR-and-OR-problem.cpp/"/>
    <url>/algosolution/2022/02/13/XOR-and-OR-problem.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-XOR-and-OR-problem"><a href="#Codeforces-XOR-and-OR-problem" class="headerlink" title="Codeforces - XOR-and-OR-problem"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/H">Codeforces - XOR-and-OR-problem</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/XOR-and-OR-problem.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 15:39:52.90</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/H</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//cout&lt;&lt;((a^b^c)|(a|(b^c)) + (a^c) + (a|b|c) + (c|a)^((a + b)|c))&lt;&lt;" ";</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token operator">^</span>c<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>a<span class="token operator">|</span><span class="token punctuation">(</span>b<span class="token operator">^</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token operator">^</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token operator">|</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">|</span>a<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">|</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Colten&#39;s-math-problem</title>
    <link href="/algosolution/2022/02/13/Colten&#39;s-math-problem.cpp/"/>
    <url>/algosolution/2022/02/13/Colten&#39;s-math-problem.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Colten’s-math-problem"><a href="#Codeforces-Colten’s-math-problem" class="headerlink" title="Codeforces - Colten’s-math-problem"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/G">Codeforces - Colten’s-math-problem</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Colten's-math-problem.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 15:19:55.74</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/G</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> aa<span class="token punctuation">,</span>bb<span class="token punctuation">;</span>aa<span class="token operator">=</span>bb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2022</span><span class="token punctuation">;</span>        aa <span class="token operator">=</span> aa <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">+</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2022</span><span class="token punctuation">;</span>        bb <span class="token operator">=</span> bb <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">+</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>aa <span class="token operator">+</span> bb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - bamboo&#39;s-bamboo-sequence</title>
    <link href="/algosolution/2022/02/13/bamboo&#39;s-bamboo-sequence.cpp/"/>
    <url>/algosolution/2022/02/13/bamboo&#39;s-bamboo-sequence.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-bamboo’s-bamboo-sequence"><a href="#Codeforces-bamboo’s-bamboo-sequence" class="headerlink" title="Codeforces - bamboo’s-bamboo-sequence"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/F">Codeforces - bamboo’s-bamboo-sequence</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/bamboo's-bamboo-sequence.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 15:03:59.52</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/F</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cp</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>cin<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Water-problem</title>
    <link href="/algosolution/2022/02/13/Water-problem.cpp/"/>
    <url>/algosolution/2022/02/13/Water-problem.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Water-problem"><a href="#Codeforces-Water-problem" class="headerlink" title="Codeforces - Water-problem"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/E">Codeforces - Water-problem</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Water-problem.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 14:49:28.75</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/E</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> mmin <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token keyword">int</span> amin<span class="token punctuation">,</span>bmin<span class="token punctuation">;</span><span class="token keyword">bool</span> brk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> ar<span class="token punctuation">,</span><span class="token keyword">int</span> br<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ar <span class="token operator">></span> <span class="token number">10</span><span class="token operator">||</span>br <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>brk<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mmin <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        brk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">&lt;</span> mmin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        amin <span class="token operator">=</span> ar<span class="token punctuation">;</span>        bmin <span class="token operator">=</span> br<span class="token punctuation">;</span>        mmin <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">check</span><span class="token punctuation">(</span>now <span class="token operator">-</span> a<span class="token punctuation">,</span>ar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>br<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>now <span class="token operator">-</span> b<span class="token punctuation">,</span>ar<span class="token punctuation">,</span>br <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token operator">>></span>d<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    c <span class="token operator">=</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>amin<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>bmin<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mmin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Power-of-art</title>
    <link href="/algosolution/2022/02/13/Power-of-art.cpp/"/>
    <url>/algosolution/2022/02/13/Power-of-art.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Power-of-art"><a href="#Codeforces-Power-of-art" class="headerlink" title="Codeforces - Power-of-art"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/C">Codeforces - Power-of-art</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Power-of-art.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 14:21:09.41</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/C</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"penguin"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Ginorz"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Number-compare</title>
    <link href="/algosolution/2022/02/13/Number-compare.cpp/"/>
    <url>/algosolution/2022/02/13/Number-compare.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Number-compare"><a href="#Codeforces-Number-compare" class="headerlink" title="Codeforces - Number-compare"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/B">Codeforces - Number-compare</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Number-compare.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 14:10:10.20</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/B</span><span class="token comment">// WA</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"Odd"</span> <span class="token operator">:</span> <span class="token string">"Even"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"Odd"</span> <span class="token operator">:</span> <span class="token string">"Even"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token comment">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;"\n";</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&amp;&amp;</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Gunjyo"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">&amp;&amp;</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Koying"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b <span class="token operator">?</span> <span class="token string">"Koying"</span> <span class="token operator">:</span> <span class="token string">"Gunjyo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Trips</title>
    <link href="/algosolution/2022/02/13/Trips.cpp/"/>
    <url>/algosolution/2022/02/13/Trips.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Trips"><a href="#Codeforces-Trips" class="headerlink" title="Codeforces - Trips"></a><a href="https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/A">Codeforces - Trips</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Trips.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/13/2022 Sun 14:05:19.33</span><span class="token comment">// https://codeforces.com/group/H0qY3QmnOW/contest/366708/problem/A</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Reverse-and-Concatenate</title>
    <link href="/algosolution/2022/02/06/Reverse-and-Concatenate.cpp/"/>
    <url>/algosolution/2022/02/06/Reverse-and-Concatenate.cpp/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Reverse-and-Concatenate"><a href="#Codeforces-Reverse-and-Concatenate" class="headerlink" title="Codeforces - Reverse-and-Concatenate"></a><a href="https://codeforces.com/contest/1634/problem/A">Codeforces - Reverse-and-Concatenate</a></h1><p><a href="https://github.com/mysh212/Coding/blob/master/Reverse-and-Concatenate.cpp"><em><strong>code</strong></em></a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Author : ysh</span><span class="token comment">// 02/06/2022 Sun 22:41:13.03</span><span class="token comment">// https://codeforces.com/contest/1634/problem/A</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        string c<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token punctuation">;</span>        <span class="token keyword">bool</span> did <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                did <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>did<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/*    int n;cin>>n;    string a;    while(n--) &#123;        queue&lt;string>f;        queue&lt;string>v;        int b;cin>>b;        cin>>a;        f.push(a);        while(b--) &#123;            while(!f.empty()) &#123;                auto now = f.front();f.pop();                auto nnow=now;                reverse(now.begin(),now.end());            &#125;        &#125;    &#125;    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>資訊</category>
      
      <category>題解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solution</tag>
      
      <tag>contest</tag>
      
      <tag>abba</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
